{
  "executionId" : "5a61c722-f23c-4b47-96d5-6124d434f11f",
  "computingTime" : 983206,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.388727484020918,
    "meanNumConcerns" : 1.9047887323943664,
    "meanMetricsIntensity" : 0.0626901885889211,
    "meanLackOfCohesion" : 1.304513730459456
  },
  "population" : [ {
    "solutionId" : "ee4e6861-ad07-4c56-8a4b-7f4f0447bc59",
    "objectives" : {
      "NumberOfConcerns" : 1.0035492457852706,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3000255084931622,
      "MetricsIntensity" : 0.06239708261318357,
      "Density" : 1.0003429355281208
    },
    "euclideanDistance" : 11.166994080594327,
    "generation" : 39,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9019058295964129,
      "LackOfCohesion" : 1.3000255084931622,
      "MetricsIntensity" : 0.062397082613183566,
      "Density" : 3.3742047426257957
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "a19b4ab7-c2b6-467d-b44b-856d76c3c89e",
    "objectives" : {
      "NumberOfConcerns" : 1.0035492457852706,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3011773514418798,
      "MetricsIntensity" : 0.062375619701095654,
      "Density" : 1.000514403292181
    },
    "euclideanDistance" : 11.167143474396202,
    "generation" : 22,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9019058295964129,
      "LackOfCohesion" : 1.3011773514418798,
      "MetricsIntensity" : 0.06237561970109565,
      "Density" : 3.3747831116252174
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "0d6406e7-8f0d-4729-a167-45423ce2584a",
    "objectives" : {
      "NumberOfConcerns" : 1.0041407867494825,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3006980130719168,
      "MetricsIntensity" : 0.06239070595089659,
      "Density" : 1.0006858710562414
    },
    "euclideanDistance" : 11.16715625634135,
    "generation" : 42,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9030269058295965,
      "LackOfCohesion" : 1.3006980130719168,
      "MetricsIntensity" : 0.062390705950896595,
      "Density" : 3.375361480624638
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "1b41c83c-22ab-477e-a498-d7b64d6bcf92",
    "objectives" : {
      "NumberOfConcerns" : 1.0038450162673764,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.299810879372283,
      "MetricsIntensity" : 0.06238697327053345,
      "Density" : 1.0022290809327847
    },
    "euclideanDistance" : 11.16716474329633,
    "generation" : 39,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902466367713005,
      "LackOfCohesion" : 1.299810879372283,
      "MetricsIntensity" : 0.062386973270533455,
      "Density" : 3.3805668016194335
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "aee32ba6-6f18-4a2b-b48e-9f96572a7d08",
    "objectives" : {
      "NumberOfConcerns" : 1.0041407867494825,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2996606389876677,
      "MetricsIntensity" : 0.06238697327053346,
      "Density" : 1.0022290809327847
    },
    "euclideanDistance" : 11.167173848438509,
    "generation" : 36,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.903026905829597,
      "LackOfCohesion" : 1.2996606389876677,
      "MetricsIntensity" : 0.06238697327053347,
      "Density" : 3.380566801619433
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "01d6708e-4fb1-42fd-be46-1f844d4c92a0",
    "objectives" : {
      "NumberOfConcerns" : 1.0038450162673764,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.299696410507814,
      "MetricsIntensity" : 0.0624121688629845,
      "Density" : 1.0025720164609053
    },
    "euclideanDistance" : 11.167182343956975,
    "generation" : 40,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9024663677130047,
      "LackOfCohesion" : 1.299696410507814,
      "MetricsIntensity" : 0.0624121688629845,
      "Density" : 3.381723539618276
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "bea6ee13-263a-4dc9-aad0-2faf068f181f",
    "objectives" : {
      "NumberOfConcerns" : 1.0041407867494825,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2995461701231985,
      "MetricsIntensity" : 0.062412168862984486,
      "Density" : 1.0025720164609053
    },
    "euclideanDistance" : 11.167191450624836,
    "generation" : 20,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9030269058295963,
      "LackOfCohesion" : 1.2995461701231985,
      "MetricsIntensity" : 0.062412168862984486,
      "Density" : 3.3817235396182763
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "b87bf249-100e-44a5-8a2d-1fadc3585375",
    "objectives" : {
      "NumberOfConcerns" : 1.0032534753031648,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.298872988253731,
      "MetricsIntensity" : 0.06243317339476504,
      "Density" : 1.0
    },
    "euclideanDistance" : 13.141441567669172,
    "generation" : 49,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9024116657319134,
      "LackOfCohesion" : 1.298872988253731,
      "MetricsIntensity" : 0.06243317339476504,
      "Density" : 3.375
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "ea583e88-db39-4adf-bfbb-e6c2b1e7902d",
    "objectives" : {
      "NumberOfConcerns" : 1.0032534753031648,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3000255238320035,
      "MetricsIntensity" : 0.062411697576536376,
      "Density" : 1.0001714677640603
    },
    "euclideanDistance" : 13.14156847880976,
    "generation" : 50,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9024116657319126,
      "LackOfCohesion" : 1.3000255238320035,
      "MetricsIntensity" : 0.06241169757653638,
      "Density" : 3.375578703703704
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "f626629e-9324-4cf5-a30d-52aa497e1513",
    "objectives" : {
      "NumberOfConcerns" : 1.0020703933747412,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3018595587087323,
      "MetricsIntensity" : 0.06241147560425491,
      "Density" : 0.9996570644718793
    },
    "euclideanDistance" : 13.14162063151707,
    "generation" : 36,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9001682557487378,
      "LackOfCohesion" : 1.3018595587087323,
      "MetricsIntensity" : 0.06241147560425492,
      "Density" : 3.373842592592593
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "97c7a9f1-100f-4023-a860-9c318e566e89",
    "objectives" : {
      "NumberOfConcerns" : 1.0038450162673764,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.30152692214639,
      "MetricsIntensity" : 0.06239062227351115,
      "Density" : 1.0001714677640603
    },
    "euclideanDistance" : 13.141762161157601,
    "generation" : 50,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9035333707234996,
      "LackOfCohesion" : 1.30152692214639,
      "MetricsIntensity" : 0.06239062227351116,
      "Density" : 3.3755787037037046
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.core.FlattenRangePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "ac010289-52d6-4f67-84c5-b52ce9bec8bd",
    "objectives" : {
      "NumberOfConcerns" : 1.0020703933747412,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3002510199234045,
      "MetricsIntensity" : 0.06242221351336926,
      "Density" : 0.9994855967078189
    },
    "euclideanDistance" : 14.131442452165183,
    "generation" : 39,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9001682557487378,
      "LackOfCohesion" : 1.3002510199234045,
      "MetricsIntensity" : 0.06242221351336926,
      "Density" : 3.3752171395483495
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "acaab68b-1db9-430a-91e6-527c894c660d",
    "objectives" : {
      "NumberOfConcerns" : 1.0014788524105294,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.2997046406734587,
      "MetricsIntensity" : 0.06246908550105113,
      "Density" : 0.9991426611796982
    },
    "euclideanDistance" : 15.122644626150752,
    "generation" : 38,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.900112233445567,
      "LackOfCohesion" : 1.2997046406734587,
      "MetricsIntensity" : 0.06246908550105113,
      "Density" : 3.3740590619571504
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "2abf74df-e056-46d8-a4a1-ea853ccda2a0",
    "objectives" : {
      "NumberOfConcerns" : 1.0020703933747412,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.3023601713975814,
      "MetricsIntensity" : 0.062426508777437884,
      "Density" : 0.9993141289437586
    },
    "euclideanDistance" : 15.122923423949011,
    "generation" : 16,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9012345679012348,
      "LackOfCohesion" : 1.3023601713975814,
      "MetricsIntensity" : 0.062426508777437884,
      "Density" : 3.37463810075275
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.core.FlattenRangePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "0590b71c-3c78-4453-97d0-1134e3fd0580",
    "objectives" : {
      "NumberOfConcerns" : 1.0017746228926354,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.3025750587965843,
      "MetricsIntensity" : 0.062436630285361935,
      "Density" : 0.9994855967078189
    },
    "euclideanDistance" : 15.122933709095546,
    "generation" : 47,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9006734006734003,
      "LackOfCohesion" : 1.3025750587965843,
      "MetricsIntensity" : 0.062436630285361935,
      "Density" : 3.37521713954835
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.core.FlattenRangePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "2b33056b-4810-46d6-8e3e-f99a8cb4f5fa",
    "objectives" : {
      "NumberOfConcerns" : 1.0005915409642119,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3009330803044252,
      "MetricsIntensity" : 0.062458119025262195,
      "Density" : 0.9986282578875172
    },
    "euclideanDistance" : 16.115047928112503,
    "generation" : 35,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8984287317620647,
      "LackOfCohesion" : 1.3009330803044252,
      "MetricsIntensity" : 0.062458119025262195,
      "Density" : 3.3742757821552725
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "0b45d03c-98d2-49a5-8b37-fd9bdff12da2",
    "objectives" : {
      "NumberOfConcerns" : 1.002957704821059,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2991142332785,
      "MetricsIntensity" : 0.06237443759890403,
      "Density" : 0.9991426611796982
    },
    "euclideanDistance" : 17.108354642589735,
    "generation" : 48,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9018508132361185,
      "LackOfCohesion" : 1.2991142332785,
      "MetricsIntensity" : 0.06237443759890403,
      "Density" : 3.372106481481482
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "a02300cb-afa3-4380-89a3-f680eb87c427",
    "objectives" : {
      "NumberOfConcerns" : 1.002661934338953,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2993289914607866,
      "MetricsIntensity" : 0.06238455302053345,
      "Density" : 0.9993141289437586
    },
    "euclideanDistance" : 17.10836366644645,
    "generation" : 49,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901289960740325,
      "LackOfCohesion" : 1.2993289914607866,
      "MetricsIntensity" : 0.062384553020533445,
      "Density" : 3.3726851851851856
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "d77b67e0-b8ad-4a59-9a69-edfc2683b721",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.300684460292961,
      "MetricsIntensity" : 0.0624669948091341,
      "Density" : 0.9991426611796982
    },
    "euclideanDistance" : 17.108370343537022,
    "generation" : 49,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.899551066217733,
      "LackOfCohesion" : 1.300684460292961,
      "MetricsIntensity" : 0.0624669948091341,
      "Density" : 3.3760139049826186
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "c162d688-dfa4-48ed-9e11-75e8160f78b1",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2999302304631477,
      "MetricsIntensity" : 0.06249429001032064,
      "Density" : 0.9982853223593965
    },
    "euclideanDistance" : 18.10221803330172,
    "generation" : 38,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898371701291409,
      "LackOfCohesion" : 1.2999302304631477,
      "MetricsIntensity" : 0.06249429001032064,
      "Density" : 3.375072463768116
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "23c7a3d3-09ee-423e-8930-600d3bcca140",
    "objectives" : {
      "NumberOfConcerns" : 1.002366163856847,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2995797483100011,
      "MetricsIntensity" : 0.06235456753560998,
      "Density" : 0.9987997256515775
    },
    "euclideanDistance" : 18.102351627142724,
    "generation" : 39,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.900729108244531,
      "LackOfCohesion" : 1.2995797483100011,
      "MetricsIntensity" : 0.06235456753560999,
      "Density" : 3.3709490740740744
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "fc7d328b-fec2-4475-8d3d-342c0a8b1bdd",
    "objectives" : {
      "NumberOfConcerns" : 1.0002957704821058,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.3016484533734236,
      "MetricsIntensity" : 0.06248331693219833,
      "Density" : 0.9984567901234568
    },
    "euclideanDistance" : 18.102367260975907,
    "generation" : 43,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8989331836047163,
      "LackOfCohesion" : 1.3016484533734236,
      "MetricsIntensity" : 0.06248331693219832,
      "Density" : 3.375652173913044
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.core.FlattenRangePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "f27ee78e-2aa3-4b08-8afe-5c7524bf7af9",
    "objectives" : {
      "NumberOfConcerns" : 1.002957704821059,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2991001217028944,
      "MetricsIntensity" : 0.062369662857118535,
      "Density" : 1.0010288065843622
    },
    "euclideanDistance" : 18.102473144029936,
    "generation" : 32,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901850813236119,
      "LackOfCohesion" : 1.2991001217028944,
      "MetricsIntensity" : 0.06236966285711854,
      "Density" : 3.3784722222222228
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "73a9898a-d27e-417e-ac35-eb21baf10c31",
    "objectives" : {
      "NumberOfConcerns" : 1.002957704821059,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2991001217028941,
      "MetricsIntensity" : 0.06236966285711854,
      "Density" : 1.0010288065843622
    },
    "euclideanDistance" : 18.102473144029936,
    "generation" : 16,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9018508132361187,
      "LackOfCohesion" : 1.2991001217028941,
      "MetricsIntensity" : 0.06236966285711854,
      "Density" : 3.3784722222222228
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "b1654996-9490-43a9-8f8b-498dfb34f7c0",
    "objectives" : {
      "NumberOfConcerns" : 1.002366163856847,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2981108924641869,
      "MetricsIntensity" : 0.06241053647059818,
      "Density" : 0.9987997256515775
    },
    "euclideanDistance" : 19.096893092401274,
    "generation" : 49,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9017957351290686,
      "LackOfCohesion" : 1.2981108924641869,
      "MetricsIntensity" : 0.06241053647059818,
      "Density" : 3.3729009843659528
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "2398e3b0-94f2-4737-bc2f-c7eb27d8f6a6",
    "objectives" : {
      "NumberOfConcerns" : 1.002366163856847,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.2980967723978616,
      "MetricsIntensity" : 0.06240575943132725,
      "Density" : 1.0006858710562414
    },
    "euclideanDistance" : 20.092164140487622,
    "generation" : 48,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9017957351290686,
      "LackOfCohesion" : 1.2980967723978616,
      "MetricsIntensity" : 0.06240575943132725,
      "Density" : 3.3792704111175444
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "b8d3157f-d88b-498d-ac42-406e5397d70d",
    "objectives" : {
      "NumberOfConcerns" : 1.002661934338953,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.3010817971337891,
      "MetricsIntensity" : 0.062348077728177485,
      "Density" : 1.0006858710562414
    },
    "euclideanDistance" : 20.092371793611953,
    "generation" : 46,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902356902356902,
      "LackOfCohesion" : 1.3010817971337891,
      "MetricsIntensity" : 0.062348077728177485,
      "Density" : 3.3792704111175444
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.core.FlattenRangePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "8ad36c24-ae49-4239-b20f-05a554b32eeb",
    "objectives" : {
      "NumberOfConcerns" : 0.9988169180715765,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.299433200481499,
      "MetricsIntensity" : 0.06261041640284484,
      "Density" : 0.9977709190672154
    },
    "euclideanDistance" : 21.087570480013053,
    "generation" : 50,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8971910112359551,
      "LackOfCohesion" : 1.299433200481499,
      "MetricsIntensity" : 0.06261041640284484,
      "Density" : 3.375290023201856
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "213318b9-0c1a-466b-a92d-1e78cc788bbe",
    "objectives" : {
      "NumberOfConcerns" : 1.0017746228926354,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.2987177969809802,
      "MetricsIntensity" : 0.06246034860838117,
      "Density" : 1.0003429355281208
    },
    "euclideanDistance" : 21.08778811528312,
    "generation" : 42,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9006734006734005,
      "LackOfCohesion" : 1.2987177969809802,
      "MetricsIntensity" : 0.06246034860838117,
      "Density" : 3.3781123335263468
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "f1d8c245-44ae-4817-880c-30e0684930a4",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.3001717659695837,
      "MetricsIntensity" : 0.062435483491044996,
      "Density" : 0.9974279835390947
    },
    "euclideanDistance" : 22.083673062683346,
    "generation" : 43,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8978102189781023,
      "LackOfCohesion" : 1.3001717659695837,
      "MetricsIntensity" : 0.062435483491044996,
      "Density" : 3.3721739130434787
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "69374d55-5df4-4bc9-8604-65bd062c61aa",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.2999122454386318,
      "MetricsIntensity" : 0.06244396362109416,
      "Density" : 0.9987997256515775
    },
    "euclideanDistance" : 22.083786802764042,
    "generation" : 51,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9006176305446383,
      "LackOfCohesion" : 1.2999122454386318,
      "MetricsIntensity" : 0.06244396362109416,
      "Density" : 3.3748551564310545
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc419ddf-2507-4e06-987a-071f275e0382",
    "objectives" : {
      "NumberOfConcerns" : 0.9994084590357882,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.3004873297849882,
      "MetricsIntensity" : 0.06241558950232858,
      "Density" : 0.997085048010974
    },
    "euclideanDistance" : 23.080038103558312,
    "generation" : 47,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8972487366647948,
      "LackOfCohesion" : 1.3004873297849882,
      "MetricsIntensity" : 0.06241558950232858,
      "Density" : 3.371014492753623
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "5d0ea8ea-6822-49d0-9a18-afce489969f7",
    "objectives" : {
      "NumberOfConcerns" : 1.0014788524105294,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.298608204407489,
      "MetricsIntensity" : 0.062379220829482225,
      "Density" : 0.9982853223593965
    },
    "euclideanDistance" : 23.080073828140357,
    "generation" : 47,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9001122334455667,
      "LackOfCohesion" : 1.298608204407489,
      "MetricsIntensity" : 0.06237922082948223,
      "Density" : 3.371163867979154
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "f87addd2-4112-43a0-a6c7-4da1cbf3a020",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2997521178318814,
      "MetricsIntensity" : 0.06268066364955317,
      "Density" : 0.9977709190672154
    },
    "euclideanDistance" : 24.076642098517794,
    "generation" : 19,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965711073636875,
      "LackOfCohesion" : 1.2997521178318814,
      "MetricsIntensity" : 0.06268066364955319,
      "Density" : 3.3772489843296594
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "4305b004-21bc-4c50-a7e0-ec6901616960",
    "objectives" : {
      "NumberOfConcerns" : 1.0008873114463177,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2975034078376497,
      "MetricsIntensity" : 0.06244536590438532,
      "Density" : 0.9984567901234568
    },
    "euclideanDistance" : 24.076671403851304,
    "generation" : 47,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9000561482313307,
      "LackOfCohesion" : 1.2975034078376497,
      "MetricsIntensity" : 0.062445365904385326,
      "Density" : 3.37369640787949
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "1d327360-f52e-42bb-a706-e9b3bf344018",
    "objectives" : {
      "NumberOfConcerns" : 1.0002957704821058,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2988281170330602,
      "MetricsIntensity" : 0.0625107889568715,
      "Density" : 0.997599451303155
    },
    "euclideanDistance" : 24.0766828772158,
    "generation" : 40,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8989331836047167,
      "LackOfCohesion" : 1.2988281170330602,
      "MetricsIntensity" : 0.0625107889568715,
      "Density" : 3.3727536231884048
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "cd9ff081-9e91-46a1-a3ec-a830275e2972",
    "objectives" : {
      "NumberOfConcerns" : 1.0017746228926354,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2986676565878794,
      "MetricsIntensity" : 0.06233188331549899,
      "Density" : 0.9996570644718793
    },
    "euclideanDistance" : 24.07682058718645,
    "generation" : 39,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9006734006734007,
      "LackOfCohesion" : 1.2986676565878794,
      "MetricsIntensity" : 0.062331883315499,
      "Density" : 3.375796178343949
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "576e7689-6382-49b2-a130-666e005d781a",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.299890027790736,
      "MetricsIntensity" : 0.06256170816046712,
      "Density" : 0.997085048010974
    },
    "euclideanDistance" : 25.073576939641978,
    "generation" : 36,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896067415730337,
      "LackOfCohesion" : 1.299890027790736,
      "MetricsIntensity" : 0.0625617081604671,
      "Density" : 3.3729698375870067
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "c9a35b02-d549-4114-bc19-2e96c720c180",
    "objectives" : {
      "NumberOfConcerns" : 0.9994084590357882,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2985455694271424,
      "MetricsIntensity" : 0.06253251504690362,
      "Density" : 0.9991426611796982
    },
    "euclideanDistance" : 25.073636238820615,
    "generation" : 38,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8983146067415728,
      "LackOfCohesion" : 1.2985455694271424,
      "MetricsIntensity" : 0.06253251504690362,
      "Density" : 3.3779710144927533
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "3014d896-c1f7-432d-97dc-c1a60d6fb1da",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.300820827112591,
      "MetricsIntensity" : 0.062490460436652566,
      "Density" : 0.9972565157750343
    },
    "euclideanDistance" : 25.073643630759666,
    "generation" : 43,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896629213483146,
      "LackOfCohesion" : 1.300820827112591,
      "MetricsIntensity" : 0.06249046043665257,
      "Density" : 3.3735498839907194
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "0ab7da54-89d3-4562-9754-28f5f357286d",
    "objectives" : {
      "NumberOfConcerns" : 0.9994084590357882,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2984308247340846,
      "MetricsIntensity" : 0.06255777135162564,
      "Density" : 0.9994855967078189
    },
    "euclideanDistance" : 25.07364402729278,
    "generation" : 50,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8983146067415728,
      "LackOfCohesion" : 1.2984308247340846,
      "MetricsIntensity" : 0.06255777135162563,
      "Density" : 3.379130434782608
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "2b931a89-943f-4e5a-bb05-659e1979831b",
    "objectives" : {
      "NumberOfConcerns" : 0.9988169180715765,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2988224318183181,
      "MetricsIntensity" : 0.06260937297955195,
      "Density" : 0.9977709190672154
    },
    "euclideanDistance" : 26.07075069279252,
    "generation" : 44,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8982574480044971,
      "LackOfCohesion" : 1.2988224318183181,
      "MetricsIntensity" : 0.06260937297955195,
      "Density" : 3.377248984329658
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.core.FlattenRangePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "51c67000-da96-4a8d-9f07-ceb9e441d931",
    "objectives" : {
      "NumberOfConcerns" : 0.9976338361431529,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.30046807302195,
      "MetricsIntensity" : 0.06270604137455026,
      "Density" : 0.997599451303155
    },
    "euclideanDistance" : 26.070781100550715,
    "generation" : 47,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970753655793031,
      "LackOfCohesion" : 1.30046807302195,
      "MetricsIntensity" : 0.06270604137455026,
      "Density" : 3.3786295005807188
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.core.FlattenRangePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "074e5172-65ab-4ff6-ab1f-2c6217089697",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2996389783426119,
      "MetricsIntensity" : 0.06256335383808505,
      "Density" : 0.9982853223593965
    },
    "euclideanDistance" : 26.07082229996856,
    "generation" : 48,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8988195615514332,
      "LackOfCohesion" : 1.2996389783426119,
      "MetricsIntensity" : 0.06256335383808503,
      "Density" : 3.3789901334881023
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.core.FlattenRangePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "47226d0b-3533-4384-a0ba-91d1bc940ef9",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.3000841552158073,
      "MetricsIntensity" : 0.06250225321101846,
      "Density" : 0.9969135802469136
    },
    "euclideanDistance" : 27.06815484126991,
    "generation" : 50,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976953344575602,
      "LackOfCohesion" : 1.3000841552158073,
      "MetricsIntensity" : 0.06250225321101846,
      "Density" : 3.3743470690655823
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.core.FlattenRangePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "40db3544-b154-4c61-a75c-b9e1651eec05",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2997451273006921,
      "MetricsIntensity" : 0.062481475997671065,
      "Density" : 0.9977709190672154
    },
    "euclideanDistance" : 27.068213769738055,
    "generation" : 25,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898876404494382,
      "LackOfCohesion" : 1.2997451273006921,
      "MetricsIntensity" : 0.062481475997671065,
      "Density" : 3.373333333333333
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "1ebbff71-0786-4cd6-a6f0-dea90d7d8b98",
    "objectives" : {
      "NumberOfConcerns" : 1.0008873114463177,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.300027149977896,
      "MetricsIntensity" : 0.06239468608117244,
      "Density" : 0.9974279835390947
    },
    "euclideanDistance" : 27.06825819442566,
    "generation" : 49,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9000561482313305,
      "LackOfCohesion" : 1.300027149977896,
      "MetricsIntensity" : 0.06239468608117245,
      "Density" : 3.3721739130434782
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "d48ec616-e958-4a5c-9b57-e5912ab727b2",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2986559186609885,
      "MetricsIntensity" : 0.06258305970349252,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 28.06562129463822,
    "generation" : 48,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965711073636875,
      "LackOfCohesion" : 1.2986559186609885,
      "MetricsIntensity" : 0.06258305970349252,
      "Density" : 3.37260591990714
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "94146064-12fb-4d9c-9a81-5485408af2c4",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.3001477406268283,
      "MetricsIntensity" : 0.06270405471420618,
      "Density" : 0.997085048010974
    },
    "euclideanDistance" : 28.065693965339932,
    "generation" : 21,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965129358830144,
      "LackOfCohesion" : 1.3001477406268283,
      "MetricsIntensity" : 0.06270405471420619,
      "Density" : 3.376887340301974
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "607177be-c8a6-46ff-9825-29dee8b71217",
    "objectives" : {
      "NumberOfConcerns" : 0.9994084590357882,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2985574880420228,
      "MetricsIntensity" : 0.06254487062398577,
      "Density" : 0.997599451303155
    },
    "euclideanDistance" : 28.065711915856046,
    "generation" : 44,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8983146067415737,
      "LackOfCohesion" : 1.2985574880420228,
      "MetricsIntensity" : 0.06254487062398575,
      "Density" : 3.3727536231884057
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "456df306-7057-4d8a-849a-e7e97d8e8be2",
    "objectives" : {
      "NumberOfConcerns" : 1.0005915409642119,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2996406745444529,
      "MetricsIntensity" : 0.062371815412763154,
      "Density" : 0.9979423868312757
    },
    "euclideanDistance" : 28.065816014603456,
    "generation" : 48,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8994946659180236,
      "LackOfCohesion" : 1.2996406745444529,
      "MetricsIntensity" : 0.06237181541276316,
      "Density" : 3.371958285052143
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "fec7faa8-979f-45c5-8f4e-1b0877f2ae34",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.297050302645731,
      "MetricsIntensity" : 0.06250928548268402,
      "Density" : 0.9993141289437586
    },
    "euclideanDistance" : 29.063462898055896,
    "generation" : 41,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.899438202247191,
      "LackOfCohesion" : 1.297050302645731,
      "MetricsIntensity" : 0.06250928548268402,
      "Density" : 3.3785507246376807
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "bece4207-09bc-4338-9e72-c95ed6fcfa75",
    "objectives" : {
      "NumberOfConcerns" : 1.0005915409642119,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.2975566249151644,
      "MetricsIntensity" : 0.06248092440158558,
      "Density" : 0.9981138545953361
    },
    "euclideanDistance" : 29.06346455189676,
    "generation" : 40,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90056179775281,
      "LackOfCohesion" : 1.2975566249151644,
      "MetricsIntensity" : 0.06248092440158557,
      "Density" : 3.374492753623189
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval.TimeIntervalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "05f1bb8f-badc-4337-a4c4-d6942c5a3cdc",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.3011020417677004,
      "MetricsIntensity" : 0.06253899485450178,
      "Density" : 0.9969135802469136
    },
    "euclideanDistance" : 29.06349046200799,
    "generation" : 44,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965711073636875,
      "LackOfCohesion" : 1.3011020417677004,
      "MetricsIntensity" : 0.06253899485450178,
      "Density" : 3.3743470690655832
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "cbf0d1fb-7bd0-4d09-b1cb-fa3ca5748457",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.2995441228815166,
      "MetricsIntensity" : 0.062330050221569025,
      "Density" : 0.9972565157750343
    },
    "euclideanDistance" : 29.063503238954734,
    "generation" : 48,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898371701291409,
      "LackOfCohesion" : 1.2995441228815166,
      "MetricsIntensity" : 0.062330050221569025,
      "Density" : 3.369640787949015
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "e7d33eee-111c-4eaf-80f2-7f2bfadc8fc1",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2993190026177528,
      "MetricsIntensity" : 0.06264298053895047,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 30.061245299686203,
    "generation" : 50,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8953880764904387,
      "LackOfCohesion" : 1.2993190026177528,
      "MetricsIntensity" : 0.06264298053895048,
      "Density" : 3.374564459930314
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "eb211460-5e20-4172-b01d-a9139a31614e",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2992041195113138,
      "MetricsIntensity" : 0.06266826730966128,
      "Density" : 0.9967421124828533
    },
    "euclideanDistance" : 30.061251755859647,
    "generation" : 48,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8953880764904387,
      "LackOfCohesion" : 1.2992041195113138,
      "MetricsIntensity" : 0.06266826730966128,
      "Density" : 3.3757259001161435
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "741bd546-c1cf-4959-ac37-2f7018601d4a",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2980347278499242,
      "MetricsIntensity" : 0.06256683600616185,
      "Density" : 0.9974279835390947
    },
    "euclideanDistance" : 30.06130232558876,
    "generation" : 49,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898819561551433,
      "LackOfCohesion" : 1.2980347278499242,
      "MetricsIntensity" : 0.06256683600616185,
      "Density" : 3.3741299303944317
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.core.FlattenRangePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "7656820b-f169-48f8-91e8-f8755c904300",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3005231219970466,
      "MetricsIntensity" : 0.06231023746519488,
      "Density" : 0.997085048010974
    },
    "euclideanDistance" : 30.06146684899206,
    "generation" : 18,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.900617630544638,
      "LackOfCohesion" : 1.3005231219970466,
      "MetricsIntensity" : 0.06231023746519488,
      "Density" : 3.369061413673233
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "ddd0fad3-cd0b-461a-80e0-b04a56cf828d",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2993691986576932,
      "MetricsIntensity" : 0.0623317391423257,
      "Density" : 0.9989711934156379
    },
    "euclideanDistance" : 30.061479613767165,
    "generation" : 46,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.900617630544638,
      "LackOfCohesion" : 1.2993691986576932,
      "MetricsIntensity" : 0.0623317391423257,
      "Density" : 3.3754345307068365
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "37233829-2041-4576-999a-13d314492879",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.2979971741505258,
      "MetricsIntensity" : 0.06252003687924637,
      "Density" : 0.9958847736625515
    },
    "euclideanDistance" : 31.059248957517116,
    "generation" : 49,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897133220910624,
      "LackOfCohesion" : 1.2979971741505258,
      "MetricsIntensity" : 0.06252003687924637,
      "Density" : 3.3689095127610202
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "41a59cdf-943b-424b-84d1-0fd2b1dab173",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.297997174150526,
      "MetricsIntensity" : 0.06252003687924636,
      "Density" : 0.9958847736625515
    },
    "euclideanDistance" : 31.059248957517116,
    "generation" : 50,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8971332209106233,
      "LackOfCohesion" : 1.297997174150526,
      "MetricsIntensity" : 0.06252003687924636,
      "Density" : 3.3689095127610202
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "0c553088-fe18-41f2-85c4-2ea8e7716d08",
    "objectives" : {
      "NumberOfConcerns" : 0.9976338361431529,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.2989357774399433,
      "MetricsIntensity" : 0.06243923038677225,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 31.059263530707966,
    "generation" : 50,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8960089938167517,
      "LackOfCohesion" : 1.2989357774399433,
      "MetricsIntensity" : 0.06243923038677226,
      "Density" : 3.3702843876958783
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "af62bc17-6961-43ac-b536-8733cea72e27",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.2991655571481722,
      "MetricsIntensity" : 0.06264661316098662,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 31.059276559527788,
    "generation" : 45,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8959505061867266,
      "LackOfCohesion" : 1.2991655571481722,
      "MetricsIntensity" : 0.06264661316098663,
      "Density" : 3.374564459930314
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "57984f59-b2f2-4c5e-ae32-3498bebe8aea",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.2971700674191102,
      "MetricsIntensity" : 0.06237754735002917,
      "Density" : 0.9965706447187929
    },
    "euclideanDistance" : 31.059283680385366,
    "generation" : 48,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898876404494382,
      "LackOfCohesion" : 1.2971700674191102,
      "MetricsIntensity" : 0.06237754735002917,
      "Density" : 3.369275362318841
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "23a36b68-20ec-4850-a210-ea5a2b0a4725",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.2970553227260522,
      "MetricsIntensity" : 0.06240280365475115,
      "Density" : 0.9969135802469136
    },
    "euclideanDistance" : 31.059289944445165,
    "generation" : 48,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8988764044943824,
      "LackOfCohesion" : 1.2970553227260522,
      "MetricsIntensity" : 0.062402803654751156,
      "Density" : 3.3704347826086942
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "ba54bdea-2c2f-40a2-a22e-24b435f0719a",
    "objectives" : {
      "NumberOfConcerns" : 0.9994084590357882,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.2972704690255357,
      "MetricsIntensity" : 0.06241293735726307,
      "Density" : 0.997085048010974
    },
    "euclideanDistance" : 31.059294935743708,
    "generation" : 47,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898314606741573,
      "LackOfCohesion" : 1.2972704690255357,
      "MetricsIntensity" : 0.06241293735726307,
      "Density" : 3.371014492753623
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "5b219945-4b13-48d4-8b1c-984ec10e0ae2",
    "objectives" : {
      "NumberOfConcerns" : 0.9988169180715765,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.3007343244472225,
      "MetricsIntensity" : 0.06236568960854984,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 32.057545848328715,
    "generation" : 49,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897191011235955,
      "LackOfCohesion" : 1.3007343244472225,
      "MetricsIntensity" : 0.062365689608549844,
      "Density" : 3.3686956521739138
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "fe66b285-76f4-4d0e-a4d2-fe33bcc93efb",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2976618138073674,
      "MetricsIntensity" : 0.06263174197419014,
      "Density" : 0.9967421124828533
    },
    "euclideanDistance" : 33.05565045456117,
    "generation" : 41,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965129358830144,
      "LackOfCohesion" : 1.2976618138073674,
      "MetricsIntensity" : 0.06263174197419015,
      "Density" : 3.3757259001161435
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "75870fe4-6183-4811-9d8f-4ec55f369a9a",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2978772196319408,
      "MetricsIntensity" : 0.06264188790070989,
      "Density" : 0.9969135802469136
    },
    "euclideanDistance" : 33.0556551789284,
    "generation" : 48,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8959505061867266,
      "LackOfCohesion" : 1.2978772196319408,
      "MetricsIntensity" : 0.0626418879007099,
      "Density" : 3.3763066202090597
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "f5054e7b-d6a7-4467-a584-301f859b05bd",
    "objectives" : {
      "NumberOfConcerns" : 0.9994084590357882,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2998098685708261,
      "MetricsIntensity" : 0.06236700979877612,
      "Density" : 0.9962277091906722
    },
    "euclideanDistance" : 33.055781374139336,
    "generation" : 49,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8983146067415728,
      "LackOfCohesion" : 1.2998098685708261,
      "MetricsIntensity" : 0.062367009798776116,
      "Density" : 3.370069605568445
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "37b46476-7875-4d96-b5a1-15a9177c0a6b",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2983226650074722,
      "MetricsIntensity" : 0.06258075042163666,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 34.05398032168702,
    "generation" : 51,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.894825646794151,
      "LackOfCohesion" : 1.2983226650074722,
      "MetricsIntensity" : 0.06258075042163665,
      "Density" : 3.3716608594657376
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "3ff21ab2-6c01-4d13-a5d8-461c4f248a41",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2966710740902485,
      "MetricsIntensity" : 0.06249367337108396,
      "Density" : 0.9960562414266118
    },
    "euclideanDistance" : 34.05399292082886,
    "generation" : 37,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897695334457561,
      "LackOfCohesion" : 1.2966710740902485,
      "MetricsIntensity" : 0.06249367337108396,
      "Density" : 3.369489559164733
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "04623cd3-b842-4bde-ab4b-6692167a736b",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.296556260232216,
      "MetricsIntensity" : 0.0625189448996183,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 34.05399862800899,
    "generation" : 30,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976953344575602,
      "LackOfCohesion" : 1.296556260232216,
      "MetricsIntensity" : 0.0625189448996183,
      "Density" : 3.3706496519721574
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "ec2643d0-1970-46cb-9197-f4edc39b4582",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2995996503475848,
      "MetricsIntensity" : 0.06269166500963405,
      "Density" : 0.9960562414266118
    },
    "euclideanDistance" : 34.05403562404529,
    "generation" : 21,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8953292065278562,
      "LackOfCohesion" : 1.2995996503475848,
      "MetricsIntensity" : 0.06269166500963404,
      "Density" : 3.375363160952934
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "6972c022-2e34-49b1-ac0b-b26bfd87849a",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2994090232424034,
      "MetricsIntensity" : 0.062339341982018855,
      "Density" : 0.9965706447187929
    },
    "euclideanDistance" : 35.052585200204376,
    "generation" : 49,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8977528089887639,
      "LackOfCohesion" : 1.2994090232424034,
      "MetricsIntensity" : 0.06233934198201886,
      "Density" : 3.3692753623188403
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "5fd37324-547a-48e3-8e6a-2cd7dda54edc",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2976686929240673,
      "MetricsIntensity" : 0.06255784429685977,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 36.051003100770075,
    "generation" : 47,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976377952755905,
      "LackOfCohesion" : 1.2976686929240673,
      "MetricsIntensity" : 0.06255784429685977,
      "Density" : 3.371660859465737
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "f6159651-aee6-493a-955d-4dd9f4b20396",
    "objectives" : {
      "NumberOfConcerns" : 1.0002957704821058,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.300388612116437,
      "MetricsIntensity" : 0.062319517290249336,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 36.05118995557619,
    "generation" : 38,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9000000000000008,
      "LackOfCohesion" : 1.300388612116437,
      "MetricsIntensity" : 0.06231951729024933,
      "Density" : 3.3686956521739133
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "a20205b9-22cc-4151-bcf9-b9a7c34ab9a5",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2969957651280999,
      "MetricsIntensity" : 0.06255437101268527,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 37.049575701836744,
    "generation" : 47,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8953880764904387,
      "LackOfCohesion" : 1.2969957651280999,
      "MetricsIntensity" : 0.06255437101268527,
      "Density" : 3.372241579558652
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "4441dde5-0984-46d1-9603-51db31b027e1",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2982719496837347,
      "MetricsIntensity" : 0.0626652696807014,
      "Density" : 0.9962277091906722
    },
    "euclideanDistance" : 37.04962645891985,
    "generation" : 46,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.895891952729319,
      "LackOfCohesion" : 1.2982719496837347,
      "MetricsIntensity" : 0.0626652696807014,
      "Density" : 3.3759442184776303
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "3ea73a28-bdd6-488f-a1c1-0da326b9f560",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.3001031066489062,
      "MetricsIntensity" : 0.06267499872477901,
      "Density" : 0.9958847736625515
    },
    "euclideanDistance" : 37.04967351377623,
    "generation" : 23,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8953292065278566,
      "LackOfCohesion" : 1.3001031066489062,
      "MetricsIntensity" : 0.06267499872477901,
      "Density" : 3.37478210342824
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "11af153e-2b2a-4bfd-9a9b-b3b98e6b946e",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.3001031066489062,
      "MetricsIntensity" : 0.06267499872477901,
      "Density" : 0.9958847736625515
    },
    "euclideanDistance" : 37.04967351377623,
    "generation" : 48,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.895329206527856,
      "LackOfCohesion" : 1.3001031066489062,
      "MetricsIntensity" : 0.06267499872477901,
      "Density" : 3.374782103428239
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "7962e395-aec4-4615-8461-f46768d75603",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2977567386658342,
      "MetricsIntensity" : 0.06240270263605761,
      "Density" : 0.9962277091906722
    },
    "euclideanDistance" : 37.04967965398672,
    "generation" : 48,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898819561551433,
      "LackOfCohesion" : 1.2977567386658342,
      "MetricsIntensity" : 0.06240270263605761,
      "Density" : 3.370069605568445
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "ff837b73-eaf1-4ab0-9424-67ea659c94a2",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2985021280636313,
      "MetricsIntensity" : 0.06259394000690781,
      "Density" : 0.994684499314129
    },
    "euclideanDistance" : 38.048281798035276,
    "generation" : 48,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.895329206527856,
      "LackOfCohesion" : 1.2985021280636313,
      "MetricsIntensity" : 0.06259394000690781,
      "Density" : 3.370714700755375
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "115998af-8783-4b69-b249-a5580b7d6b0a",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2987176638856848,
      "MetricsIntensity" : 0.0626040920564973,
      "Density" : 0.9948559670781894
    },
    "euclideanDistance" : 38.048285911597624,
    "generation" : 38,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8947664603263925,
      "LackOfCohesion" : 1.2987176638856848,
      "MetricsIntensity" : 0.0626040920564973,
      "Density" : 3.3712957582800698
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "028fb4de-e87f-40c6-9649-378b42d91d33",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.298491425294932,
      "MetricsIntensity" : 0.06259114764250913,
      "Density" : 0.9948559670781894
    },
    "euclideanDistance" : 39.04704932232619,
    "generation" : 49,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.895329206527856,
      "LackOfCohesion" : 1.298491425294932,
      "MetricsIntensity" : 0.06259114764250913,
      "Density" : 3.3712957582800698
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval.TimeIntervalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "584cd0b0-edca-4169-9a94-63cef23ef382",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.29816093703445,
      "MetricsIntensity" : 0.06260629762420418,
      "Density" : 0.9950274348422496
    },
    "euclideanDistance" : 39.047050273594394,
    "generation" : 40,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958919527293194,
      "LackOfCohesion" : 1.29816093703445,
      "MetricsIntensity" : 0.06260629762420418,
      "Density" : 3.371876815804764
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval.TimeIntervalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "d076b537-ff2e-4dc3-af41-5a3049f13d44",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.3013030517058182,
      "MetricsIntensity" : 0.062387654708945174,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 39.04722488630358,
    "generation" : 49,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976953344575604,
      "LackOfCohesion" : 1.3013030517058182,
      "MetricsIntensity" : 0.062387654708945174,
      "Density" : 3.368329466357308
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "4b5e2f4d-481e-47f4-bdf5-6a20f25795eb",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.297840373542069,
      "MetricsIntensity" : 0.06254359298401667,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 40.04589976645439,
    "generation" : 40,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965129358830146,
      "LackOfCohesion" : 1.297840373542069,
      "MetricsIntensity" : 0.06254359298401667,
      "Density" : 3.371660859465738
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval.TimeIntervalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "3f94f9e7-ed6b-4fb7-b235-ffeec033af91",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3003038820468709,
      "MetricsIntensity" : 0.06269144218302762,
      "Density" : 0.9953703703703703
    },
    "euclideanDistance" : 40.04593149304155,
    "generation" : 24,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.895270270270269,
      "LackOfCohesion" : 1.3003038820468709,
      "MetricsIntensity" : 0.06269144218302763,
      "Density" : 3.375
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "bb8d7274-2d06-4cd5-bd7b-e8bfa4fa2c7d",
    "objectives" : {
      "NumberOfConcerns" : 0.9988169180715765,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3003780467519308,
      "MetricsIntensity" : 0.06238897511550741,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 40.04601870643313,
    "generation" : 48,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898257448004497,
      "LackOfCohesion" : 1.3003780467519308,
      "MetricsIntensity" : 0.062388975115507415,
      "Density" : 3.3697040046430646
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "59cda32f-aa31-4043-b4d5-618cb383334e",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.298979855113343,
      "MetricsIntensity" : 0.062568611402231,
      "Density" : 0.9948559670781894
    },
    "euclideanDistance" : 41.04479376521132,
    "generation" : 49,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970174451322452,
      "LackOfCohesion" : 1.298979855113343,
      "MetricsIntensity" : 0.062568611402231,
      "Density" : 3.3693379790940767
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "9e2b0c62-7793-4aed-99cf-b51491732e5c",
    "objectives" : {
      "NumberOfConcerns" : 0.9988169180715765,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2998965819449178,
      "MetricsIntensity" : 0.062329062320087565,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 41.044886359437406,
    "generation" : 47,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8982574480044971,
      "LackOfCohesion" : 1.2998965819449178,
      "MetricsIntensity" : 0.062329062320087565,
      "Density" : 3.368329466357308
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "28c313c8-e485-4f48-8289-fcfe3a7d0461",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2968332363705994,
      "MetricsIntensity" : 0.06257990229527151,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 42.043663222623344,
    "generation" : 39,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8964546989307824,
      "LackOfCohesion" : 1.2968332363705994,
      "MetricsIntensity" : 0.06257990229527151,
      "Density" : 3.37245787332946
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval.TimeIntervalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "5ca63d4d-81e0-4e70-b97f-7eabb80e63bd",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2988999086213737,
      "MetricsIntensity" : 0.06252502725442274,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 42.04372693805693,
    "generation" : 48,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8953880764904387,
      "LackOfCohesion" : 1.2988999086213737,
      "MetricsIntensity" : 0.06252502725442274,
      "Density" : 3.3704994192799074
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "fe5bfffa-992f-41c0-b9b7-6d2699973fd2",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.3004275373848029,
      "MetricsIntensity" : 0.06256776330753433,
      "Density" : 0.9945130315500685
    },
    "euclideanDistance" : 42.04373696815654,
    "generation" : 33,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8947664603263923,
      "LackOfCohesion" : 1.3004275373848029,
      "MetricsIntensity" : 0.06256776330753434,
      "Density" : 3.3701336432306794
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "b6007027-027a-431d-a51c-1b4203697cf7",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.2974824559122622,
      "MetricsIntensity" : 0.06254420929341882,
      "Density" : 0.9948559670781894
    },
    "euclideanDistance" : 43.04265355437932,
    "generation" : 47,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958919527293194,
      "LackOfCohesion" : 1.2974824559122622,
      "MetricsIntensity" : 0.0625442092934188,
      "Density" : 3.3712957582800698
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "1be38eec-637b-4ee7-8659-6d031f7c031d",
    "objectives" : {
      "NumberOfConcerns" : 0.9952676722863059,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.3008076500096317,
      "MetricsIntensity" : 0.06267505883499803,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 43.042734663361834,
    "generation" : 22,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8947072072072069,
      "LackOfCohesion" : 1.3008076500096317,
      "MetricsIntensity" : 0.06267505883499803,
      "Density" : 3.3744186046511633
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.core.BinaryFlatMapPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "f30bfa9f-dfff-4d52-b3e0-ca97ed0ca8df",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.2996992456264242,
      "MetricsIntensity" : 0.06236758951450462,
      "Density" : 0.9958847736625515
    },
    "euclideanDistance" : 43.04280567635137,
    "generation" : 48,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8988195615514327,
      "LackOfCohesion" : 1.2996992456264242,
      "MetricsIntensity" : 0.06236758951450462,
      "Density" : 3.3689095127610207
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "1f3992a5-6839-4505-808b-5b65e9439511",
    "objectives" : {
      "NumberOfConcerns" : 0.9952676722863059,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2994213543357194,
      "MetricsIntensity" : 0.06260411029230808,
      "Density" : 0.9941700960219478
    },
    "euclideanDistance" : 44.04170009264006,
    "generation" : 44,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8947072072072066,
      "LackOfCohesion" : 1.2994213543357194,
      "MetricsIntensity" : 0.06260411029230808,
      "Density" : 3.37093023255814
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "57cf2a30-6806-41e6-9b67-e768368b165f",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.3009309932117858,
      "MetricsIntensity" : 0.06255139404443522,
      "Density" : 0.9943415637860082
    },
    "euclideanDistance" : 45.04082809895978,
    "generation" : 47,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8942037141249297,
      "LackOfCohesion" : 1.3009309932117858,
      "MetricsIntensity" : 0.06255139404443522,
      "Density" : 3.3695525857059847
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "459ffa1f-88c8-4b06-aee1-ff9b49cccb4b",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.3022228666434175,
      "MetricsIntensity" : 0.062397689259387545,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 45.040923413480314,
    "generation" : 8,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965129358830146,
      "LackOfCohesion" : 1.3022228666434175,
      "MetricsIntensity" : 0.06239768925938755,
      "Density" : 3.368543238537435
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "4ca82420-e5a8-4a09-af0c-e057df0b4229",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.3020469877183924,
      "MetricsIntensity" : 0.06238175395115526,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 46.04004237831434,
    "generation" : 45,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976377952755905,
      "LackOfCohesion" : 1.3020469877183924,
      "MetricsIntensity" : 0.062381753951155264,
      "Density" : 3.368543238537435
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "9cc9dada-8568-4059-850f-a32e90637eac",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.3019321046119534,
      "MetricsIntensity" : 0.062407040721866106,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 46.04004657789788,
    "generation" : 49,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976377952755907,
      "LackOfCohesion" : 1.3019321046119534,
      "MetricsIntensity" : 0.062407040721866106,
      "Density" : 3.3697040046430655
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "263d8df3-c9ce-4ec2-b868-423ae3eb7d9a",
    "objectives" : {
      "NumberOfConcerns" : 0.9949719018041999,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.299925114181922,
      "MetricsIntensity" : 0.06258773172487671,
      "Density" : 0.9939986282578875
    },
    "euclideanDistance" : 47.03904468508052,
    "generation" : 42,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.894144144144145,
      "LackOfCohesion" : 1.299925114181922,
      "MetricsIntensity" : 0.06258773172487671,
      "Density" : 3.3703488372093022
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "23533b4c-b810-4ceb-b57d-6ebff0ce0015",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.2990994112602874,
      "MetricsIntensity" : 0.06260748538617995,
      "Density" : 0.9943415637860082
    },
    "euclideanDistance" : 47.03904792505533,
    "generation" : 50,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958333333333335,
      "LackOfCohesion" : 1.2990994112602874,
      "MetricsIntensity" : 0.06260748538617995,
      "Density" : 3.371511627906977
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval.TimeIntervalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "385c85ff-dd3d-4d92-a0f0-960b6f75df64",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 1.298804408954191,
      "MetricsIntensity" : 0.062454301053626746,
      "Density" : 0.9950274348422496
    },
    "euclideanDistance" : 48.038265646949654,
    "generation" : 46,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970174451322452,
      "LackOfCohesion" : 1.298804408954191,
      "MetricsIntensity" : 0.06245430105362675,
      "Density" : 3.3718768158047645
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "14e11b59-9e6e-4c7a-b477-b3685737b392",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 1.3006805609394714,
      "MetricsIntensity" : 0.0623611639239164,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 48.03833826426451,
    "generation" : 35,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976377952755903,
      "LackOfCohesion" : 1.3006805609394714,
      "MetricsIntensity" : 0.0623611639239164,
      "Density" : 3.368543238537433
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "9c1ae783-95f6-422c-8448-7e07d052a285",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.297946992009908,
      "MetricsIntensity" : 0.06259703674482232,
      "Density" : 0.9945130315500685
    },
    "euclideanDistance" : 49.037428322921016,
    "generation" : 47,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958333333333335,
      "LackOfCohesion" : 1.297946992009908,
      "MetricsIntensity" : 0.06259703674482231,
      "Density" : 3.3720930232558137
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval.TimeIntervalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscriptions.DeferredScalarSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle.MergeWithObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "eac28504-301e-4058-82ff-f4a978fe9a52",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.3007200878390195,
      "MetricsIntensity" : 0.06235537454220389,
      "Density" : 0.9953703703703703
    },
    "euclideanDistance" : 49.03756699732721,
    "generation" : 46,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8982002249718783,
      "LackOfCohesion" : 1.3007200878390195,
      "MetricsIntensity" : 0.06235537454220389,
      "Density" : 3.3691236215902505
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "8af65e2a-54ab-40d9-9380-1fa185c7ab14",
    "objectives" : {
      "NumberOfConcerns" : 0.9952676722863059,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 1.298596611766463,
      "MetricsIntensity" : 0.06256132045673575,
      "Density" : 0.9941700960219478
    },
    "euclideanDistance" : 50.03667853683167,
    "generation" : 46,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8947072072072069,
      "LackOfCohesion" : 1.298596611766463,
      "MetricsIntensity" : 0.06256132045673576,
      "Density" : 3.3709302325581403
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "19fad9b6-dcc6-4425-9447-d91010b4c0cd",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 1.2984205204272772,
      "MetricsIntensity" : 0.06254536648647398,
      "Density" : 0.9941700960219478
    },
    "euclideanDistance" : 51.035966901031436,
    "generation" : 49,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958333333333335,
      "LackOfCohesion" : 1.2984205204272772,
      "MetricsIntensity" : 0.06254536648647396,
      "Density" : 3.3709302325581407
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "cb660837-2ed5-4c14-a00d-9bbe75e19279",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 1.3003986197313135,
      "MetricsIntensity" : 0.06248757227133555,
      "Density" : 0.9948559670781894
    },
    "euclideanDistance" : 51.036042105238664,
    "generation" : 48,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958919527293194,
      "LackOfCohesion" : 1.3003986197313135,
      "MetricsIntensity" : 0.06248757227133554,
      "Density" : 3.369337979094077
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "b2078774-d86c-4dd7-9fce-513d48483506",
    "objectives" : {
      "NumberOfConcerns" : 0.9976338361431529,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 1.2997146885759976,
      "MetricsIntensity" : 0.06239157257817513,
      "Density" : 0.9950274348422496
    },
    "euclideanDistance" : 51.03605102128431,
    "generation" : 48,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8981429375351713,
      "LackOfCohesion" : 1.2997146885759976,
      "MetricsIntensity" : 0.06239157257817514,
      "Density" : 3.369918699186992
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "96240f3c-4e6e-4978-a395-0bd76945a90f",
    "objectives" : {
      "NumberOfConcerns" : 0.9949719018041999,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 1.3000302695548551,
      "MetricsIntensity" : 0.06262046937391316,
      "Density" : 0.9936556927297668
    },
    "euclideanDistance" : 52.03528918672421,
    "generation" : 43,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8952112676056336,
      "LackOfCohesion" : 1.3000302695548551,
      "MetricsIntensity" : 0.06262046937391318,
      "Density" : 3.371146015125073
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "4a4a042b-841d-48f1-a0e2-8de797c2c6a9",
    "objectives" : {
      "NumberOfConcerns" : 0.9952676722863059,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 1.301540452346173,
      "MetricsIntensity" : 0.06256771353931918,
      "Density" : 0.9938271604938271
    },
    "euclideanDistance" : 53.03466953260202,
    "generation" : 48,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.894707207207207,
      "LackOfCohesion" : 1.301540452346173,
      "MetricsIntensity" : 0.06256771353931918,
      "Density" : 3.3697674418604655
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "d5a9a7e7-f847-4b60-96a8-4d929968f71f",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 1.302832737615039,
      "MetricsIntensity" : 0.062413906144567245,
      "Density" : 0.994684499314129
    },
    "euclideanDistance" : 53.03475048710452,
    "generation" : 32,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970174451322452,
      "LackOfCohesion" : 1.302832737615039,
      "MetricsIntensity" : 0.06241390614456725,
      "Density" : 3.368757259001161
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "148b9cea-32ab-4374-82f5-3faeb4346b1a",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 1.2992163278806932,
      "MetricsIntensity" : 0.0625079174417972,
      "Density" : 0.9945130315500685
    },
    "euclideanDistance" : 54.03400633473214,
    "generation" : 48,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8969594594594592,
      "LackOfCohesion" : 1.2992163278806932,
      "MetricsIntensity" : 0.0625079174417972,
      "Density" : 3.37013364323068
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "e758fc6c-83af-4262-8923-898d8bde82ae",
    "objectives" : {
      "NumberOfConcerns" : 0.9946761313220941,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 1.3005343337876714,
      "MetricsIntensity" : 0.0626040836206494,
      "Density" : 0.9934842249657064
    },
    "euclideanDistance" : 55.03336897134433,
    "generation" : 10,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8946478873239436,
      "LackOfCohesion" : 1.3005343337876714,
      "MetricsIntensity" : 0.0626040836206494,
      "Density" : 3.3705642815590457
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "a6b47f4a-8e9d-471f-ba1a-09864c6cc435",
    "objectives" : {
      "NumberOfConcerns" : 0.9946761313220941,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 1.3005343337876711,
      "MetricsIntensity" : 0.06260408362064944,
      "Density" : 0.9934842249657064
    },
    "euclideanDistance" : 55.03336897134433,
    "generation" : 28,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.894647887323943,
      "LackOfCohesion" : 1.3005343337876711,
      "MetricsIntensity" : 0.06260408362064945,
      "Density" : 3.370564281559045
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "a428cf60-1a42-428d-9998-ff66b232510a",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 1.3018280069815538,
      "MetricsIntensity" : 0.06245016138442648,
      "Density" : 0.9943415637860082
    },
    "euclideanDistance" : 55.033446970305846,
    "generation" : 27,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8969594594594592,
      "LackOfCohesion" : 1.3018280069815538,
      "MetricsIntensity" : 0.06245016138442648,
      "Density" : 3.3695525857059847
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDelay.DelayObserver.OnNext'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "8fc48039-0edf-47cd-8554-1ff1c7e5fcca",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 1.3015050369511887,
      "MetricsIntensity" : 0.06238751081563461,
      "Density" : 0.9948559670781894
    },
    "euclideanDistance" : 56.03286740097425,
    "generation" : 43,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8975801913337083,
      "LackOfCohesion" : 1.3015050369511887,
      "MetricsIntensity" : 0.0623875108156346,
      "Density" : 3.3693379790940767
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "6dff8287-dda6-4060-ba5f-a1afe6787883",
    "objectives" : {
      "NumberOfConcerns" : 0.9949719018041999,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 1.2992050286517196,
      "MetricsIntensity" : 0.0625776563940383,
      "Density" : 0.9936556927297668
    },
    "euclideanDistance" : 58.03162215887669,
    "generation" : 44,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8952112676056336,
      "LackOfCohesion" : 1.2992050286517196,
      "MetricsIntensity" : 0.0625776563940383,
      "Density" : 3.371146015125073
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.PerfObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.flowables.ConnectableFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.FlatMapWithCombinerInner'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "e4ba1ec2-3c67-4280-a505-a7230818cf52",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 1.3004995045660948,
      "MetricsIntensity" : 0.06242375011628554,
      "Density" : 0.9945130315500685
    },
    "euclideanDistance" : 58.03169612798142,
    "generation" : 28,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897522522522523,
      "LackOfCohesion" : 1.3004995045660948,
      "MetricsIntensity" : 0.06242375011628554,
      "Density" : 3.3701336432306794
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "9f1df6e2-90d0-4479-ad43-df5e4f6d480f",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 1.3010077573841303,
      "MetricsIntensity" : 0.06250385322650147,
      "Density" : 0.9943415637860082
    },
    "euclideanDistance" : 59.031157601842175,
    "generation" : 46,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963963963963961,
      "LackOfCohesion" : 1.3010077573841303,
      "MetricsIntensity" : 0.06250385322650147,
      "Density" : 3.3695525857059856
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "932c6718-bdaa-48dc-84cd-b65d5ea5cf1d",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 1.3010077573841303,
      "MetricsIntensity" : 0.06250385322650147,
      "Density" : 0.9943415637860082
    },
    "euclideanDistance" : 59.031157601842175,
    "generation" : 45,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896396396396396,
      "LackOfCohesion" : 1.3010077573841303,
      "MetricsIntensity" : 0.06250385322650148,
      "Density" : 3.3695525857059847
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "86c7be50-a342-4160-bb3e-72d7a9d4fcca",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 1.3000013169555606,
      "MetricsIntensity" : 0.06254018472154,
      "Density" : 0.9939986282578875
    },
    "euclideanDistance" : 61.03009990603282,
    "generation" : 45,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896338028169014,
      "LackOfCohesion" : 1.3000013169555606,
      "MetricsIntensity" : 0.06254018472154,
      "Density" : 3.3703488372093022
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "62047a44-3989-48a6-b0f7-0072d84cfd2a",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 1.3000013169555606,
      "MetricsIntensity" : 0.06254018472154,
      "Density" : 0.9939986282578875
    },
    "euclideanDistance" : 61.03009990603282,
    "generation" : 44,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896338028169014,
      "LackOfCohesion" : 1.3000013169555606,
      "MetricsIntensity" : 0.06254018472154,
      "Density" : 3.3703488372093022
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector.SourceObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe.SwitchMapMaybeSubscriber.SwitchMapMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableMapOptional.MapOptionalConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  } ]
}