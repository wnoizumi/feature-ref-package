{
  "executionId" : "5c249b4c-ef61-402d-8f3d-29b988059364",
  "computingTime" : 873712,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1210005817335658,
    "meanNumConcerns" : 2.032676056338029,
    "meanMetricsIntensity" : 0.0626901885889211,
    "meanLackOfCohesion" : 1.3045137304594558
  },
  "population" : [ {
    "solutionId" : "3d8ec7cf-b392-4a34-9c71-d2ba952205d3",
    "objectives" : {
      "NumberOfConcerns" : 1.0036031042128604,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3008197398003256,
      "MetricsIntensity" : 0.0627509402473493,
      "Density" : 1.0014911463187326
    },
    "euclideanDistance" : 10.183627712308448,
    "generation" : 10,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0285714285714285,
      "LackOfCohesion" : 1.3008197398003256,
      "MetricsIntensity" : 0.06275094024734931,
      "Density" : 3.1075766338924233
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "35b4a737-96b6-4068-8a4b-914c738361a2",
    "objectives" : {
      "NumberOfConcerns" : 1.0036031042128604,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3008197398003258,
      "MetricsIntensity" : 0.06275094024734928,
      "Density" : 1.0014911463187326
    },
    "euclideanDistance" : 10.183627712308448,
    "generation" : 28,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0285714285714285,
      "LackOfCohesion" : 1.3008197398003258,
      "MetricsIntensity" : 0.06275094024734928,
      "Density" : 3.1075766338924233
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "72473d6a-e439-4868-b8f8-e0ae5bf50e27",
    "objectives" : {
      "NumberOfConcerns" : 1.0033259423503327,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3016863206669065,
      "MetricsIntensity" : 0.06277770129895507,
      "Density" : 1.0009319664492078
    },
    "euclideanDistance" : 10.183656321049174,
    "generation" : 11,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0280112044817926,
      "LackOfCohesion" : 1.3016863206669065,
      "MetricsIntensity" : 0.06277770129895507,
      "Density" : 3.1076388888888893
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "d2db6702-4d13-4cbb-a86c-9f22b93c46f1",
    "objectives" : {
      "NumberOfConcerns" : 1.0033259423503327,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3016863206669065,
      "MetricsIntensity" : 0.06277770129895507,
      "Density" : 1.0009319664492078
    },
    "euclideanDistance" : 10.183656321049174,
    "generation" : 13,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0280112044817926,
      "LackOfCohesion" : 1.3016863206669065,
      "MetricsIntensity" : 0.06277770129895506,
      "Density" : 3.107638888888889
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "855d7ba3-21cc-454b-a91d-fcb267f1b57d",
    "objectives" : {
      "NumberOfConcerns" : 1.002771618625277,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3007601362785708,
      "MetricsIntensity" : 0.06280055866149335,
      "Density" : 1.001304753028891
    },
    "euclideanDistance" : 11.167098234091892,
    "generation" : 28,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0280269058295963,
      "LackOfCohesion" : 1.3007601362785708,
      "MetricsIntensity" : 0.06280055866149335,
      "Density" : 3.108796296296296
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "9e89aa2b-622f-4383-a865-c5a7da28e82d",
    "objectives" : {
      "NumberOfConcerns" : 1.0024944567627494,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3014469494653844,
      "MetricsIntensity" : 0.06277626869965877,
      "Density" : 1.0007455731593662
    },
    "euclideanDistance" : 11.16710310959036,
    "generation" : 18,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.027466367713005,
      "LackOfCohesion" : 1.3014469494653844,
      "MetricsIntensity" : 0.06277626869965877,
      "Density" : 3.1070601851851856
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "3752b346-9b0a-4812-9a9e-57e15df7a5ff",
    "objectives" : {
      "NumberOfConcerns" : 1.0022172949002217,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3023140511137359,
      "MetricsIntensity" : 0.06280304583362727,
      "Density" : 1.0001863932898416
    },
    "euclideanDistance" : 11.167129373201222,
    "generation" : 17,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0269058295964126,
      "LackOfCohesion" : 1.3023140511137359,
      "MetricsIntensity" : 0.06280304583362728,
      "Density" : 3.1071221771858712
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "60ff24be-7d9a-495f-8bfd-b70d1f2fcab2",
    "objectives" : {
      "NumberOfConcerns" : 1.0013858093126387,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3022553103146461,
      "MetricsIntensity" : 0.06285272541674335,
      "Density" : 0.9977632805219012
    },
    "euclideanDistance" : 12.153111719283483,
    "generation" : 37,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0263600673022997,
      "LackOfCohesion" : 1.3022553103146461,
      "MetricsIntensity" : 0.06285272541674335,
      "Density" : 3.101390498261877
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "e3506a32-3b2a-4296-bbd6-3b131cfe3083",
    "objectives" : {
      "NumberOfConcerns" : 1.0030487804878048,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3015673472860436,
      "MetricsIntensity" : 0.06273212490672808,
      "Density" : 1.0011183597390494
    },
    "euclideanDistance" : 12.15345044443187,
    "generation" : 28,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.028587443946189,
      "LackOfCohesion" : 1.3015673472860436,
      "MetricsIntensity" : 0.06273212490672808,
      "Density" : 3.108217592592592
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "6549646e-883d-4946-8101-bd928c61531a",
    "objectives" : {
      "NumberOfConcerns" : 1.0022172949002217,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3006978362526622,
      "MetricsIntensity" : 0.06281541739734056,
      "Density" : 0.9988816402609506
    },
    "euclideanDistance" : 13.141459761964903,
    "generation" : 37,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.02804262478968,
      "LackOfCohesion" : 1.3006978362526622,
      "MetricsIntensity" : 0.06281541739734056,
      "Density" : 3.103068905616676
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "b496a220-a340-498c-96cf-cdeb304181ac",
    "objectives" : {
      "NumberOfConcerns" : 1.0016629711751663,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3013067251064099,
      "MetricsIntensity" : 0.0627988717153349,
      "Density" : 0.9996272134203169
    },
    "euclideanDistance" : 13.14153439156668,
    "generation" : 45,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.025784753363228,
      "LackOfCohesion" : 1.3013067251064099,
      "MetricsIntensity" : 0.0627988717153349,
      "Density" : 3.1053850607990743
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "104270d0-b357-4d3c-aae4-3d4ef921b7c6",
    "objectives" : {
      "NumberOfConcerns" : 1.0013858093126387,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3021738267547613,
      "MetricsIntensity" : 0.06282565175283585,
      "Density" : 0.9990680335507922
    },
    "euclideanDistance" : 13.141556765176608,
    "generation" : 13,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0252242152466366,
      "LackOfCohesion" : 1.3021738267547613,
      "MetricsIntensity" : 0.06282565175283585,
      "Density" : 3.1054461181923525
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "365e3cf6-0640-4985-926f-7e2a018e48cd",
    "objectives" : {
      "NumberOfConcerns" : 1.002771618625277,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.300036478426007,
      "MetricsIntensity" : 0.06282697094125775,
      "Density" : 1.0011183597390494
    },
    "euclideanDistance" : 13.141606863806379,
    "generation" : 38,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0280269058295963,
      "LackOfCohesion" : 1.300036478426007,
      "MetricsIntensity" : 0.06282697094125776,
      "Density" : 3.108217592592593
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "961322eb-5ac6-4858-81f9-418d64961373",
    "objectives" : {
      "NumberOfConcerns" : 1.001940133037694,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3021953836601527,
      "MetricsIntensity" : 0.06275745727552087,
      "Density" : 1.0003727865796832
    },
    "euclideanDistance" : 13.141700082485153,
    "generation" : 28,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0274817722938874,
      "LackOfCohesion" : 1.3021953836601527,
      "MetricsIntensity" : 0.06275745727552087,
      "Density" : 3.1077012159814705
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "5733411a-ecc6-4cff-aff5-6159f0bd0134",
    "objectives" : {
      "NumberOfConcerns" : 1.000831485587583,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3012473785791137,
      "MetricsIntensity" : 0.06284854936951367,
      "Density" : 0.9972041006523765
    },
    "euclideanDistance" : 14.131287073770677,
    "generation" : 39,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.025238362310712,
      "LackOfCohesion" : 1.3012473785791137,
      "MetricsIntensity" : 0.06284854936951369,
      "Density" : 3.099652375434531
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "c43d8e05-335f-49e8-9ef0-26680e005ea6",
    "objectives" : {
      "NumberOfConcerns" : 1.0005543237250554,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.302115001635552,
      "MetricsIntensity" : 0.06287534551046473,
      "Density" : 0.9966449207828518
    },
    "euclideanDistance" : 14.131308037099913,
    "generation" : 35,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0246775098149192,
      "LackOfCohesion" : 1.302115001635552,
      "MetricsIntensity" : 0.06287534551046473,
      "Density" : 3.099710144927536
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "077c94f9-e393-4a37-95f6-b6a10cb9eab6",
    "objectives" : {
      "NumberOfConcerns" : 1.0016629711751663,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3008808579480111,
      "MetricsIntensity" : 0.06283644696480083,
      "Density" : 0.9979496738117428
    },
    "euclideanDistance" : 14.131364820318211,
    "generation" : 37,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0269209197980924,
      "LackOfCohesion" : 1.3008808579480111,
      "MetricsIntensity" : 0.06283644696480084,
      "Density" : 3.10017371163868
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "83e247a4-aa10-4b37-a418-c630de48ee31",
    "objectives" : {
      "NumberOfConcerns" : 1.0002771618625277,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3028022278188698,
      "MetricsIntensity" : 0.0628510403614639,
      "Density" : 0.9983224603914259
    },
    "euclideanDistance" : 14.131470059181744,
    "generation" : 35,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0241166573191247,
      "LackOfCohesion" : 1.3028022278188698,
      "MetricsIntensity" : 0.0628510403614639,
      "Density" : 3.1049275362318847
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "301dab28-a818-4adf-92de-37c4c15ca4fc",
    "objectives" : {
      "NumberOfConcerns" : 1.0024944567627494,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3007401042272888,
      "MetricsIntensity" : 0.06274037720050059,
      "Density" : 1.0005591798695248
    },
    "euclideanDistance" : 14.131594919963481,
    "generation" : 36,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.027466367713005,
      "LackOfCohesion" : 1.3007401042272888,
      "MetricsIntensity" : 0.0627403772005006,
      "Density" : 3.106481481481482
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "7287a074-c62a-4281-b68d-7bc29b3aa6d3",
    "objectives" : {
      "NumberOfConcerns" : 1.0022172949002217,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3016315305093404,
      "MetricsIntensity" : 0.06276715433446908,
      "Density" : 1.0
    },
    "euclideanDistance" : 14.131617878469417,
    "generation" : 31,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0269058295964126,
      "LackOfCohesion" : 1.3016315305093404,
      "MetricsIntensity" : 0.06276715433446908,
      "Density" : 3.106543138390272
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "fe3a0fb1-9df1-42ed-8882-9f83c3d87669",
    "objectives" : {
      "NumberOfConcerns" : 1.0030487804878048,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3002850904910253,
      "MetricsIntensity" : 0.06277689081305259,
      "Density" : 1.0011183597390494
    },
    "euclideanDistance" : 14.131632144972428,
    "generation" : 27,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0285874439461895,
      "LackOfCohesion" : 1.3002850904910253,
      "MetricsIntensity" : 0.0627768908130526,
      "Density" : 3.1082175925925926
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "823587a1-e36b-4bfd-a09a-293188f8c95a",
    "objectives" : {
      "NumberOfConcerns" : 0.9994456762749445,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.3027437454048016,
      "MetricsIntensity" : 0.06290077929500502,
      "Density" : 0.9958993476234855
    },
    "euclideanDistance" : 15.122559470693075,
    "generation" : 39,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.023569023569023,
      "LackOfCohesion" : 1.3027437454048016,
      "MetricsIntensity" : 0.06290077929500502,
      "Density" : 3.099187935034802
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "737225d9-b7b8-4760-804a-f44261b759af",
    "objectives" : {
      "NumberOfConcerns" : 1.0022172949002217,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.3007840644722248,
      "MetricsIntensity" : 0.06280819000553932,
      "Density" : 1.0007455731593662
    },
    "euclideanDistance" : 15.122893746221715,
    "generation" : 28,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.02804262478968,
      "LackOfCohesion" : 1.3007840644722248,
      "MetricsIntensity" : 0.0628081900055393,
      "Density" : 3.108859293572669
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "8bcc517a-348a-48e8-8083-5991782c9e3f",
    "objectives" : {
      "NumberOfConcerns" : 1.0024944567627494,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3002225048092009,
      "MetricsIntensity" : 0.0627917353168803,
      "Density" : 0.998695246971109
    },
    "euclideanDistance" : 16.11511429361266,
    "generation" : 37,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0286034772854746,
      "LackOfCohesion" : 1.3002225048092009,
      "MetricsIntensity" : 0.06279173531688031,
      "Density" : 3.102489866821078
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "00951e9a-a802-4f66-a5ce-be2ca09795fb",
    "objectives" : {
      "NumberOfConcerns" : 0.9994456762749445,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3038117357778463,
      "MetricsIntensity" : 0.06289794826186784,
      "Density" : 0.9977632805219012
    },
    "euclideanDistance" : 16.1151575982995,
    "generation" : 40,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.023569023569023,
      "LackOfCohesion" : 1.3038117357778463,
      "MetricsIntensity" : 0.06289794826186784,
      "Density" : 3.104988399071926
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "2d3d5804-d88f-4502-ae4d-aaf90fc06f23",
    "objectives" : {
      "NumberOfConcerns" : 1.0024944567627494,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.300174198778571,
      "MetricsIntensity" : 0.06274421322137182,
      "Density" : 1.0005591798695248
    },
    "euclideanDistance" : 16.11522583123561,
    "generation" : 24,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.027466367713005,
      "LackOfCohesion" : 1.300174198778571,
      "MetricsIntensity" : 0.06274421322137183,
      "Density" : 3.106481481481482
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "b477e5f9-adb5-44d6-9078-2b8690073308",
    "objectives" : {
      "NumberOfConcerns" : 0.9986141906873615,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3037538259258157,
      "MetricsIntensity" : 0.06294774538134154,
      "Density" : 0.9953401677539608
    },
    "euclideanDistance" : 17.108233947682955,
    "generation" : 38,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.023020774845593,
      "LackOfCohesion" : 1.3037538259258157,
      "MetricsIntensity" : 0.06294774538134154,
      "Density" : 3.0992455020313407
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "2d6a323a-3663-41f4-9186-3ad32384dafb",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3011366804978806,
      "MetricsIntensity" : 0.06283560461711205,
      "Density" : 0.9985088536812675
    },
    "euclideanDistance" : 17.10829988354847,
    "generation" : 39,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0235558048233315,
      "LackOfCohesion" : 1.3011366804978806,
      "MetricsIntensity" : 0.06283560461711205,
      "Density" : 3.1037079953650055
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "ed802881-8891-43ce-b234-3edeaacd4fc9",
    "objectives" : {
      "NumberOfConcerns" : 1.0022172949002217,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2995010366268187,
      "MetricsIntensity" : 0.06285298283062891,
      "Density" : 1.0007455731593662
    },
    "euclideanDistance" : 17.10843606674906,
    "generation" : 37,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.02804262478968,
      "LackOfCohesion" : 1.2995010366268187,
      "MetricsIntensity" : 0.06285298283062891,
      "Density" : 3.1088592935726687
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "dbb21403-b098-444c-932c-550689c846c3",
    "objectives" : {
      "NumberOfConcerns" : 1.000831485587583,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3021408338652085,
      "MetricsIntensity" : 0.06274688543862068,
      "Density" : 0.9994408201304753
    },
    "euclideanDistance" : 17.10847899546707,
    "generation" : 37,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.026374859708193,
      "LackOfCohesion" : 1.3021408338652085,
      "MetricsIntensity" : 0.06274688543862067,
      "Density" : 3.1066048667439174
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "2bbc3dd9-bd72-462e-96de-235fbd18350d",
    "objectives" : {
      "NumberOfConcerns" : 0.9983370288248337,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.3028658066603132,
      "MetricsIntensity" : 0.06293677056697268,
      "Density" : 0.9947809878844361
    },
    "euclideanDistance" : 18.102145905506152,
    "generation" : 13,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.022459292532285,
      "LackOfCohesion" : 1.3028658066603132,
      "MetricsIntensity" : 0.0629367705669727,
      "Density" : 3.097504352872896
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "44c48def-29d9-4c82-b400-591b259f3b53",
    "objectives" : {
      "NumberOfConcerns" : 0.9994456762749445,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.3020604034759724,
      "MetricsIntensity" : 0.06286483820965554,
      "Density" : 0.995712954333644
    },
    "euclideanDistance" : 18.10220012124039,
    "generation" : 39,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.023569023569023,
      "LackOfCohesion" : 1.3020604034759724,
      "MetricsIntensity" : 0.06286483820965555,
      "Density" : 3.09860788863109
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "3d94b856-9c2a-4da0-9911-52fa0d98d30f",
    "objectives" : {
      "NumberOfConcerns" : 1.001940133037694,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.3001459077241853,
      "MetricsIntensity" : 0.06285336157788433,
      "Density" : 0.9979496738117428
    },
    "euclideanDistance" : 18.102323538929642,
    "generation" : 41,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.027481772293887,
      "LackOfCohesion" : 1.3001459077241853,
      "MetricsIntensity" : 0.06285336157788435,
      "Density" : 3.103768115942029
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "410a5a6c-7de9-40f8-bc7a-a9583fe3f300",
    "objectives" : {
      "NumberOfConcerns" : 0.9991685144124168,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.3027480431527818,
      "MetricsIntensity" : 0.06284051843661803,
      "Density" : 0.9973904939422181
    },
    "euclideanDistance" : 18.102326560757188,
    "generation" : 37,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.023007856341191,
      "LackOfCohesion" : 1.3027480431527818,
      "MetricsIntensity" : 0.06284051843661803,
      "Density" : 3.1038283062645013
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "d737d0f3-dd23-4450-a095-e02ef2655d94",
    "objectives" : {
      "NumberOfConcerns" : 1.001940133037694,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.3001115464150192,
      "MetricsIntensity" : 0.06275903865647069,
      "Density" : 0.9981360671015843
    },
    "euclideanDistance" : 18.102331020304963,
    "generation" : 42,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.027481772293887,
      "LackOfCohesion" : 1.3001115464150192,
      "MetricsIntensity" : 0.06275903865647069,
      "Density" : 3.1007527504342773
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "2faf63d4-f602-4bc8-afe2-60e6f143fba1",
    "objectives" : {
      "NumberOfConcerns" : 1.001940133037694,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.300921867639192,
      "MetricsIntensity" : 0.06272538542681885,
      "Density" : 0.9979496738117428
    },
    "euclideanDistance" : 18.102378842608818,
    "generation" : 25,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0274817722938874,
      "LackOfCohesion" : 1.300921867639192,
      "MetricsIntensity" : 0.06272538542681885,
      "Density" : 3.1001737116386794
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "943321df-610d-4076-a802-cfa94f9a08fa",
    "objectives" : {
      "NumberOfConcerns" : 0.9977827050997783,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.3025743612002947,
      "MetricsIntensity" : 0.06293761777979442,
      "Density" : 0.9947809878844361
    },
    "euclideanDistance" : 19.09674895500909,
    "generation" : 36,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.021336327905671,
      "LackOfCohesion" : 1.3025743612002947,
      "MetricsIntensity" : 0.06293761777979441,
      "Density" : 3.097504352872896
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "93b6c80d-5005-4d1b-95c8-dc31c61edc2d",
    "objectives" : {
      "NumberOfConcerns" : 0.9986141906873615,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.3017964565843407,
      "MetricsIntensity" : 0.06286345257461858,
      "Density" : 0.9955265610438024
    },
    "euclideanDistance" : 19.096777981210103,
    "generation" : 37,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0230207748455924,
      "LackOfCohesion" : 1.3017964565843407,
      "MetricsIntensity" : 0.06286345257461858,
      "Density" : 3.098027842227377
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "dcd3cfac-4823-4f0a-a369-00c11f0c8e7f",
    "objectives" : {
      "NumberOfConcerns" : 0.9983370288248337,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.3026894929078405,
      "MetricsIntensity" : 0.06289028098064003,
      "Density" : 0.9949673811742777
    },
    "euclideanDistance" : 19.096795333644277,
    "generation" : 38,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.022459292532285,
      "LackOfCohesion" : 1.3026894929078405,
      "MetricsIntensity" : 0.06289028098064003,
      "Density" : 3.098084735925711
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "1fb41437-ca82-4e89-b7f9-fa2dfe4d64ab",
    "objectives" : {
      "NumberOfConcerns" : 1.0013858093126387,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.3003429756303857,
      "MetricsIntensity" : 0.0628276399047598,
      "Density" : 0.9975768872320596
    },
    "euclideanDistance" : 19.09693096682395,
    "generation" : 44,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.027497194163861,
      "LackOfCohesion" : 1.3003429756303857,
      "MetricsIntensity" : 0.06282763990475979,
      "Density" : 3.1008111239860954
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "4c84bc67-7b11-409f-bfd0-a7872857cb0c",
    "objectives" : {
      "NumberOfConcerns" : 1.0022172949002217,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.3003301008278012,
      "MetricsIntensity" : 0.06278091325574436,
      "Density" : 0.9979496738117428
    },
    "euclideanDistance" : 19.09699303219871,
    "generation" : 42,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.02804262478968,
      "LackOfCohesion" : 1.3003301008278012,
      "MetricsIntensity" : 0.06278091325574436,
      "Density" : 3.1001737116386803
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "d07fcf11-728f-4528-babf-5e80af82f562",
    "objectives" : {
      "NumberOfConcerns" : 0.9975055432372506,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.303876569194446,
      "MetricsIntensity" : 0.06298378662762141,
      "Density" : 0.9942218080149114
    },
    "euclideanDistance" : 20.091977388435257,
    "generation" : 34,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0219101123595515,
      "LackOfCohesion" : 1.303876569194446,
      "MetricsIntensity" : 0.06298378662762141,
      "Density" : 3.0975609756097566
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "67f20b5e-94e2-423d-bdf5-274a8d17803a",
    "objectives" : {
      "NumberOfConcerns" : 0.9983370288248337,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.302514362388481,
      "MetricsIntensity" : 0.06284223434502702,
      "Density" : 0.9973904939422181
    },
    "euclideanDistance" : 20.092086935686268,
    "generation" : 29,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.022459292532285,
      "LackOfCohesion" : 1.302514362388481,
      "MetricsIntensity" : 0.06284223434502703,
      "Density" : 3.1038283062645013
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "df1bd77f-6b83-41b7-88e0-4e4de0b81890",
    "objectives" : {
      "NumberOfConcerns" : 1.001940133037694,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.299638839793786,
      "MetricsIntensity" : 0.06277017534663004,
      "Density" : 0.9979496738117428
    },
    "euclideanDistance" : 20.09210762439984,
    "generation" : 43,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.027481772293887,
      "LackOfCohesion" : 1.299638839793786,
      "MetricsIntensity" : 0.06277017534663004,
      "Density" : 3.10017371163868
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "4d79e828-5955-452e-97f6-49f0d4b3f63b",
    "objectives" : {
      "NumberOfConcerns" : 0.9969512195121951,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.3035849481648731,
      "MetricsIntensity" : 0.06298463435081231,
      "Density" : 0.9942218080149114
    },
    "euclideanDistance" : 21.08757192089373,
    "generation" : 39,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0207865168539323,
      "LackOfCohesion" : 1.3035849481648731,
      "MetricsIntensity" : 0.06298463435081231,
      "Density" : 3.097560975609756
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "a7cad1a4-6f4e-438e-9e78-5784878e4199",
    "objectives" : {
      "NumberOfConcerns" : 1.0005543237250554,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.299329803249885,
      "MetricsIntensity" : 0.06288977039186285,
      "Density" : 0.9996272134203169
    },
    "euclideanDistance" : 21.08773521697787,
    "generation" : 36,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0258136924803596,
      "LackOfCohesion" : 1.299329803249885,
      "MetricsIntensity" : 0.06288977039186283,
      "Density" : 3.107184241019699
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "02cf92d5-39d4-405d-aa72-a67bdfb04950",
    "objectives" : {
      "NumberOfConcerns" : 1.001108647450111,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.2994205117792217,
      "MetricsIntensity" : 0.06284246846999532,
      "Density" : 0.9998136067101584
    },
    "euclideanDistance" : 21.087775810038337,
    "generation" : 39,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.026936026936027,
      "LackOfCohesion" : 1.2994205117792217,
      "MetricsIntensity" : 0.06284246846999532,
      "Density" : 3.1077636152954806
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "c0f8c090-2090-4439-818c-8f6ae258a7e4",
    "objectives" : {
      "NumberOfConcerns" : 0.9966740576496674,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.3026963939480056,
      "MetricsIntensity" : 0.06297365292510952,
      "Density" : 0.9936626281453868
    },
    "euclideanDistance" : 22.083516662242282,
    "generation" : 12,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.020224719101124,
      "LackOfCohesion" : 1.3026963939480056,
      "MetricsIntensity" : 0.06297365292510954,
      "Density" : 3.095818815331011
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "d893dc8c-c38e-434a-8c07-2bfe7f0b0da3",
    "objectives" : {
      "NumberOfConcerns" : 1.0013858093126387,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.299575827615945,
      "MetricsIntensity" : 0.06278502532298057,
      "Density" : 0.9977632805219012
    },
    "euclideanDistance" : 22.083730309759243,
    "generation" : 36,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0274971941638613,
      "LackOfCohesion" : 1.299575827615945,
      "MetricsIntensity" : 0.06278502532298057,
      "Density" : 3.1013904982618765
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "4ce33f48-b31f-4a4a-a437-1c4bed8c0308",
    "objectives" : {
      "NumberOfConcerns" : 1.000831485587583,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.3008665515891211,
      "MetricsIntensity" : 0.06271478789731917,
      "Density" : 0.9970177073625349
    },
    "euclideanDistance" : 22.083747302054565,
    "generation" : 29,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.026374859708193,
      "LackOfCohesion" : 1.3008665515891211,
      "MetricsIntensity" : 0.06271478789731917,
      "Density" : 3.099073001158748
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "38fba9d3-907e-4a5d-a47e-1639c54ba176",
    "objectives" : {
      "NumberOfConcerns" : 0.9966740576496674,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.3025199739824291,
      "MetricsIntensity" : 0.06292713533300195,
      "Density" : 0.9938490214352284
    },
    "euclideanDistance" : 23.079896298761486,
    "generation" : 39,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.020224719101124,
      "LackOfCohesion" : 1.3025199739824291,
      "MetricsIntensity" : 0.06292713533300194,
      "Density" : 3.096399535423925
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "c5c9923b-61c3-402f-8810-b20c1ad57ab3",
    "objectives" : {
      "NumberOfConcerns" : 1.0016629711751663,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.299794513529577,
      "MetricsIntensity" : 0.06280691308386634,
      "Density" : 0.9975768872320596
    },
    "euclideanDistance" : 23.08011912533156,
    "generation" : 41,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0280583613916954,
      "LackOfCohesion" : 1.299794513529577,
      "MetricsIntensity" : 0.06280691308386634,
      "Density" : 3.1008111239860954
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "9493432f-778b-4aeb-bc4d-20e73728b1c9",
    "objectives" : {
      "NumberOfConcerns" : 1.001108647450111,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.2988539253371838,
      "MetricsIntensity" : 0.06284630910701691,
      "Density" : 0.9998136067101584
    },
    "euclideanDistance" : 23.080139014964672,
    "generation" : 39,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0269360269360264,
      "LackOfCohesion" : 1.2988539253371838,
      "MetricsIntensity" : 0.06284630910701691,
      "Density" : 3.1077636152954806
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "6a2eb3c0-2e8e-4fda-8d0b-021bff433348",
    "objectives" : {
      "NumberOfConcerns" : 0.9958425720620843,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.303707663624888,
      "MetricsIntensity" : 0.06302071955743922,
      "Density" : 0.993103448275862
    },
    "euclideanDistance" : 24.076577459651453,
    "generation" : 13,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.019673974142777,
      "LackOfCohesion" : 1.303707663624888,
      "MetricsIntensity" : 0.06302071955743922,
      "Density" : 3.0958744915746657
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "7d339b6f-1771-4f57-9a53-ef487fc7b6da",
    "objectives" : {
      "NumberOfConcerns" : 1.000831485587583,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2995583978602483,
      "MetricsIntensity" : 0.06275960476654056,
      "Density" : 0.9970177073625349
    },
    "euclideanDistance" : 24.076721096710354,
    "generation" : 39,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.026374859708193,
      "LackOfCohesion" : 1.2995583978602483,
      "MetricsIntensity" : 0.06275960476654058,
      "Density" : 3.099073001158747
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "9a11d5d4-466b-4a38-84f9-b1d575034f0f",
    "objectives" : {
      "NumberOfConcerns" : 0.998059866962306,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.3004422366260773,
      "MetricsIntensity" : 0.06300257399694123,
      "Density" : 0.9947809878844361
    },
    "euclideanDistance" : 25.07350857074112,
    "generation" : 43,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.023033707865168,
      "LackOfCohesion" : 1.3004422366260773,
      "MetricsIntensity" : 0.06300257399694123,
      "Density" : 3.101104009296921
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "bcf7ac6a-c102-4f86-a9d1-c7f05087c8e3",
    "objectives" : {
      "NumberOfConcerns" : 0.9963968957871396,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.3024011445355093,
      "MetricsIntensity" : 0.06288151165450186,
      "Density" : 0.9940354147250698
    },
    "euclideanDistance" : 25.07351423325931,
    "generation" : 41,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.020798201236649,
      "LackOfCohesion" : 1.3024011445355093,
      "MetricsIntensity" : 0.06288151165450184,
      "Density" : 3.0969802555168413
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "3590ba7e-7d24-445a-9f08-e36903ad820a",
    "objectives" : {
      "NumberOfConcerns" : 0.9958425720620843,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.3035311373181628,
      "MetricsIntensity" : 0.06297417392579453,
      "Density" : 0.9932898415657037
    },
    "euclideanDistance" : 25.073521617639365,
    "generation" : 16,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.019673974142777,
      "LackOfCohesion" : 1.3035311373181628,
      "MetricsIntensity" : 0.06297417392579452,
      "Density" : 3.0964555490993613
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "76451efa-abec-42af-b925-9dd7259cb5fb",
    "objectives" : {
      "NumberOfConcerns" : 0.9955654101995566,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.3026420475050224,
      "MetricsIntensity" : 0.0629631858807875,
      "Density" : 0.992730661696179
    },
    "euclideanDistance" : 26.07062533426005,
    "generation" : 14,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0191118605958405,
      "LackOfCohesion" : 1.3026420475050224,
      "MetricsIntensity" : 0.06296318588078752,
      "Density" : 3.0947123765252758
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "41042e5e-4e27-41cc-8f68-5ba159fe0f49",
    "objectives" : {
      "NumberOfConcerns" : 0.9963968957871396,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.3032454830380753,
      "MetricsIntensity" : 0.06296022193608285,
      "Density" : 0.9932898415657037
    },
    "euclideanDistance" : 26.070708549287595,
    "generation" : 38,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.020798201236649,
      "LackOfCohesion" : 1.3032454830380753,
      "MetricsIntensity" : 0.06296022193608285,
      "Density" : 3.0964555490993613
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "1a10632c-86d0-4b7c-9e8c-f38a5ca97177",
    "objectives" : {
      "NumberOfConcerns" : 1.0016629711751663,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2992842970446317,
      "MetricsIntensity" : 0.06280629022184026,
      "Density" : 0.9983224603914259
    },
    "euclideanDistance" : 26.07090448675273,
    "generation" : 30,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.028058361391695,
      "LackOfCohesion" : 1.2992842970446317,
      "MetricsIntensity" : 0.06280629022184026,
      "Density" : 3.103128621089223
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "054ee565-9e0a-419d-b613-72d97d2f90bb",
    "objectives" : {
      "NumberOfConcerns" : 0.9955654101995566,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.3034128460702108,
      "MetricsIntensity" : 0.06292855110068064,
      "Density" : 0.9934762348555451
    },
    "euclideanDistance" : 27.068080659053994,
    "generation" : 21,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0202474690663674,
      "LackOfCohesion" : 1.3034128460702108,
      "MetricsIntensity" : 0.06292855110068064,
      "Density" : 3.097036606624056
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "f6bb536f-3f00-4eac-995d-e02645c05510",
    "objectives" : {
      "NumberOfConcerns" : 0.9966740576496674,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.3021853814466453,
      "MetricsIntensity" : 0.06302373745169347,
      "Density" : 0.994408201304753
    },
    "euclideanDistance" : 27.068096822775512,
    "generation" : 45,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0224971878515183,
      "LackOfCohesion" : 1.3021853814466453,
      "MetricsIntensity" : 0.06302373745169347,
      "Density" : 3.0999418942475314
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "0e1a2dfb-ecd3-4a04-888d-919efb9bbf9e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2987729624184625,
      "MetricsIntensity" : 0.06283577799904076,
      "Density" : 0.9988816402609506
    },
    "euclideanDistance" : 27.06821981723505,
    "generation" : 40,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0258281864121286,
      "LackOfCohesion" : 1.2987729624184625,
      "MetricsIntensity" : 0.06283577799904076,
      "Density" : 3.1066666666666656
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "cb35d889-d989-4776-8777-1e01bdb5830f",
    "objectives" : {
      "NumberOfConcerns" : 0.9997228381374723,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.300338165059824,
      "MetricsIntensity" : 0.06285049223551933,
      "Density" : 0.998695246971109
    },
    "euclideanDistance" : 27.06827788163299,
    "generation" : 46,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.025266704098821,
      "LackOfCohesion" : 1.300338165059824,
      "MetricsIntensity" : 0.06285049223551932,
      "Density" : 3.107888631090486
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "10ea5357-123b-4c03-ac0b-87adee70094a",
    "objectives" : {
      "NumberOfConcerns" : 0.9952882483370288,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.3025232200147223,
      "MetricsIntensity" : 0.06291755642838469,
      "Density" : 0.9929170549860205
    },
    "euclideanDistance" : 28.065584054726965,
    "generation" : 23,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.019685039370079,
      "LackOfCohesion" : 1.3025232200147223,
      "MetricsIntensity" : 0.0629175564283847,
      "Density" : 3.095293434049971
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "7ecfd7cc-305d-4d60-840f-135fba106544",
    "objectives" : {
      "NumberOfConcerns" : 0.9947339246119734,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.3036538943370521,
      "MetricsIntensity" : 0.06301027458765764,
      "Density" : 0.9921714818266543
    },
    "euclideanDistance" : 28.065590740282804,
    "generation" : 8,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.018560179977503,
      "LackOfCohesion" : 1.3036538943370521,
      "MetricsIntensity" : 0.06301027458765764,
      "Density" : 3.094767441860465
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "057357f6-49ad-4cda-9041-31b7affd4fb1",
    "objectives" : {
      "NumberOfConcerns" : 0.9947339246119734,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.303653894337052,
      "MetricsIntensity" : 0.06301027458765768,
      "Density" : 0.9921714818266543
    },
    "euclideanDistance" : 28.065590740282804,
    "generation" : 40,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.018560179977503,
      "LackOfCohesion" : 1.303653894337052,
      "MetricsIntensity" : 0.06301027458765768,
      "Density" : 3.094767441860464
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "e97c23b6-9ebb-4ddf-93e5-a20b212967c7",
    "objectives" : {
      "NumberOfConcerns" : 0.998059866962306,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.299077274613525,
      "MetricsIntensity" : 0.06289632497978785,
      "Density" : 0.995712954333644
    },
    "euclideanDistance" : 28.065621772884025,
    "generation" : 41,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0230337078651686,
      "LackOfCohesion" : 1.299077274613525,
      "MetricsIntensity" : 0.06289632497978785,
      "Density" : 3.098607888631091
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "59252f7e-3d0c-437f-8570-41c5202764ce",
    "objectives" : {
      "NumberOfConcerns" : 0.9955654101995566,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.3019162086462723,
      "MetricsIntensity" : 0.06298967718110839,
      "Density" : 0.9947809878844361
    },
    "euclideanDistance" : 28.06563188694688,
    "generation" : 36,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.01911186059584,
      "LackOfCohesion" : 1.3019162086462723,
      "MetricsIntensity" : 0.06298967718110839,
      "Density" : 3.101104009296921
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "dade81b8-953a-42b7-860c-9b0e7303600b",
    "objectives" : {
      "NumberOfConcerns" : 1.001108647450111,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.299221033479116,
      "MetricsIntensity" : 0.06282117088142472,
      "Density" : 0.9981360671015843
    },
    "euclideanDistance" : 28.065822915528308,
    "generation" : 45,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0280741156653566,
      "LackOfCohesion" : 1.299221033479116,
      "MetricsIntensity" : 0.06282117088142472,
      "Density" : 3.104347826086956
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.processors.MulticastProcessor.MulticastSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "58c12d4b-f664-4d11-9f5a-5ca1451cd14f",
    "objectives" : {
      "NumberOfConcerns" : 0.9947339246119734,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.3018570507504015,
      "MetricsIntensity" : 0.06303961972897633,
      "Density" : 0.9923578751164958
    },
    "euclideanDistance" : 29.063259891266906,
    "generation" : 19,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.018560179977503,
      "LackOfCohesion" : 1.3018570507504015,
      "MetricsIntensity" : 0.06303961972897633,
      "Density" : 3.0953488372093036
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "9dd9a95e-6b0d-4aca-8d77-a318aeac0dcc",
    "objectives" : {
      "NumberOfConcerns" : 0.996119733924612,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.300072967833773,
      "MetricsIntensity" : 0.06302787592393005,
      "Density" : 0.9938490214352284
    },
    "euclideanDistance" : 29.063278422032113,
    "generation" : 40,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.020236087689713,
      "LackOfCohesion" : 1.300072967833773,
      "MetricsIntensity" : 0.06302787592393005,
      "Density" : 3.0999999999999996
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "e10aaf35-ee72-48b6-8de2-f4a3332eb6e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9977827050997783,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.3010076891863576,
      "MetricsIntensity" : 0.06294942377817976,
      "Density" : 0.9953401677539608
    },
    "euclideanDistance" : 29.0634281531518,
    "generation" : 29,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0236087689713322,
      "LackOfCohesion" : 1.3010076891863576,
      "MetricsIntensity" : 0.06294942377817976,
      "Density" : 3.099245502031341
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "40855c95-2b0c-482d-95fc-14686dfb3b21",
    "objectives" : {
      "NumberOfConcerns" : 1.000831485587583,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.2984986965812826,
      "MetricsIntensity" : 0.06288249156117685,
      "Density" : 1.0001863932898416
    },
    "euclideanDistance" : 29.06358700430203,
    "generation" : 22,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0275126333520492,
      "LackOfCohesion" : 1.2984986965812826,
      "MetricsIntensity" : 0.06288249156117685,
      "Density" : 3.1107246376811597
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "ac47bd26-d4f7-4929-a395-ff5d3c8a8b38",
    "objectives" : {
      "NumberOfConcerns" : 0.9950110864745011,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3007019968510776,
      "MetricsIntensity" : 0.06305346306525668,
      "Density" : 0.993103448275862
    },
    "euclideanDistance" : 30.061139415281676,
    "generation" : 41,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0191226096737913,
      "LackOfCohesion" : 1.3007019968510776,
      "MetricsIntensity" : 0.06305346306525667,
      "Density" : 3.0994764397905756
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "76105172-b7e8-41c3-8552-00b477a56fb6",
    "objectives" : {
      "NumberOfConcerns" : 0.9947339246119734,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3030760949644609,
      "MetricsIntensity" : 0.06299716292877054,
      "Density" : 0.9921714818266543
    },
    "euclideanDistance" : 30.0612021679428,
    "generation" : 35,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.018560179977503,
      "LackOfCohesion" : 1.3030760949644609,
      "MetricsIntensity" : 0.06299716292877054,
      "Density" : 3.0947674418604647
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "4e7a331d-4540-4ab8-bddf-7bfb62414362",
    "objectives" : {
      "NumberOfConcerns" : 0.9944567627494457,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3035356057841938,
      "MetricsIntensity" : 0.06296464601591532,
      "Density" : 0.9923578751164958
    },
    "euclideanDistance" : 30.061219004349756,
    "generation" : 22,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0191333708497465,
      "LackOfCohesion" : 1.3035356057841938,
      "MetricsIntensity" : 0.06296464601591534,
      "Density" : 3.0953488372093036
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "866197b0-09c3-45ce-be24-8d49e3bcdf81",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.299112830089757,
      "MetricsIntensity" : 0.06284307181977032,
      "Density" : 0.9972041006523765
    },
    "euclideanDistance" : 30.06137154913823,
    "generation" : 41,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0258281864121286,
      "LackOfCohesion" : 1.299112830089757,
      "MetricsIntensity" : 0.06284307181977034,
      "Density" : 3.101449275362318
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "befb50b8-1196-493f-97e7-db6158014959",
    "objectives" : {
      "NumberOfConcerns" : 1.0005543237250554,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.299203593229888,
      "MetricsIntensity" : 0.06279573502061596,
      "Density" : 0.9973904939422181
    },
    "euclideanDistance" : 30.061400001216334,
    "generation" : 42,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0269511510387423,
      "LackOfCohesion" : 1.299203593229888,
      "MetricsIntensity" : 0.06279573502061597,
      "Density" : 3.1020289855072463
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "3dd66d35-a9d2-4f82-8af1-79cbf7f109eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9939024390243902,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.3028690344865208,
      "MetricsIntensity" : 0.06308678298174566,
      "Density" : 0.9917986952469711
    },
    "euclideanDistance" : 31.059184702329247,
    "generation" : 40,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.018007878446819,
      "LackOfCohesion" : 1.3028690344865208,
      "MetricsIntensity" : 0.06308678298174566,
      "Density" : 3.095404304828388
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "d2333911-5ea8-4022-b217-b7658e646f3f",
    "objectives" : {
      "NumberOfConcerns" : 1.0002771618625277,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.3006689221453744,
      "MetricsIntensity" : 0.0627876615521309,
      "Density" : 0.9970177073625349
    },
    "euclideanDistance" : 31.05946362455115,
    "generation" : 36,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.027528089887641,
      "LackOfCohesion" : 1.3006689221453744,
      "MetricsIntensity" : 0.0627876615521309,
      "Density" : 3.102668213457077
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "a6ab789b-fc34-4f70-8100-2aebfe1f8145",
    "objectives" : {
      "NumberOfConcerns" : 0.9941796008869179,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.3017132835118204,
      "MetricsIntensity" : 0.06310063467248365,
      "Density" : 0.9925442684063374
    },
    "euclideanDistance" : 32.057323287606735,
    "generation" : 40,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0185706246482837,
      "LackOfCohesion" : 1.3017132835118204,
      "MetricsIntensity" : 0.06310063467248367,
      "Density" : 3.09953434225844
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "a36ab604-f983-4d30-bff3-f1803c17b199",
    "objectives" : {
      "NumberOfConcerns" : 0.9939024390243902,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.3026210485490362,
      "MetricsIntensity" : 0.06306027051377926,
      "Density" : 0.9917986952469711
    },
    "euclideanDistance" : 32.05732841183171,
    "generation" : 20,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.018007878446821,
      "LackOfCohesion" : 1.3026210485490362,
      "MetricsIntensity" : 0.06306027051377926,
      "Density" : 3.097206053550642
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "da7c39ad-a166-4817-8e84-d0f072037da3",
    "objectives" : {
      "NumberOfConcerns" : 0.9941796008869179,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.3013956942975717,
      "MetricsIntensity" : 0.06304677024014253,
      "Density" : 0.9923578751164958
    },
    "euclideanDistance" : 33.055570980993494,
    "generation" : 45,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0185706246482837,
      "LackOfCohesion" : 1.3013956942975717,
      "MetricsIntensity" : 0.06304677024014253,
      "Density" : 3.0953488372093036
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "5462d6d8-73b0-44ae-9da0-de188b3570a2",
    "objectives" : {
      "NumberOfConcerns" : 0.9936252771618626,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.3027502005541927,
      "MetricsIntensity" : 0.06304117305723915,
      "Density" : 0.9919850885368127
    },
    "euclideanDistance" : 33.05559646840212,
    "generation" : 39,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.018581081081081,
      "LackOfCohesion" : 1.3027502005541927,
      "MetricsIntensity" : 0.06304117305723915,
      "Density" : 3.095986038394416
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "b1f23585-6fe4-4bdf-9403-134b0dbb919d",
    "objectives" : {
      "NumberOfConcerns" : 0.9991685144124168,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2983266530797706,
      "MetricsIntensity" : 0.06291934122111745,
      "Density" : 0.9990680335507922
    },
    "euclideanDistance" : 33.055802601017774,
    "generation" : 45,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.025280898876405,
      "LackOfCohesion" : 1.2983266530797706,
      "MetricsIntensity" : 0.06291934122111745,
      "Density" : 3.109048723897911
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "bbccc3f3-ffed-47d0-be7e-ebc26b27e1c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9991685144124168,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2983266530797708,
      "MetricsIntensity" : 0.06291934122111743,
      "Density" : 0.9990680335507922
    },
    "euclideanDistance" : 33.055802601017774,
    "generation" : 39,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0252808988764044,
      "LackOfCohesion" : 1.2983266530797708,
      "MetricsIntensity" : 0.06291934122111743,
      "Density" : 3.109048723897911
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "55430ceb-fb42-4874-b9d9-a631797b0812",
    "objectives" : {
      "NumberOfConcerns" : 1.0002771618625277,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2993591923276717,
      "MetricsIntensity" : 0.06283253241758027,
      "Density" : 0.9970177073625349
    },
    "euclideanDistance" : 33.055814631425356,
    "generation" : 40,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0275280898876407,
      "LackOfCohesion" : 1.2993591923276717,
      "MetricsIntensity" : 0.06283253241758027,
      "Density" : 3.102668213457075
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "1f57ff90-a643-4fe7-80d2-6c7a9062ba7f",
    "objectives" : {
      "NumberOfConcerns" : 0.9997228381374723,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2984174708964924,
      "MetricsIntensity" : 0.06287197590581896,
      "Density" : 0.9992544268406337
    },
    "euclideanDistance" : 33.055828472097595,
    "generation" : 43,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0264044943820227,
      "LackOfCohesion" : 1.2984174708964924,
      "MetricsIntensity" : 0.06287197590581896,
      "Density" : 3.109628770301623
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "ceb0adf2-1313-41a2-a0a2-c40bb1c3809b",
    "objectives" : {
      "NumberOfConcerns" : 0.9936252771618626,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.3030329739509543,
      "MetricsIntensity" : 0.06312384501491108,
      "Density" : 0.9916123019571296
    },
    "euclideanDistance" : 34.05396402329427,
    "generation" : 18,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0185810810810816,
      "LackOfCohesion" : 1.3030329739509543,
      "MetricsIntensity" : 0.06312384501491108,
      "Density" : 3.096623981373691
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "f230a8b3-aa93-4f9b-91b9-d63c65a5478f",
    "objectives" : {
      "NumberOfConcerns" : 0.9975055432372506,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2996158651614804,
      "MetricsIntensity" : 0.06295944195063427,
      "Density" : 0.9955265610438024
    },
    "euclideanDistance" : 34.054060781804615,
    "generation" : 41,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0230466554243964,
      "LackOfCohesion" : 1.2996158651614804,
      "MetricsIntensity" : 0.06295944195063427,
      "Density" : 3.101626016260163
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "e1e79ec6-80a9-4f74-8ae6-ed27ab3f0cea",
    "objectives" : {
      "NumberOfConcerns" : 0.9988913525498891,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2989726896068314,
      "MetricsIntensity" : 0.06291972123496162,
      "Density" : 0.9962721342031687
    },
    "euclideanDistance" : 34.05409859384408,
    "generation" : 41,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0247191011235954,
      "LackOfCohesion" : 1.2989726896068314,
      "MetricsIntensity" : 0.0629197212349616,
      "Density" : 3.103948896631823
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "ec9f8c9a-8721-4230-9f5b-eff24cbe1d18",
    "objectives" : {
      "NumberOfConcerns" : 0.9988913525498891,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2989726896068317,
      "MetricsIntensity" : 0.0629197212349616,
      "Density" : 0.9962721342031687
    },
    "euclideanDistance" : 34.05409859384408,
    "generation" : 29,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0247191011235954,
      "LackOfCohesion" : 1.2989726896068317,
      "MetricsIntensity" : 0.06291972123496162,
      "Density" : 3.1039488966318234
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "dfeddc99-c2ab-4668-93b5-6e6caf184239",
    "objectives" : {
      "NumberOfConcerns" : 0.9930709534368071,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.301835091050173,
      "MetricsIntensity" : 0.06313685529936512,
      "Density" : 0.991425908667288
    },
    "euclideanDistance" : 35.05235906636989,
    "generation" : 39,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.017454954954954,
      "LackOfCohesion" : 1.301835091050173,
      "MetricsIntensity" : 0.06313685529936514,
      "Density" : 3.097845078625509
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "355152a4-9454-427b-97f6-84577d2c0d61",
    "objectives" : {
      "NumberOfConcerns" : 0.9972283813747228,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2984605507150266,
      "MetricsIntensity" : 0.06294931293414376,
      "Density" : 0.9945945945945946
    },
    "euclideanDistance" : 35.05244135962541,
    "generation" : 40,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.022484541877459,
      "LackOfCohesion" : 1.2984605507150266,
      "MetricsIntensity" : 0.06294931293414376,
      "Density" : 3.1005229517722253
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "04f8573e-bd49-40af-ac05-13fc3d1c92bb",
    "objectives" : {
      "NumberOfConcerns" : 0.9941796008869179,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.300626470897087,
      "MetricsIntensity" : 0.06309806737532787,
      "Density" : 0.9921714818266543
    },
    "euclideanDistance" : 36.050914106456084,
    "generation" : 44,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0185706246482837,
      "LackOfCohesion" : 1.300626470897087,
      "MetricsIntensity" : 0.06309806737532786,
      "Density" : 3.0983701979045395
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "cf773868-aa4b-418a-9e00-a33154641c6e",
    "objectives" : {
      "NumberOfConcerns" : 0.9933481152993349,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.3029141672727234,
      "MetricsIntensity" : 0.0630782299255155,
      "Density" : 0.9917986952469711
    },
    "euclideanDistance" : 36.050963500583904,
    "generation" : 14,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.019154929577465,
      "LackOfCohesion" : 1.3029141672727234,
      "MetricsIntensity" : 0.06307822992551551,
      "Density" : 3.0972060535506403
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "8ed94826-2942-4c5d-8ac3-0babf498162d",
    "objectives" : {
      "NumberOfConcerns" : 0.9994456762749445,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2985726899320482,
      "MetricsIntensity" : 0.06290884143917996,
      "Density" : 0.9966449207828518
    },
    "euclideanDistance" : 36.05110873900157,
    "generation" : 34,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0269814502529515,
      "LackOfCohesion" : 1.2985726899320482,
      "MetricsIntensity" : 0.06290884143917996,
      "Density" : 3.103308183401045
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "201ffb24-3ca5-4433-9976-94673e4932e6",
    "objectives" : {
      "NumberOfConcerns" : 0.9930709534368071,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.3012565938522525,
      "MetricsIntensity" : 0.06312372780514124,
      "Density" : 0.991425908667288
    },
    "euclideanDistance" : 37.04951239326899,
    "generation" : 39,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0174549549549545,
      "LackOfCohesion" : 1.3012565938522525,
      "MetricsIntensity" : 0.06312372780514125,
      "Density" : 3.0978450786255096
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "ee464db8-20f4-423f-b7a0-fcc3d672a4ab",
    "objectives" : {
      "NumberOfConcerns" : 0.9933481152993349,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.301357750355441,
      "MetricsIntensity" : 0.06311307252998048,
      "Density" : 0.9912395153774464
    },
    "euclideanDistance" : 38.04821692943506,
    "generation" : 43,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0180180180180174,
      "LackOfCohesion" : 1.301357750355441,
      "MetricsIntensity" : 0.06311307252998048,
      "Density" : 3.0972626674432155
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "eb939727-24e6-4faa-af70-61897075b7fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9927937915742794,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.3019985048324476,
      "MetricsIntensity" : 0.06317396998168509,
      "Density" : 0.9912395153774464
    },
    "euclideanDistance" : 38.048224483495986,
    "generation" : 13,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.018028169014085,
      "LackOfCohesion" : 1.3019985048324476,
      "MetricsIntensity" : 0.06317396998168509,
      "Density" : 3.099067599067599
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "c7096ff7-9e8e-4260-beb4-b6444fa866f8",
    "objectives" : {
      "NumberOfConcerns" : 0.9958425720620843,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.299785380451289,
      "MetricsIntensity" : 0.06300328237387222,
      "Density" : 0.9936626281453868
    },
    "euclideanDistance" : 38.04829141099149,
    "generation" : 42,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0219471018570623,
      "LackOfCohesion" : 1.299785380451289,
      "MetricsIntensity" : 0.06300328237387222,
      "Density" : 3.097617664148751
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "1d3a0826-6a24-485d-bcd2-5ec291a37dd8",
    "objectives" : {
      "NumberOfConcerns" : 0.9936252771618626,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.302436538154611,
      "MetricsIntensity" : 0.06305443278587743,
      "Density" : 0.9916123019571296
    },
    "euclideanDistance" : 39.047034496184494,
    "generation" : 16,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0197183098591553,
      "LackOfCohesion" : 1.302436538154611,
      "MetricsIntensity" : 0.06305443278587744,
      "Density" : 3.096623981373691
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "0bc57074-89d6-4234-9931-37b43ca0a377",
    "objectives" : {
      "NumberOfConcerns" : 0.9955654101995566,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.3001579313001612,
      "MetricsIntensity" : 0.06297146064882748,
      "Density" : 0.9929170549860205
    },
    "euclideanDistance" : 39.047040999482235,
    "generation" : 45,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0213843556556,
      "LackOfCohesion" : 1.3001579313001612,
      "MetricsIntensity" : 0.06297146064882748,
      "Density" : 3.0988947062245495
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "92842484-e1ee-41bc-aec8-66fa9d333977",
    "objectives" : {
      "NumberOfConcerns" : 0.9983370288248337,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.2996222426775017,
      "MetricsIntensity" : 0.06288686604581548,
      "Density" : 0.9960857409133271
    },
    "euclideanDistance" : 39.047174499033304,
    "generation" : 37,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0258717660292467,
      "LackOfCohesion" : 1.2996222426775017,
      "MetricsIntensity" : 0.06288686604581548,
      "Density" : 3.1033681765389085
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "11eb64d4-aaee-4974-80c9-cd509a6a7aea",
    "objectives" : {
      "NumberOfConcerns" : 0.9927937915742794,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3014196580893926,
      "MetricsIntensity" : 0.0631608345554405,
      "Density" : 0.9912395153774464
    },
    "euclideanDistance" : 40.04579725398057,
    "generation" : 10,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0180281690140833,
      "LackOfCohesion" : 1.3014196580893926,
      "MetricsIntensity" : 0.0631608345554405,
      "Density" : 3.0990675990676
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "64a11a30-9674-41ba-a139-7ccfd39576fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9927937915742794,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3014196580893926,
      "MetricsIntensity" : 0.0631608345554405,
      "Density" : 0.9912395153774464
    },
    "euclideanDistance" : 40.04579725398057,
    "generation" : 43,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.018028169014085,
      "LackOfCohesion" : 1.3014196580893926,
      "MetricsIntensity" : 0.0631608345554405,
      "Density" : 3.0990675990675993
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "9691ac48-6d6c-4574-b5b3-303af6d7d022",
    "objectives" : {
      "NumberOfConcerns" : 0.9944567627494457,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3010683435960675,
      "MetricsIntensity" : 0.0630292664981179,
      "Density" : 0.9925442684063374
    },
    "euclideanDistance" : 40.04585921042109,
    "generation" : 40,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.02027027027027,
      "LackOfCohesion" : 1.3010683435960675,
      "MetricsIntensity" : 0.06302926649811791,
      "Density" : 3.0995343422584414
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "08ab4c88-5744-48a9-9b59-e842be03ce2f",
    "objectives" : {
      "NumberOfConcerns" : 0.9963968957871396,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.2996472198122235,
      "MetricsIntensity" : 0.06291557556815462,
      "Density" : 0.9947809878844361
    },
    "euclideanDistance" : 40.045916611477445,
    "generation" : 42,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0230725942599883,
      "LackOfCohesion" : 1.2996472198122235,
      "MetricsIntensity" : 0.06291557556815462,
      "Density" : 3.1011040092969213
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "f55f94a0-b55c-4df9-95a5-73a873695416",
    "objectives" : {
      "NumberOfConcerns" : 0.9977827050997783,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.298400483527248,
      "MetricsIntensity" : 0.06294575144242441,
      "Density" : 0.9955265610438024
    },
    "euclideanDistance" : 40.045929249345534,
    "generation" : 35,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.02474690663667,
      "LackOfCohesion" : 1.298400483527248,
      "MetricsIntensity" : 0.06294575144242441,
      "Density" : 3.1016260162601625
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "68b48acb-4a05-4002-a59a-92aab30497d4",
    "objectives" : {
      "NumberOfConcerns" : 0.9930709534368071,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.3015208757143353,
      "MetricsIntensity" : 0.063150172842047,
      "Density" : 0.9910531220876049
    },
    "euclideanDistance" : 41.04468687593572,
    "generation" : 12,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0185915492957744,
      "LackOfCohesion" : 1.3015208757143353,
      "MetricsIntensity" : 0.063150172842047,
      "Density" : 3.098484848484848
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "7c3e3dca-c0a9-4f22-81f1-69b5495d9b36",
    "objectives" : {
      "NumberOfConcerns" : 0.9936252771618626,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.3008598197511645,
      "MetricsIntensity" : 0.06311901425119902,
      "Density" : 0.9921714818266543
    },
    "euclideanDistance" : 41.04470630570242,
    "generation" : 40,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0197183098591553,
      "LackOfCohesion" : 1.3008598197511645,
      "MetricsIntensity" : 0.06311901425119903,
      "Density" : 3.100174723354688
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "66104f32-13e6-4bc9-9973-ac8f02d63049",
    "objectives" : {
      "NumberOfConcerns" : 0.9969512195121951,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2981044419465257,
      "MetricsIntensity" : 0.06298562298250744,
      "Density" : 0.9949673811742777
    },
    "euclideanDistance" : 41.044767195765544,
    "generation" : 13,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.023059617547806,
      "LackOfCohesion" : 1.2981044419465257,
      "MetricsIntensity" : 0.06298562298250744,
      "Density" : 3.103488372093022
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "4c2cd697-5fe3-4b73-b73d-d1714ac26150",
    "objectives" : {
      "NumberOfConcerns" : 0.9977827050997783,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2996195277413074,
      "MetricsIntensity" : 0.06290329464221867,
      "Density" : 0.9953401677539608
    },
    "euclideanDistance" : 41.04484425743998,
    "generation" : 38,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.02474690663667,
      "LackOfCohesion" : 1.2996195277413074,
      "MetricsIntensity" : 0.06290329464221865,
      "Density" : 3.1010452961672477
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "06e3aaaa-6e84-4d8d-985c-06b45db47984",
    "objectives" : {
      "NumberOfConcerns" : 0.9941796008869179,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.3003059643690142,
      "MetricsIntensity" : 0.06311135345335592,
      "Density" : 0.9916123019571296
    },
    "euclideanDistance" : 42.043625755637684,
    "generation" : 19,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.019707207207207,
      "LackOfCohesion" : 1.3003059643690142,
      "MetricsIntensity" : 0.06311135345335592,
      "Density" : 3.098427489807804
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "8ffee6fc-45af-4a1d-96db-e52e794f24ae",
    "objectives" : {
      "NumberOfConcerns" : 0.9958425720620843,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2987326625770654,
      "MetricsIntensity" : 0.06301120006601858,
      "Density" : 0.9942218080149114
    },
    "euclideanDistance" : 42.04367795961769,
    "generation" : 37,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0219471018570623,
      "LackOfCohesion" : 1.2987326625770654,
      "MetricsIntensity" : 0.06301120006601858,
      "Density" : 3.1029668411867375
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "aee917c1-e46c-4a79-801c-383893d7b242",
    "objectives" : {
      "NumberOfConcerns" : 0.9930709534368071,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.30094202897128,
      "MetricsIntensity" : 0.06313703741580241,
      "Density" : 0.9910531220876049
    },
    "euclideanDistance" : 43.0425930057379,
    "generation" : 20,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.018591549295775,
      "LackOfCohesion" : 1.30094202897128,
      "MetricsIntensity" : 0.06313703741580241,
      "Density" : 3.0984848484848477
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "5dd90980-597b-4764-8b25-80ee473a7676",
    "objectives" : {
      "NumberOfConcerns" : 0.9941796008869179,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.3003028709782398,
      "MetricsIntensity" : 0.06310016968781548,
      "Density" : 0.992730661696179
    },
    "euclideanDistance" : 43.04263788887921,
    "generation" : 40,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0197072072072073,
      "LackOfCohesion" : 1.3003028709782398,
      "MetricsIntensity" : 0.0631001696878155,
      "Density" : 3.1019219569015726
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "484632cf-82df-4eea-b4d2-836f9000d260",
    "objectives" : {
      "NumberOfConcerns" : 0.9972283813747228,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.300393992170166,
      "MetricsIntensity" : 0.06288427016139167,
      "Density" : 0.9949673811742777
    },
    "euclideanDistance" : 43.042762498479654,
    "generation" : 43,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.024760832864379,
      "LackOfCohesion" : 1.300393992170166,
      "MetricsIntensity" : 0.06288427016139167,
      "Density" : 3.1016850668216143
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "f2f2f39a-31ef-4b09-ac77-f09272088617",
    "objectives" : {
      "NumberOfConcerns" : 0.9939024390243902,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.300382190633052,
      "MetricsIntensity" : 0.06309521711156094,
      "Density" : 0.9919850885368127
    },
    "euclideanDistance" : 44.04164905316689,
    "generation" : 13,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0202816901408456,
      "LackOfCohesion" : 1.300382190633052,
      "MetricsIntensity" : 0.06309521711156094,
      "Density" : 3.099592312172394
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.ThreadWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.observers.SafeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "aeb41eeb-5643-430c-adff-f1b19ae8507d",
    "objectives" : {
      "NumberOfConcerns" : 0.9969512195121951,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2988322331493187,
      "MetricsIntensity" : 0.0629797384738773,
      "Density" : 0.9949673811742777
    },
    "euclideanDistance" : 44.04173933260372,
    "generation" : 35,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0241980866629157,
      "LackOfCohesion" : 1.2988322331493187,
      "MetricsIntensity" : 0.0629797384738773,
      "Density" : 3.1016850668216143
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "9067abe8-1d1c-4ba2-97d6-0f01eecd2a32",
    "objectives" : {
      "NumberOfConcerns" : 0.9950110864745011,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.2991679668994953,
      "MetricsIntensity" : 0.06305643090869742,
      "Density" : 0.9925442684063374
    },
    "euclideanDistance" : 45.040726067711766,
    "generation" : 24,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0213963963963963,
      "LackOfCohesion" : 1.2991679668994953,
      "MetricsIntensity" : 0.06305643090869742,
      "Density" : 3.099534342258442
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "bd21ba38-864a-439a-a350-264a6c8ee8d6",
    "objectives" : {
      "NumberOfConcerns" : 0.996119733924612,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.2985360129074135,
      "MetricsIntensity" : 0.0630196340764468,
      "Density" : 0.994408201304753
    },
    "euclideanDistance" : 45.04077341083558,
    "generation" : 41,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.022509848058525,
      "LackOfCohesion" : 1.2985360129074135,
      "MetricsIntensity" : 0.06301963407644678,
      "Density" : 3.1035485747527622
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "bab85ada-14c8-4112-af54-c0d269198e42",
    "objectives" : {
      "NumberOfConcerns" : 0.9939024390243902,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2998033438899967,
      "MetricsIntensity" : 0.06308208168531634,
      "Density" : 0.9919850885368127
    },
    "euclideanDistance" : 46.03982346356244,
    "generation" : 40,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0202816901408456,
      "LackOfCohesion" : 1.2998033438899967,
      "MetricsIntensity" : 0.06308208168531634,
      "Density" : 3.0995923121723954
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull.ParallelReduceFullMainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.BasicQueueSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "89372d23-079f-4e74-b769-f045cb3fd19e",
    "objectives" : {
      "NumberOfConcerns" : 0.9952882483370288,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.3002423319103802,
      "MetricsIntensity" : 0.06298634162914678,
      "Density" : 0.9940354147250698
    },
    "euclideanDistance" : 47.039061454326756,
    "generation" : 41,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0230985915492954,
      "LackOfCohesion" : 1.3002423319103802,
      "MetricsIntensity" : 0.06298634162914678,
      "Density" : 3.1023851076207096
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "4a8764d5-1290-46dd-8e3f-cd6bf9cf4e7e",
    "objectives" : {
      "NumberOfConcerns" : 0.9958425720620843,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 1.2986915847202143,
      "MetricsIntensity" : 0.06305665556075632,
      "Density" : 0.9940354147250698
    },
    "euclideanDistance" : 48.038217960370815,
    "generation" : 22,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0230855855855863,
      "LackOfCohesion" : 1.2986915847202143,
      "MetricsIntensity" : 0.06305665556075633,
      "Density" : 3.10419091967404
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "df548e3b-9009-4435-ac1e-a6f582160e00",
    "objectives" : {
      "NumberOfConcerns" : 0.9947339246119734,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.299326673866499,
      "MetricsIntensity" : 0.06308230647311665,
      "Density" : 0.9934762348555451
    },
    "euclideanDistance" : 49.03742162668025,
    "generation" : 16,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0219718309859154,
      "LackOfCohesion" : 1.299326673866499,
      "MetricsIntensity" : 0.06308230647311666,
      "Density" : 3.104251601630752
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.processors.AsyncProcessor.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReplay.ReplayBufferSupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher.DelayMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher.ParallelDispatcher.RailSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb.AmbSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelCollector.ParallelCollectorInnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler.TrampolineWorker.AppendToQueueTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCollect.CollectObserver'"
      } ]
    } ]
  } ]
}