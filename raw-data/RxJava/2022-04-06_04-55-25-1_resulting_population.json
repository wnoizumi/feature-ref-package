{
  "executionId" : "f3104923-bf06-4e36-b0f7-655a8113024f",
  "computingTime" : 5039628,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 27,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2759226713532517,
    "meanNumConcerns" : 1.8084507042253521,
    "meanMetricsIntensity" : 0.06269018858892109,
    "meanLackOfCohesion" : 1.3045137304594558
  },
  "population" : [ {
    "solutionId" : "7b3de35f-f1e3-4118-9a81-7bb682675afe",
    "objectives" : {
      "NumberOfConcerns" : 0.9987538940809969,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3036973449731153,
      "MetricsIntensity" : 0.0626515590611714,
      "Density" : 0.998032904148784
    },
    "euclideanDistance" : 10.183178826076285,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8051801801801801,
      "LackOfCohesion" : 1.3036973449731153,
      "MetricsIntensity" : 0.0626515590611714,
      "Density" : 3.2675644028103044
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.CompletableCache(CompletableSource)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "29d86cfd-b6fd-4c98-a900-b9b33b71e7ee",
    "objectives" : {
      "NumberOfConcerns" : 0.9990654205607477,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.303999277340265,
      "MetricsIntensity" : 0.06265155906117138,
      "Density" : 0.9983905579399142
    },
    "euclideanDistance" : 10.183283102904511,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8057432432432436,
      "LackOfCohesion" : 1.303999277340265,
      "MetricsIntensity" : 0.06265155906117138,
      "Density" : 3.268735362997657
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "c4b503cd-49ac-4cf7-acd6-f031638a772e",
    "objectives" : {
      "NumberOfConcerns" : 0.9990654205607477,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.303999277340265,
      "MetricsIntensity" : 0.06265155906117138,
      "Density" : 0.9983905579399142
    },
    "euclideanDistance" : 10.183283102904511,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8057432432432436,
      "LackOfCohesion" : 1.303999277340265,
      "MetricsIntensity" : 0.06265155906117138,
      "Density" : 3.268735362997657
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "b36897a0-1c8d-470d-9f37-90f04f87da61",
    "objectives" : {
      "NumberOfConcerns" : 1.0009345794392523,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.30313907408704,
      "MetricsIntensity" : 0.06253482119612243,
      "Density" : 1.002145922746781
    },
    "euclideanDistance" : 10.183724688593545,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8060708263069136,
      "LackOfCohesion" : 1.30313907408704,
      "MetricsIntensity" : 0.06253482119612243,
      "Density" : 3.2771929824561403
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.queue, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.done, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.inner, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.upstream, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.sourceFused, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.active, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.consumed, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.request(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.innerComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.drain(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.SingleUsing(Supplier<U>, Function<? super U,? extends SingleSource<? extends T>>, Consumer<? super U>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.keepAliveTime], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.now(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "24fc0a33-e608-43fa-b329-2fcb2cea305f",
    "objectives" : {
      "NumberOfConcerns" : 1.0009345794392523,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3032036568821836,
      "MetricsIntensity" : 0.06253482119612241,
      "Density" : 1.002145922746781
    },
    "euclideanDistance" : 10.183732952997557,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8060708263069136,
      "LackOfCohesion" : 1.3032036568821836,
      "MetricsIntensity" : 0.06253482119612241,
      "Density" : 3.27719298245614
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.queue, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.done, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.inner, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.upstream, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.sourceFused, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.active, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.consumed], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.request(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.innerComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.drain(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.SingleUsing(Supplier<U>, Function<? super U,? extends SingleSource<? extends T>>, Consumer<? super U>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.keepAliveTime], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.now(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "56a861e1-01dd-4e32-bc80-9dc01234f6a9",
    "objectives" : {
      "NumberOfConcerns" : 0.9987538940809969,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3033840302349817,
      "MetricsIntensity" : 0.06267312565882498,
      "Density" : 0.998032904148784
    },
    "euclideanDistance" : 11.166750506286824,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8051801801801801,
      "LackOfCohesion" : 1.3033840302349817,
      "MetricsIntensity" : 0.06267312565882498,
      "Density" : 3.2675644028103044
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.CompletableCache(CompletableSource)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "0a5bdffd-b07b-4213-a787-d7212834dfda",
    "objectives" : {
      "NumberOfConcerns" : 0.9984423676012462,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3039735172375122,
      "MetricsIntensity" : 0.06266531167416788,
      "Density" : 0.998032904148784
    },
    "euclideanDistance" : 11.166791424313827,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8046171171171173,
      "LackOfCohesion" : 1.3039735172375122,
      "MetricsIntensity" : 0.06266531167416789,
      "Density" : 3.2675644028103044
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "e2fe9810-18dd-4648-a793-528679f5d2df",
    "objectives" : {
      "NumberOfConcerns" : 0.9984423676012462,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3039735172375122,
      "MetricsIntensity" : 0.06266531167416788,
      "Density" : 0.998032904148784
    },
    "euclideanDistance" : 11.166791424313827,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.804617117117117,
      "LackOfCohesion" : 1.3039735172375122,
      "MetricsIntensity" : 0.06266531167416788,
      "Density" : 3.2675644028103044
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "8f38d8da-c282-4c92-be4d-789fcfd15ca8",
    "objectives" : {
      "NumberOfConcerns" : 0.9984423676012462,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3039735172375122,
      "MetricsIntensity" : 0.06266531167416788,
      "Density" : 0.998032904148784
    },
    "euclideanDistance" : 11.166791424313827,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.804617117117117,
      "LackOfCohesion" : 1.3039735172375122,
      "MetricsIntensity" : 0.06266531167416788,
      "Density" : 3.2675644028103044
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "c98ca0fa-13a1-441b-9fff-c3424ab8b6f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9984423676012462,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3039735172375122,
      "MetricsIntensity" : 0.06266531167416788,
      "Density" : 0.998032904148784
    },
    "euclideanDistance" : 11.166791424313827,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8046171171171168,
      "LackOfCohesion" : 1.3039735172375122,
      "MetricsIntensity" : 0.06266531167416789,
      "Density" : 3.267564402810304
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "33e95be3-29f6-4364-84a1-9fb05efdbd8c",
    "objectives" : {
      "NumberOfConcerns" : 0.9984423676012462,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3039735172375122,
      "MetricsIntensity" : 0.06266531167416788,
      "Density" : 0.998032904148784
    },
    "euclideanDistance" : 11.166791424313827,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.804617117117117,
      "LackOfCohesion" : 1.3039735172375122,
      "MetricsIntensity" : 0.06266531167416789,
      "Density" : 3.2675644028103035
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "774f798a-aaeb-4063-9629-8087087fea2d",
    "objectives" : {
      "NumberOfConcerns" : 0.9984423676012462,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3039174440836132,
      "MetricsIntensity" : 0.06266274282671185,
      "Density" : 0.998211731044349
    },
    "euclideanDistance" : 11.166800846336423,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8046171171171168,
      "LackOfCohesion" : 1.3039174440836132,
      "MetricsIntensity" : 0.06266274282671186,
      "Density" : 3.2681498829039812
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.core.MemoryPerf.MyRx2Subscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.cancel()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "cc78a240-0308-4b2d-913e-aa8f5c090b57",
    "objectives" : {
      "NumberOfConcerns" : 0.9984423676012462,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3039174440836128,
      "MetricsIntensity" : 0.06266274282671187,
      "Density" : 0.998211731044349
    },
    "euclideanDistance" : 11.166800846336423,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8046171171171166,
      "LackOfCohesion" : 1.3039174440836128,
      "MetricsIntensity" : 0.06266274282671186,
      "Density" : 3.2681498829039817
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.core.MemoryPerf.MyRx2Subscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.cancel()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "c8fb3f9b-bbdf-4321-a716-70f06eab0e43",
    "objectives" : {
      "NumberOfConcerns" : 0.9990654205607477,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3036859626021315,
      "MetricsIntensity" : 0.06267312565882496,
      "Density" : 0.9983905579399142
    },
    "euclideanDistance" : 11.166845589982405,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8057432432432434,
      "LackOfCohesion" : 1.3036859626021315,
      "MetricsIntensity" : 0.06267312565882496,
      "Density" : 3.2687353629976568
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "d9ec0d9b-70b6-4340-8d49-bbb4242cc8b5",
    "objectives" : {
      "NumberOfConcerns" : 0.9990654205607477,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3036859626021315,
      "MetricsIntensity" : 0.06267312565882496,
      "Density" : 0.9983905579399142
    },
    "euclideanDistance" : 11.166845589982405,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8057432432432434,
      "LackOfCohesion" : 1.3036859626021315,
      "MetricsIntensity" : 0.06267312565882498,
      "Density" : 3.2687353629976577
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "967dc02d-03e6-4bd2-9fce-731ee0780c99",
    "objectives" : {
      "NumberOfConcerns" : 0.9990654205607477,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3036859626021315,
      "MetricsIntensity" : 0.06267312565882496,
      "Density" : 0.9983905579399142
    },
    "euclideanDistance" : 11.166845589982405,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8057432432432434,
      "LackOfCohesion" : 1.3036859626021315,
      "MetricsIntensity" : 0.06267312565882498,
      "Density" : 3.268735362997657
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "52aaa454-9ca1-4921-961f-82c56d78e651",
    "objectives" : {
      "NumberOfConcerns" : 1.0012461059190032,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3028422324249183,
      "MetricsIntensity" : 0.06254919359292606,
      "Density" : 1.0007153075822603
    },
    "euclideanDistance" : 11.167149823283312,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.80663293985385,
      "LackOfCohesion" : 1.3028422324249183,
      "MetricsIntensity" : 0.06254919359292606,
      "Density" : 3.272514619883042
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.queue, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.done, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.inner, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.upstream, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.sourceFused, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.active, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.consumed], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.request(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.innerComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.drain(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.SingleUsing(Supplier<U>, Function<? super U,? extends SingleSource<? extends T>>, Consumer<? super U>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.keepAliveTime], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.now(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "ae7d2e1f-8039-4d45-ba04-adedd906f7b5",
    "objectives" : {
      "NumberOfConcerns" : 1.0012461059190032,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3028422324249183,
      "MetricsIntensity" : 0.06254919359292603,
      "Density" : 1.0008941344778255
    },
    "euclideanDistance" : 11.16716584981432,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8066329398538503,
      "LackOfCohesion" : 1.3028422324249183,
      "MetricsIntensity" : 0.06254919359292603,
      "Density" : 3.2730994152046784
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.queue, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.done, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.inner, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.upstream, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.sourceFused, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.active, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.consumed], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.request(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.innerComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.drain(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.SingleUsing(Supplier<U>, Function<? super U,? extends SingleSource<? extends T>>, Consumer<? super U>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.keepAliveTime], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.now(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle.SwitchMapSingleMainObserver.SwitchMapSingleObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "e17fad89-fa50-47ff-b997-f06bb28ad6a4",
    "objectives" : {
      "NumberOfConcerns" : 1.0006230529595015,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031663423783229,
      "MetricsIntensity" : 0.0625766284161669,
      "Density" : 1.0041130185979972
    },
    "euclideanDistance" : 11.167436939538257,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8055087127599778,
      "LackOfCohesion" : 1.3031663423783229,
      "MetricsIntensity" : 0.0625766284161669,
      "Density" : 3.2836257309941517
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.queue, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.done, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.inner, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.upstream, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.sourceFused, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.active, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.consumed], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.request(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.innerComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.drain(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.SingleUsing(Supplier<U>, Function<? super U,? extends SingleSource<? extends T>>, Consumer<? super U>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.keepAliveTime], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.now(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle.SwitchMapSingleMainObserver.SwitchMapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "7064ce4d-a1a2-4da1-8bd6-c24229a659bc",
    "objectives" : {
      "NumberOfConcerns" : 0.9984423676012462,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3036008772394838,
      "MetricsIntensity" : 0.06268430942436541,
      "Density" : 0.998211731044349
    },
    "euclideanDistance" : 12.15304975679781,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8046171171171173,
      "LackOfCohesion" : 1.3036008772394838,
      "MetricsIntensity" : 0.06268430942436541,
      "Density" : 3.2681498829039817
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.core.MemoryPerf.MyRx2Subscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.cancel()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "8bc183de-1e83-4276-98ad-2d6ae000ae49",
    "objectives" : {
      "NumberOfConcerns" : 0.9984423676012462,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.303600877239484,
      "MetricsIntensity" : 0.0626843094243654,
      "Density" : 0.998211731044349
    },
    "euclideanDistance" : 12.15304975679781,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.804617117117117,
      "LackOfCohesion" : 1.303600877239484,
      "MetricsIntensity" : 0.0626843094243654,
      "Density" : 3.2681498829039803
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.core.MemoryPerf.MyRx2Subscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.cancel()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "2f970f08-a8f5-4770-a40b-c58889dacd24",
    "objectives" : {
      "NumberOfConcerns" : 0.9984423676012462,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3038582386381496,
      "MetricsIntensity" : 0.0626725005400524,
      "Density" : 0.998032904148784
    },
    "euclideanDistance" : 12.153062617627432,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8046171171171168,
      "LackOfCohesion" : 1.3038582386381496,
      "MetricsIntensity" : 0.0626725005400524,
      "Density" : 3.2675644028103026
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.innerComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.SimpleScalarSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "f5eb7812-a9f1-4a50-a67a-29c8d0725e9f",
    "objectives" : {
      "NumberOfConcerns" : 0.9984423676012462,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3038021654842502,
      "MetricsIntensity" : 0.06266993169259638,
      "Density" : 0.998211731044349
    },
    "euclideanDistance" : 12.15307127554494,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8046171171171173,
      "LackOfCohesion" : 1.3038021654842502,
      "MetricsIntensity" : 0.06266993169259638,
      "Density" : 3.268149882903981
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.core.MemoryPerf.MyRx2Subscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.innerComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.SimpleScalarSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.cancel()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "4479dc59-5f5e-465b-a267-b1f93287dd8f",
    "objectives" : {
      "NumberOfConcerns" : 1.0006230529595015,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3028214224131498,
      "MetricsIntensity" : 0.06254919359292603,
      "Density" : 1.0003576537911303
    },
    "euclideanDistance" : 12.153321274035761,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8055087127599763,
      "LackOfCohesion" : 1.3028214224131498,
      "MetricsIntensity" : 0.06254919359292603,
      "Density" : 3.271345029239766
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.queue, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.done, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.inner, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.upstream, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.sourceFused, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.active, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.consumed], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.request(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.innerComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.drain(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.SingleUsing(Supplier<U>, Function<? super U,? extends SingleSource<? extends T>>, Consumer<? super U>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.keepAliveTime], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.now(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle.SwitchMapSingleMainObserver.SwitchMapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "35a81375-260b-4ee7-9212-163ac366e605",
    "objectives" : {
      "NumberOfConcerns" : 1.0009345794392523,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3028214224131496,
      "MetricsIntensity" : 0.06254919359292604,
      "Density" : 1.0003576537911303
    },
    "euclideanDistance" : 12.153346927004655,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8060708263069136,
      "LackOfCohesion" : 1.3028214224131496,
      "MetricsIntensity" : 0.06254919359292604,
      "Density" : 3.271345029239766
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.queue, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.done, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.inner, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.upstream, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.sourceFused, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.active, io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.consumed], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.request(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.innerComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.drain(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.SingleUsing(Supplier<U>, Function<? super U,? extends SingleSource<? extends T>>, Consumer<? super U>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.keepAliveTime], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.now(), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable), io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "2ac2f644-35cd-41d1-bacf-a5dade464f1a",
    "objectives" : {
      "NumberOfConcerns" : 0.9981308411214953,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3031787881139787,
      "MetricsIntensity" : 0.06269127363819103,
      "Density" : 0.9976752503576538
    },
    "euclideanDistance" : 13.141302303453594,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.804054054054054,
      "LackOfCohesion" : 1.3031787881139787,
      "MetricsIntensity" : 0.06269127363819103,
      "Density" : 3.266393442622951
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.core.MemoryPerf.MyRx2Subscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.innerComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap.SimpleScalarSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.cancel()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "b535360a-a0d3-48e3-922f-b82c04b14393",
    "objectives" : {
      "NumberOfConcerns" : 0.9981308411214953,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.303637437757411,
      "MetricsIntensity" : 0.06268687827182141,
      "Density" : 0.9976752503576538
    },
    "euclideanDistance" : 13.141347773154939,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8040540540540544,
      "LackOfCohesion" : 1.303637437757411,
      "MetricsIntensity" : 0.06268687827182141,
      "Density" : 3.266393442622952
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorSingle.CollectorSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onNext(CompletableSource)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedTimedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.core.MemoryPerf.MyRx2Subscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.error, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleUsing.subscribeActual(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.MaybeUsing(Supplier<? extends D>, Function<? super D,? extends MaybeSource<? extends T>>, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyAction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberPad4'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext.OnErrorNextSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed.DebounceTimedObserver'"
      } ]
    } ]
  } ]
}