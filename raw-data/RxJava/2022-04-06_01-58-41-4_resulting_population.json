{
  "executionId" : "255481a3-5588-4941-8768-dc0c2c33e6c5",
  "computingTime" : 11542,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.418808411214953,
    "meanNumConcerns" : 1.9070422535211269,
    "meanMetricsIntensity" : 0.06269018858892109,
    "meanLackOfCohesion" : 1.304513730459456
  },
  "population" : [ {
    "solutionId" : "a882a533-242e-4c73-b350-b52e863fe537",
    "objectives" : {
      "NumberOfConcerns" : 1.0011816838995569,
      "NumberOfRefactorings" : 3.0,
      "LackOfCohesion" : 1.3029995316296918,
      "MetricsIntensity" : 0.06339251690555125,
      "Density" : 1.0029044934221767
    },
    "euclideanDistance" : 3.565109897005864,
    "generation" : 0,
    "numberOfRefactorings" : 3,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90607424071991,
      "LackOfCohesion" : 1.3029995316296918,
      "MetricsIntensity" : 0.06339251690555127,
      "Density" : 3.422740524781342,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    } ]
  }, {
    "solutionId" : "12feda05-5b4d-483f-a3eb-70fffde85547",
    "objectives" : {
      "NumberOfConcerns" : 1.0050221565731168,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.297773691299939,
      "MetricsIntensity" : 0.06268581232652394,
      "Density" : 1.0044421664103877
    },
    "euclideanDistance" : 10.183669263372774,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9058823529411764,
      "LackOfCohesion" : 1.297773691299939,
      "MetricsIntensity" : 0.06268581232652394,
      "Density" : 3.4140534262485485,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "faa61ff6-9799-404f-ac7d-536f9b974f67",
    "objectives" : {
      "NumberOfConcerns" : 1.0035450516986706,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2987773207905047,
      "MetricsIntensity" : 0.06271591527078497,
      "Density" : 1.0034170510849136
    },
    "euclideanDistance" : 19.09724336819911,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9052159282108807,
      "LackOfCohesion" : 1.2987773207905047,
      "MetricsIntensity" : 0.06271591527078497,
      "Density" : 3.41453488372093,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "fe54d36e-3452-4fdc-9c28-c513f8677f67",
    "objectives" : {
      "NumberOfConcerns" : 0.9991137370753324,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.300065505314105,
      "MetricsIntensity" : 0.06322283930942128,
      "Density" : 0.9996582948915086
    },
    "euclideanDistance" : 21.08771472710298,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9000000000000001,
      "LackOfCohesion" : 1.300065505314105,
      "MetricsIntensity" : 0.06322283930942128,
      "Density" : 3.4076878276062907,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn.ObserveOnCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle.FilterMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "54b60577-1262-433b-a0da-80b678c9a72c",
    "objectives" : {
      "NumberOfConcerns" : 1.0005908419497784,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.3007321929098152,
      "MetricsIntensity" : 0.0632801936989782,
      "Density" : 1.0005125576627372
    },
    "euclideanDistance" : 24.076920817073372,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9028089887640458,
      "LackOfCohesion" : 1.3007321929098152,
      "MetricsIntensity" : 0.06328019369897821,
      "Density" : 3.410599883517764,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn.ObserveOnCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle.FilterMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "7d3f9a38-f89c-4f64-89b0-2bd30faa5e30",
    "objectives" : {
      "NumberOfConcerns" : 1.0002954209748893,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2999060593621627,
      "MetricsIntensity" : 0.062849923288357,
      "Density" : 1.0013668204339654
    },
    "euclideanDistance" : 25.073831624111882,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902247191011236,
      "LackOfCohesion" : 1.2999060593621627,
      "MetricsIntensity" : 0.06284992328835699,
      "Density" : 3.415501165501164,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.SubscribedDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "6fdba289-795f-407a-bed9-e5214c202e1e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2988278345734223,
      "MetricsIntensity" : 0.06323872824124764,
      "Density" : 1.0037587561934052
    },
    "euclideanDistance" : 27.06840380445894,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9016853932584274,
      "LackOfCohesion" : 1.2988278345734223,
      "MetricsIntensity" : 0.06323872824124764,
      "Density" : 3.423659673659673,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.subjects.CompletableSubject.CompletableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.SubscribedDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "47f08a05-e4d5-4e33-8be7-c1acfa53a570",
    "objectives" : {
      "NumberOfConcerns" : 1.0008862629246678,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2995544088587552,
      "MetricsIntensity" : 0.06319122280971669,
      "Density" : 0.9994874423372629
    },
    "euclideanDistance" : 28.065879342199946,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.904440697020798,
      "LackOfCohesion" : 1.2995544088587552,
      "MetricsIntensity" : 0.06319122280971669,
      "Density" : 3.4090909090909087,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "285c2153-fc91-450c-bcba-eda4bdd0bd00",
    "objectives" : {
      "NumberOfConcerns" : 1.0011816838995569,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.3003341547456726,
      "MetricsIntensity" : 0.06277595051758224,
      "Density" : 1.0
    },
    "euclideanDistance" : 29.063674483763016,
    "generation" : 0,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902863559797867,
      "LackOfCohesion" : 1.3003341547456726,
      "MetricsIntensity" : 0.06277595051758222,
      "Density" : 3.406868451688008,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "efc57bee-63b8-4132-a75d-5ac80a5f7b26",
    "objectives" : {
      "NumberOfConcerns" : 1.0020679468242246,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2971263500310886,
      "MetricsIntensity" : 0.06415164224199296,
      "Density" : 1.004954724073125
    },
    "euclideanDistance" : 30.061615498316733,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9034792368125704,
      "LackOfCohesion" : 1.2971263500310886,
      "MetricsIntensity" : 0.06415164224199298,
      "Density" : 3.4237485448195577,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "d6923b3a-f7d1-4084-82d9-fbf0fd7f0cdd",
    "objectives" : {
      "NumberOfConcerns" : 1.0014771048744462,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.299968395652679,
      "MetricsIntensity" : 0.06280650920445019,
      "Density" : 1.003246198530668
    },
    "euclideanDistance" : 30.061658667042114,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9034250421111736,
      "LackOfCohesion" : 1.299968395652679,
      "MetricsIntensity" : 0.06280650920445019,
      "Density" : 3.4199184624344783,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.subjects.CompletableSubject.CompletableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "005d636c-7b9c-4d0d-8676-52b8a0f3de34",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.3000833510946082,
      "MetricsIntensity" : 0.06326650824610068,
      "Density" : 1.0006834102169828
    },
    "euclideanDistance" : 31.05954904145169,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9027543563799887,
      "LackOfCohesion" : 1.3000833510946082,
      "MetricsIntensity" : 0.06326650824610068,
      "Density" : 3.415160349854228,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn.ObserveOnCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.SubscribedDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "88db6ab2-6106-427f-b679-24603180a993",
    "objectives" : {
      "NumberOfConcerns" : 1.0005908419497784,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.3009877494221531,
      "MetricsIntensity" : 0.06281292678131414,
      "Density" : 1.0013668204339654
    },
    "euclideanDistance" : 31.059627044283342,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9028089887640451,
      "LackOfCohesion" : 1.3009877494221531,
      "MetricsIntensity" : 0.06281292678131414,
      "Density" : 3.4135119394292364,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn.ObserveOnCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "536b9a0d-547a-4e7b-a316-17595207db02",
    "objectives" : {
      "NumberOfConcerns" : 0.9976366322008863,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.3006859678909803,
      "MetricsIntensity" : 0.06321897037004962,
      "Density" : 0.9960703912523492
    },
    "euclideanDistance" : 32.057498587686496,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.899325084364454,
      "LackOfCohesion" : 1.3006859678909803,
      "MetricsIntensity" : 0.0632189703700496,
      "Density" : 3.3994169096209905,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "022e6f11-6f06-4a08-97be-3d9a4741d95f",
    "objectives" : {
      "NumberOfConcerns" : 0.9988183161004431,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.3007197467154707,
      "MetricsIntensity" : 0.0628954306942595,
      "Density" : 0.996753801469332
    },
    "euclideanDistance" : 32.05755735959961,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9005059021922424,
      "LackOfCohesion" : 1.3007197467154707,
      "MetricsIntensity" : 0.0628954306942595,
      "Density" : 3.401749271137025,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn.ObserveOnCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle.FilterMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.SubscribedDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "89d0f02f-b0ee-439b-a9ad-e014a72702f9",
    "objectives" : {
      "NumberOfConcerns" : 1.0002954209748893,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.3018289796143352,
      "MetricsIntensity" : 0.06283835914476252,
      "Density" : 0.9988040321202802
    },
    "euclideanDistance" : 32.05771214193781,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9033164699269256,
      "LackOfCohesion" : 1.3018289796143352,
      "MetricsIntensity" : 0.06283835914476253,
      "Density" : 3.406759906759907,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle.FilterMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "60fe1b79-43f0-4117-9648-8fce5f645fb4",
    "objectives" : {
      "NumberOfConcerns" : 1.0008862629246678,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2996408062869251,
      "MetricsIntensity" : 0.06317505390773026,
      "Density" : 0.9994874423372629
    },
    "euclideanDistance" : 33.05591937568071,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9044406970207983,
      "LackOfCohesion" : 1.2996408062869251,
      "MetricsIntensity" : 0.06317505390773026,
      "Density" : 3.409090909090909,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "7a3bed2f-4691-442c-ae48-d94da2721abf",
    "objectives" : {
      "NumberOfConcerns" : 1.0005908419497784,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.300752130499515,
      "MetricsIntensity" : 0.06328999799276196,
      "Density" : 1.0013668204339654
    },
    "euclideanDistance" : 33.05601124260011,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9028089887640456,
      "LackOfCohesion" : 1.300752130499515,
      "MetricsIntensity" : 0.06328999799276196,
      "Density" : 3.4135119394292373,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "dde5d90b-677c-49ea-a8ed-f8f2d1808aea",
    "objectives" : {
      "NumberOfConcerns" : 0.9997045790251108,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.3016245570684115,
      "MetricsIntensity" : 0.06334428278393035,
      "Density" : 1.001708525542457
    },
    "euclideanDistance" : 33.05602922616679,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902192242833052,
      "LackOfCohesion" : 1.3016245570684115,
      "MetricsIntensity" : 0.06334428278393034,
      "Density" : 3.41865889212828,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.subjects.CompletableSubject.CompletableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "85d4bd02-a655-4329-af55-0bf0ea25cbd9",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2993469266766466,
      "MetricsIntensity" : 0.06332468156456615,
      "Density" : 0.9994874423372629
    },
    "euclideanDistance" : 34.05424037617855,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9027543563799885,
      "LackOfCohesion" : 1.2993469266766466,
      "MetricsIntensity" : 0.06332468156456614,
      "Density" : 3.411078717201166,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.SubscribedDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "012959a2-0ca5-4d07-a1b6-c474f123a769",
    "objectives" : {
      "NumberOfConcerns" : 1.0014771048744462,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.3000308010815063,
      "MetricsIntensity" : 0.06329580040325969,
      "Density" : 1.0006834102169828
    },
    "euclideanDistance" : 34.05434495216698,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9044943820224722,
      "LackOfCohesion" : 1.3000308010815063,
      "MetricsIntensity" : 0.06329580040325969,
      "Density" : 3.413170163170163,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle.FilterMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.SubscribedDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "15154965-5b59-473e-bb5a-e8c1d9d63038",
    "objectives" : {
      "NumberOfConcerns" : 0.9994091580502216,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.3005868246380066,
      "MetricsIntensity" : 0.06322391629252014,
      "Density" : 1.0008542627712285
    },
    "euclideanDistance" : 35.052760965044044,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9016301292861157,
      "LackOfCohesion" : 1.3005868246380066,
      "MetricsIntensity" : 0.06322391629252012,
      "Density" : 3.4157434402332365,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn.ObserveOnCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "66a3f8ef-a3c6-4562-b2fe-b26b99a881ee",
    "objectives" : {
      "NumberOfConcerns" : 1.0023633677991137,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2992704555042625,
      "MetricsIntensity" : 0.06327902392944777,
      "Density" : 1.0018793780967026
    },
    "euclideanDistance" : 35.05282588552279,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9051094890510947,
      "LackOfCohesion" : 1.2992704555042625,
      "MetricsIntensity" : 0.06327902392944777,
      "Density" : 3.4152591729761212,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.SubscribedDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "3bd273db-0239-4eff-bed9-3ca6dbbe0f62",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2998464070916877,
      "MetricsIntensity" : 0.06285234849997874,
      "Density" : 0.9964120963608406
    },
    "euclideanDistance" : 36.0511634786662,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9027543563799894,
      "LackOfCohesion" : 1.2998464070916877,
      "MetricsIntensity" : 0.06285234849997874,
      "Density" : 3.400583090379009,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn.ObserveOnCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "d32749ec-c678-4004-b9a1-dedbfe82a5d8",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.298188522607396,
      "MetricsIntensity" : 0.06417635487651861,
      "Density" : 1.0001708525542456
    },
    "euclideanDistance" : 36.0512101569289,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9027543563799882,
      "LackOfCohesion" : 1.298188522607396,
      "MetricsIntensity" : 0.06417635487651863,
      "Density" : 3.411421911421912,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "d2bd5503-6442-41ea-977f-83839fe0718d",
    "objectives" : {
      "NumberOfConcerns" : 1.0017725258493353,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2974577658318083,
      "MetricsIntensity" : 0.0641669865103049,
      "Density" : 1.0
    },
    "euclideanDistance" : 36.051228304314705,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9050561797752812,
      "LackOfCohesion" : 1.2974577658318083,
      "MetricsIntensity" : 0.06416698651030489,
      "Density" : 3.4088526499708798,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.bufferSize, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.queue, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.done, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.parent], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "c1cb34d7-3a47-4082-bbda-133668edb52e",
    "objectives" : {
      "NumberOfConcerns" : 0.9988183161004431,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2994669760870339,
      "MetricsIntensity" : 0.06421518955700586,
      "Density" : 1.0018793780967026
    },
    "euclideanDistance" : 36.0512709669069,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9005059021922426,
      "LackOfCohesion" : 1.2994669760870339,
      "MetricsIntensity" : 0.06421518955700586,
      "Density" : 3.419241982507289,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.subjects.CompletableSubject.CompletableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification.FlatMapMaybeObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "c316209b-50ff-40aa-9b91-ee220362c605",
    "objectives" : {
      "NumberOfConcerns" : 0.9982274741506647,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2989831562827194,
      "MetricsIntensity" : 0.06427576776261604,
      "Density" : 0.9991457372287715
    },
    "euclideanDistance" : 38.04847222831686,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9004499437570304,
      "LackOfCohesion" : 1.2989831562827194,
      "MetricsIntensity" : 0.06427576776261605,
      "Density" : 3.4119019836639435,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn.ObserveOnCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.parent, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.index, io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.won], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.SubscribedDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  }, {
    "solutionId" : "0b3a5e86-0115-409f-aeff-a5fe07ae0b7e",
    "objectives" : {
      "NumberOfConcerns" : 1.0008862629246678,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.3011948248667908,
      "MetricsIntensity" : 0.06288087077336162,
      "Density" : 0.9996582948915086
    },
    "euclideanDistance" : 39.047383420583074,
    "generation" : 0,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9044406970207979,
      "LackOfCohesion" : 1.3011948248667908,
      "MetricsIntensity" : 0.06288087077336162,
      "Density" : 3.4116618075801757,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet(), io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable), io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntilObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.SubscribedDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.DropAsyncEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher.OtherSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary.WindowBoundaryInnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "18b06fc8-ec39-440a-8edd-b5f9490a3932",
    "objectives" : {
      "NumberOfConcerns" : 0.9988183161004431,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.299707436016002,
      "MetricsIntensity" : 0.06422645189177018,
      "Density" : 0.9986331795660345
    },
    "euclideanDistance" : 40.04607684545723,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9005059021922424,
      "LackOfCohesion" : 1.299707436016002,
      "MetricsIntensity" : 0.06422645189177018,
      "Density" : 3.4081632653061225,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange.IntervalRangeSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOne.TakeLastOneSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle.FilterMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "24a2a667-0465-4f2e-a3c2-b1a7b508a978",
    "objectives" : {
      "NumberOfConcerns" : 0.9970457902511078,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.3044963468695645,
      "MetricsIntensity" : 0.06444176368304261,
      "Density" : 0.9960703912523492
    },
    "euclideanDistance" : 41.04500115717004,
    "generation" : 0,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9014084507042255,
      "LackOfCohesion" : 1.3044963468695645,
      "MetricsIntensity" : 0.06444176368304261,
      "Density" : 3.4093567251461985,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMapPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate.GeneratorSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletablePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce.DebounceObserver.DebounceInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.StrictPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary.BufferBoundarySubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher.TakeUntilMainMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.functions.Functions.ActionConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty.IsEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.exceptions.ProtocolViolationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable.NextObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe.SingleElementObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.StrictPerf.ExternalConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable.IncrementingIterator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe.FlatMapMaybeSubscriber.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilOtherSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter.FilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage.BiConsumerAtomicReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStage.BiConsumerAtomicReference'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate.MissingEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual.EqualSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "54ab51fd-1da6-4dd6-8c49-1de2c271576a",
    "objectives" : {
      "NumberOfConcerns" : 0.9970457902511078,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.3005371146908116,
      "MetricsIntensity" : 0.06329702388876532,
      "Density" : 0.9972663591320691
    },
    "euclideanDistance" : 43.04281640179736,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.899268429938098,
      "LackOfCohesion" : 1.3005371146908116,
      "MetricsIntensity" : 0.06329702388876532,
      "Density" : 3.4054842473745626,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.subjects.CompletableSubject.CompletableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.jdk8.FlowableFromStream.StreamConditionalSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn.ObserveOnCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowSubscribeIntercept'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()]"
      } ]
    } ]
  }, {
    "solutionId" : "bab0899d-4b23-4185-92c5-11b23aed791e",
    "objectives" : {
      "NumberOfConcerns" : 0.9979320531757755,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.2990694668474587,
      "MetricsIntensity" : 0.06423133737855434,
      "Density" : 0.9981206219032974
    },
    "euclideanDistance" : 45.04091273834292,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8998875140607419,
      "LackOfCohesion" : 1.2990694668474587,
      "MetricsIntensity" : 0.06423133737855434,
      "Density" : 3.408401400233372,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.reportDisposableSet()', targetType='io.reactivex.rxjava3.internal.operators.maybe.AbstractMaybeWithUpstream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SubscriberOnNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.setOnce(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeLift'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscriptions.AsyncSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.BooleanSubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.delete(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.toString()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable.IgnoreObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.core.PerfAsyncConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval.IntervalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel(), io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext.NextIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "67f2b25e-750a-4ddb-8d59-bcd6df345fc1",
    "objectives" : {
      "NumberOfConcerns" : 0.9979320531757755,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 1.3026334746716133,
      "MetricsIntensity" : 0.0632638643344291,
      "Density" : 0.9969246540235777
    },
    "euclideanDistance" : 54.034161263356545,
    "generation" : 0,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.903098591549296,
      "LackOfCohesion" : 1.3026334746716133,
      "MetricsIntensity" : 0.0632638643344291,
      "Density" : 3.4082943925233637,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.DisposableHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.set(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.replace(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.dispose(AtomicReference<Disposable>)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.DisposableHelper.trySet(AtomicReference<Disposable>, Disposable)', targetType='io.reactivex.rxjava3.disposables.Disposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.Emitter(MaybeObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate.Emitter.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.ElementAtSubscriber(Subscriber<? super T>, long, T, boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAt.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.BackpressureDropSubscriber(Subscriber<? super T>, Consumer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop.BackpressureDropSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.AmbInnerObserver(AmbCoordinator<T>, int, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.AmbInnerObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.SwitchMapInnerObserver(SwitchMapObserver<T,R>, long, int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.cancel()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onNext(R)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap.SwitchMapInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.FlatMapIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.fastPath()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.IteratorConditionalSubscription(ConditionalSubscriber<? super T>, Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.IteratorConditionalSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription'"
      } ]
    } ]
  } ]
}