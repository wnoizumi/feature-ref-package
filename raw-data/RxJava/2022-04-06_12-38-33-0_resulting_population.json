{
  "executionId" : "27741cf2-81fb-4642-a888-afb5c77b3e52",
  "computingTime" : 3739723,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 43,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.411590774689533,
    "meanNumConcerns" : 1.872676056338028,
    "meanMetricsIntensity" : 0.0626901885889211,
    "meanLackOfCohesion" : 1.3045137304594558
  },
  "population" : [ {
    "solutionId" : "fe020310-6c77-4d7f-875a-32748857ca17",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3029096330656782,
      "MetricsIntensity" : 0.0626918211403247,
      "Density" : 0.9954931530594557
    },
    "euclideanDistance" : 10.182774845005595,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8682432432432436,
      "LackOfCohesion" : 1.3029096330656782,
      "MetricsIntensity" : 0.06269182114032472,
      "Density" : 3.394208037825059
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "02a7f543-7535-4d30-a22c-d5abed7f965b",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3026115716263122,
      "MetricsIntensity" : 0.06269267091115618,
      "Density" : 0.9956664933263997
    },
    "euclideanDistance" : 10.182783159948006,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8688063063063063,
      "LackOfCohesion" : 1.3026115716263122,
      "MetricsIntensity" : 0.06269267091115618,
      "Density" : 3.394799054373523
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "501ec8f3-b143-4826-ac65-579f42b66c35",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3029096330656782,
      "MetricsIntensity" : 0.06267110431350262,
      "Density" : 0.9958398335933437
    },
    "euclideanDistance" : 10.182838110884878,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8688063063063063,
      "LackOfCohesion" : 1.3029096330656782,
      "MetricsIntensity" : 0.06267110431350262,
      "Density" : 3.395390070921986
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "0aff012c-131e-452c-9916-83efa13c683c",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3028128598710789,
      "MetricsIntensity" : 0.06268525739321276,
      "Density" : 0.9961865141272318
    },
    "euclideanDistance" : 10.182889229953258,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693694,
      "LackOfCohesion" : 1.3028128598710789,
      "MetricsIntensity" : 0.06268525739321278,
      "Density" : 3.3965721040189125
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "d6796ba2-7754-4332-9faa-e7253db732e4",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3032561563703835,
      "MetricsIntensity" : 0.06263790464619082,
      "Density" : 0.9980932570636158
    },
    "euclideanDistance" : 10.183102872164195,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8688063063063058,
      "LackOfCohesion" : 1.3032561563703835,
      "MetricsIntensity" : 0.06263790464619083,
      "Density" : 3.40307328605201
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "2e0f372e-4c72-48a6-9d16-19317ba9358b",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.302958094931018,
      "MetricsIntensity" : 0.06263875441702227,
      "Density" : 0.9982665973305599
    },
    "euclideanDistance" : 10.183111229839154,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693698,
      "LackOfCohesion" : 1.302958094931018,
      "MetricsIntensity" : 0.06263875441702228,
      "Density" : 3.4036643026004723
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "63b536d7-3936-4a13-bf90-ffefd2755994",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3031147922382287,
      "MetricsIntensity" : 0.06263196601785144,
      "Density" : 0.9986132778644479
    },
    "euclideanDistance" : 10.183165230559391,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693691,
      "LackOfCohesion" : 1.3031147922382287,
      "MetricsIntensity" : 0.06263196601785144,
      "Density" : 3.4048463356973997
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "5c6add6b-243a-4b7c-97a4-cbfe73b0d49d",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3032561563703837,
      "MetricsIntensity" : 0.06261718781936873,
      "Density" : 0.9984399375975039
    },
    "euclideanDistance" : 10.183166233522194,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693691,
      "LackOfCohesion" : 1.3032561563703837,
      "MetricsIntensity" : 0.06261718781936873,
      "Density" : 3.4042553191489353
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "c2cff00b-392e-41fc-8c8f-8104367aba49",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3032561563703837,
      "MetricsIntensity" : 0.06261718781936873,
      "Density" : 0.9984399375975039
    },
    "euclideanDistance" : 10.183166233522194,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693694,
      "LackOfCohesion" : 1.3032561563703837,
      "MetricsIntensity" : 0.06261718781936873,
      "Density" : 3.4042553191489358
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "02656d93-f802-4fa8-9017-79aee45aca46",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.303256156370384,
      "MetricsIntensity" : 0.06261718781936872,
      "Density" : 0.9984399375975039
    },
    "euclideanDistance" : 10.183166233522194,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693691,
      "LackOfCohesion" : 1.303256156370384,
      "MetricsIntensity" : 0.06261718781936872,
      "Density" : 3.404255319148936
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "36dadb0d-ba93-42d0-b222-a881b4755ca6",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3028933751689853,
      "MetricsIntensity" : 0.06263937953579486,
      "Density" : 0.9986132778644479
    },
    "euclideanDistance" : 10.183166456366042,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8699324324324327,
      "LackOfCohesion" : 1.3028933751689853,
      "MetricsIntensity" : 0.06263937953579486,
      "Density" : 3.4048463356973997
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "3f37fb95-958a-4571-99fa-e5a229533406",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3028933751689855,
      "MetricsIntensity" : 0.06263937953579483,
      "Density" : 0.9986132778644479
    },
    "euclideanDistance" : 10.183166456366044,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.869932432432433,
      "LackOfCohesion" : 1.3028933751689855,
      "MetricsIntensity" : 0.06263937953579485,
      "Density" : 3.4048463356973997
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "9502a7d9-0130-424a-b7d6-b58774740d7e",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3031593831757846,
      "MetricsIntensity" : 0.06263134089907887,
      "Density" : 0.9987866181313919
    },
    "euclideanDistance" : 10.183217444981903,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.869932432432433,
      "LackOfCohesion" : 1.3031593831757846,
      "MetricsIntensity" : 0.06263134089907887,
      "Density" : 3.4054373522458627
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "d00d4af3-4d11-4b6d-81fe-13e42d77bb16",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3031593831757846,
      "MetricsIntensity" : 0.06263134089907887,
      "Density" : 0.9987866181313919
    },
    "euclideanDistance" : 10.183217444981903,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8699324324324325,
      "LackOfCohesion" : 1.3031593831757846,
      "MetricsIntensity" : 0.06263134089907889,
      "Density" : 3.405437352245863
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "dc1837a6-e63e-49d7-ae24-be741f81f675",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3031593831757846,
      "MetricsIntensity" : 0.06263134089907887,
      "Density" : 0.9987866181313919
    },
    "euclideanDistance" : 10.183217444981903,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.869932432432433,
      "LackOfCohesion" : 1.3031593831757846,
      "MetricsIntensity" : 0.06263134089907887,
      "Density" : 3.405437352245863
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "ac38a6de-1c53-4180-be86-6981d9552ad4",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3031593831757846,
      "MetricsIntensity" : 0.06263134089907887,
      "Density" : 0.9987866181313919
    },
    "euclideanDistance" : 10.183217444981903,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.869932432432433,
      "LackOfCohesion" : 1.3031593831757846,
      "MetricsIntensity" : 0.06263134089907887,
      "Density" : 3.405437352245863
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "b0a89a12-c250-4127-b138-922d3cd7a497",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3031593831757846,
      "MetricsIntensity" : 0.06263134089907887,
      "Density" : 0.9987866181313919
    },
    "euclideanDistance" : 10.183217444981903,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.869932432432433,
      "LackOfCohesion" : 1.3031593831757846,
      "MetricsIntensity" : 0.06263134089907889,
      "Density" : 3.4054373522458636
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "acd962cb-9699-4059-bbef-5b5ec7eec89d",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3031593831757844,
      "MetricsIntensity" : 0.06263134089907889,
      "Density" : 0.9987866181313919
    },
    "euclideanDistance" : 10.183217444981903,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.869932432432433,
      "LackOfCohesion" : 1.3031593831757844,
      "MetricsIntensity" : 0.06263134089907889,
      "Density" : 3.4054373522458636
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "6cc4c8f7-6327-419f-a153-92349324f6d5",
    "objectives" : {
      "NumberOfConcerns" : 0.9993983152827918,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3029379661065414,
      "MetricsIntensity" : 0.06263875441702228,
      "Density" : 0.9987866181313919
    },
    "euclideanDistance" : 10.183218678700031,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.870495495495495,
      "LackOfCohesion" : 1.3029379661065414,
      "MetricsIntensity" : 0.0626387544170223,
      "Density" : 3.4054373522458636
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "8c4f2c72-cea3-49d1-9b31-dc155cd03177",
    "objectives" : {
      "NumberOfConcerns" : 0.9993983152827918,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3032360275459072,
      "MetricsIntensity" : 0.06261718781936873,
      "Density" : 0.998959958398336
    },
    "euclideanDistance" : 10.183273690065358,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8704954954954955,
      "LackOfCohesion" : 1.3032360275459072,
      "MetricsIntensity" : 0.06261718781936873,
      "Density" : 3.4060283687943262
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "07d452e8-d9d0-44d0-80c8-bbe27148247b",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3025573786373368,
      "MetricsIntensity" : 0.06267047919473004,
      "Density" : 0.9951464725255676
    },
    "euclideanDistance" : 11.166319557363778,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8676801801801801,
      "LackOfCohesion" : 1.3025573786373368,
      "MetricsIntensity" : 0.06267047919473004,
      "Density" : 3.3930260047281324
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "5b51f0cd-25fe-4bfd-b90f-7dc004aa138e",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.302855993066386,
      "MetricsIntensity" : 0.06266625964301523,
      "Density" : 0.9951464725255676
    },
    "euclideanDistance" : 11.166381260303805,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8682432432432434,
      "LackOfCohesion" : 1.302855993066386,
      "MetricsIntensity" : 0.06266625964301523,
      "Density" : 3.393026004728133
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "1f809631-3bfe-4b13-ad11-503649d58ede",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3029039019420425,
      "MetricsIntensity" : 0.06263727952741827,
      "Density" : 0.9977465765297279
    },
    "euclideanDistance" : 11.166618708784519,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8682432432432432,
      "LackOfCohesion" : 1.3029039019420425,
      "MetricsIntensity" : 0.06263727952741827,
      "Density" : 3.4018912529550835
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "c0baa9ff-ae11-403a-88ce-323c6b093208",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.30283918218001,
      "MetricsIntensity" : 0.06263790464619082,
      "Density" : 0.9980932570636158
    },
    "euclideanDistance" : 11.166669039180164,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8688063063063065,
      "LackOfCohesion" : 1.30283918218001,
      "MetricsIntensity" : 0.06263790464619082,
      "Density" : 3.4030732860520105
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "11b62357-e74b-4341-9461-2a764a823cb7",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.302762537809887,
      "MetricsIntensity" : 0.0626387544170223,
      "Density" : 0.9982665973305599
    },
    "euclideanDistance" : 11.166675596697917,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8688063063063063,
      "LackOfCohesion" : 1.302762537809887,
      "MetricsIntensity" : 0.0626387544170223,
      "Density" : 3.403664302600473
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "291bd6ce-9345-4eb3-9eac-c955e9e8d302",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.302883773117566,
      "MetricsIntensity" : 0.06261656270059617,
      "Density" : 0.9982665973305599
    },
    "euclideanDistance" : 11.166716521375145,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693691,
      "LackOfCohesion" : 1.302883773117566,
      "MetricsIntensity" : 0.06261656270059618,
      "Density" : 3.403664302600473
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "de413912-0689-4f22-9770-e3584abca3c9",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3028837731175658,
      "MetricsIntensity" : 0.06263727952741825,
      "Density" : 0.9982665973305599
    },
    "euclideanDistance" : 11.166716637562482,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693691,
      "LackOfCohesion" : 1.3028837731175658,
      "MetricsIntensity" : 0.06263727952741825,
      "Density" : 3.403664302600473
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "f378fc01-6506-4ab0-acba-4c6ab3fe7447",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3028071287474432,
      "MetricsIntensity" : 0.06263812929824973,
      "Density" : 0.9984399375975039
    },
    "euclideanDistance" : 11.166723197436928,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693691,
      "LackOfCohesion" : 1.3028071287474432,
      "MetricsIntensity" : 0.06263812929824973,
      "Density" : 3.4042553191489358
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "5c504bce-d086-4bb0-b241-e66b44a01b28",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.303182387546615,
      "MetricsIntensity" : 0.06261234314888134,
      "Density" : 0.9982665973305599
    },
    "euclideanDistance" : 11.166778255185143,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.869932432432433,
      "LackOfCohesion" : 1.303182387546615,
      "MetricsIntensity" : 0.06261234314888134,
      "Density" : 3.4036643026004723
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "c93a9395-f21b-472d-bead-9b956ad7fd6e",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3023728644129675,
      "MetricsIntensity" : 0.06269057090277957,
      "Density" : 0.9949731322586237
    },
    "euclideanDistance" : 12.15260751284824,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8676801801801801,
      "LackOfCohesion" : 1.3023728644129675,
      "MetricsIntensity" : 0.06269057090277957,
      "Density" : 3.392434988179669
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "c607bc23-74a6-4957-8e42-595bd2ce040f",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3027721229644,
      "MetricsIntensity" : 0.06260492963093793,
      "Density" : 0.9972265557288958
    },
    "euclideanDistance" : 12.152834567573848,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8676801801801801,
      "LackOfCohesion" : 1.3027721229644,
      "MetricsIntensity" : 0.06260492963093793,
      "Density" : 3.400118203309693
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "456bb6ba-e5a3-426f-8407-4aa874f2d122",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3026747967801173,
      "MetricsIntensity" : 0.06263727952741825,
      "Density" : 0.9973998959958398
    },
    "euclideanDistance" : 12.152838526421096,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8676801801801801,
      "LackOfCohesion" : 1.3026747967801173,
      "MetricsIntensity" : 0.06263727952741825,
      "Density" : 3.400709219858156
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "5f0e3e7f-b28d-4a60-b251-5893eb80013e",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3026747967801173,
      "MetricsIntensity" : 0.06263727952741825,
      "Density" : 0.9973998959958398
    },
    "euclideanDistance" : 12.152838526421096,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8676801801801801,
      "LackOfCohesion" : 1.3026747967801173,
      "MetricsIntensity" : 0.06263727952741825,
      "Density" : 3.4007092198581557
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "7e2e0a08-bccb-4e51-bc9c-3c32a6f8ae23",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3026747967801173,
      "MetricsIntensity" : 0.06263727952741825,
      "Density" : 0.9973998959958398
    },
    "euclideanDistance" : 12.152838526421096,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8676801801801801,
      "LackOfCohesion" : 1.3026747967801173,
      "MetricsIntensity" : 0.06263727952741825,
      "Density" : 3.400709219858156
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "b4d75093-7690-47c4-8101-0f5371f87cb2",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3027193877176733,
      "MetricsIntensity" : 0.06263665440864567,
      "Density" : 0.9975732362627838
    },
    "euclideanDistance" : 12.152882236952518,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8682432432432434,
      "LackOfCohesion" : 1.3027193877176733,
      "MetricsIntensity" : 0.06263665440864569,
      "Density" : 3.4013002364066196
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "88979fd8-6b8d-498d-a171-e33ea556673b",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3027965850774792,
      "MetricsIntensity" : 0.06260430451216535,
      "Density" : 0.9979199167966719
    },
    "euclideanDistance" : 12.152968242803963,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693691,
      "LackOfCohesion" : 1.3027965850774792,
      "MetricsIntensity" : 0.06260430451216537,
      "Density" : 3.402482269503546
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "9f29256c-11fb-4eca-a7c8-8b7db979f9ae",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3026992588931965,
      "MetricsIntensity" : 0.0626366544086457,
      "Density" : 0.9980932570636158
    },
    "euclideanDistance" : 12.152972211299646,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693691,
      "LackOfCohesion" : 1.3026992588931965,
      "MetricsIntensity" : 0.0626366544086457,
      "Density" : 3.4030732860520096
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "d81e9a47-fa64-415b-aabd-192c44000f7e",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3026992588931967,
      "MetricsIntensity" : 0.06261593758182359,
      "Density" : 0.9986132778644479
    },
    "euclideanDistance" : 12.153039552058193,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.869932432432433,
      "LackOfCohesion" : 1.3026992588931967,
      "MetricsIntensity" : 0.06261593758182359,
      "Density" : 3.4048463356973997
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "3317b725-4be2-45fd-9b3c-f36d1c588387",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3025037386380445,
      "MetricsIntensity" : 0.06259689099422194,
      "Density" : 0.9970532154619518
    },
    "euclideanDistance" : 13.141169739264877,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8676801801801801,
      "LackOfCohesion" : 1.3025037386380445,
      "MetricsIntensity" : 0.06259689099422196,
      "Density" : 3.399527186761229
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "82366018-4ca3-4c36-8c80-ddf688107f2e",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3025282007511239,
      "MetricsIntensity" : 0.06259626587544939,
      "Density" : 0.9977465765297279
    },
    "euclideanDistance" : 13.141293351358513,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8693693693693703,
      "LackOfCohesion" : 1.3025282007511239,
      "MetricsIntensity" : 0.06259626587544939,
      "Density" : 3.401891252955083
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "d85d60e9-59c5-4852-a07c-3411cafb9828",
    "objectives" : {
      "NumberOfConcerns" : 0.9972924187725631,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.3020941729733462,
      "MetricsIntensity" : 0.06265799635424034,
      "Density" : 0.9942797711908476
    },
    "euclideanDistance" : 15.122253790084956,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8665540540540544,
      "LackOfCohesion" : 1.3020941729733462,
      "MetricsIntensity" : 0.06265799635424035,
      "Density" : 3.3900709219858145
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "6b1309b7-dda8-4ca5-ab06-cdd913a600ed",
    "objectives" : {
      "NumberOfConcerns" : 0.9963898916967509,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.3020547540254126,
      "MetricsIntensity" : 0.06262729716201883,
      "Density" : 0.9956664933263997
    },
    "euclideanDistance" : 15.122282015061032,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8648648648648654,
      "LackOfCohesion" : 1.3020547540254126,
      "MetricsIntensity" : 0.06262729716201883,
      "Density" : 3.3947990543735234
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.PoolWorker'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isDone()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "7a28d1e8-9106-45c9-bf41-d3401cb3cfc8",
    "objectives" : {
      "NumberOfConcerns" : 0.9969915764139591,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3021063722609079,
      "MetricsIntensity" : 0.06266096566841008,
      "Density" : 0.9939330906569596
    },
    "euclideanDistance" : 17.107930985173052,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8659909909909913,
      "LackOfCohesion" : 1.3021063722609079,
      "MetricsIntensity" : 0.06266096566841006,
      "Density" : 3.3888888888888884
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRange'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.replay(InnerSubscription<T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSerialized'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSerialized'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe.TakeUntilMainMaybeObserver.TakeUntilOtherMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeCount'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.subscribers.ResourceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onComplete(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isCancelled(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.isDone(), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onError(Throwable), io.reactivex.rxjava3.internal.observers.FutureMultiObserver.cancel(boolean)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.disposables.ActionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle.FlatMapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isCancelled()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess.DoOnSuccess'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin.LeftRightEndSubscriber'"
      } ]
    } ]
  } ]
}