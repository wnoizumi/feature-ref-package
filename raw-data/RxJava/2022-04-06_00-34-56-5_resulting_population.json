{
  "executionId" : "b3787742-9541-4910-aff1-639db775f821",
  "computingTime" : 793975,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.388727484020918,
    "meanNumConcerns" : 1.9047887323943664,
    "meanMetricsIntensity" : 0.0626901885889211,
    "meanLackOfCohesion" : 1.304513730459456
  },
  "population" : [ {
    "solutionId" : "4929f982-9199-47ab-8bdc-9eec62c48027",
    "objectives" : {
      "NumberOfConcerns" : 1.0032534753031648,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3001256687495721,
      "MetricsIntensity" : 0.06240594772904595,
      "Density" : 1.0003429355281208
    },
    "euclideanDistance" : 11.166979214685696,
    "generation" : 8,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9013452914798203,
      "LackOfCohesion" : 1.3001256687495721,
      "MetricsIntensity" : 0.06240594772904596,
      "Density" : 3.372254335260115
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "42583430-cf01-4719-bf80-0c78b7bc2a31",
    "objectives" : {
      "NumberOfConcerns" : 1.0041407867494825,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2998609595004882,
      "MetricsIntensity" : 0.06243114332149701,
      "Density" : 1.0012002743484225
    },
    "euclideanDistance" : 11.16710512490409,
    "generation" : 33,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9030269058295965,
      "LackOfCohesion" : 1.2998609595004882,
      "MetricsIntensity" : 0.06243114332149701,
      "Density" : 3.37514450867052
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "8e1fcf48-ca22-47a9-bbc1-ac6af193f48f",
    "objectives" : {
      "NumberOfConcerns" : 1.0044365572315883,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3008124819363855,
      "MetricsIntensity" : 0.062365510358445564,
      "Density" : 1.000514403292181
    },
    "euclideanDistance" : 11.167180684431596,
    "generation" : 32,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9035874439461884,
      "LackOfCohesion" : 1.3008124819363855,
      "MetricsIntensity" : 0.062365510358445564,
      "Density" : 3.372832369942197
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "c4568d4c-ed86-4435-9578-56f28b810142",
    "objectives" : {
      "NumberOfConcerns" : 1.0047323277136941,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2995461701231985,
      "MetricsIntensity" : 0.0624121688629845,
      "Density" : 1.0030864197530864
    },
    "euclideanDistance" : 11.167290850647264,
    "generation" : 22,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90414798206278,
      "LackOfCohesion" : 1.2995461701231985,
      "MetricsIntensity" : 0.06241216886298449,
      "Density" : 3.3815028901734103
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "b99c0996-5d1e-4cf4-b883-01f9bd9170eb",
    "objectives" : {
      "NumberOfConcerns" : 1.0047323277136941,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2995461701231987,
      "MetricsIntensity" : 0.06241216886298447,
      "Density" : 1.0030864197530864
    },
    "euclideanDistance" : 11.167290850647264,
    "generation" : 26,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9041479820627798,
      "LackOfCohesion" : 1.2995461701231987,
      "MetricsIntensity" : 0.06241216886298448,
      "Density" : 3.381502890173411
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "b347a1c6-d860-4c9f-bd32-656412e3f39e",
    "objectives" : {
      "NumberOfConcerns" : 1.0020703933747412,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3016090074960642,
      "MetricsIntensity" : 0.062388132323571585,
      "Density" : 0.9994855967078189
    },
    "euclideanDistance" : 13.141582660347812,
    "generation" : 22,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9001682557487378,
      "LackOfCohesion" : 1.3016090074960642,
      "MetricsIntensity" : 0.062388132323571585,
      "Density" : 3.371312897628689
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "d053b003-e5ae-4f30-ac15-ca8e7365ab46",
    "objectives" : {
      "NumberOfConcerns" : 1.002661934338953,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.301279711616558,
      "MetricsIntensity" : 0.06240322764508013,
      "Density" : 1.0
    },
    "euclideanDistance" : 13.141634373442969,
    "generation" : 38,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9012899607403255,
      "LackOfCohesion" : 1.301279711616558,
      "MetricsIntensity" : 0.062403227645080134,
      "Density" : 3.373048004626952
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "e2bbab46-c67b-48f3-957c-1913f1cc0794",
    "objectives" : {
      "NumberOfConcerns" : 1.0044365572315883,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2989522101609745,
      "MetricsIntensity" : 0.062402099131800705,
      "Density" : 1.0022290809327847
    },
    "euclideanDistance" : 13.141709431973785,
    "generation" : 21,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9046550757150866,
      "LackOfCohesion" : 1.2989522101609745,
      "MetricsIntensity" : 0.062402099131800705,
      "Density" : 3.380566801619433
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "96ecadcf-e698-4f64-bd64-629082c83138",
    "objectives" : {
      "NumberOfConcerns" : 1.0041407867494825,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2989880031913559,
      "MetricsIntensity" : 0.0624273098749387,
      "Density" : 1.0027434842249656
    },
    "euclideanDistance" : 13.141729726950816,
    "generation" : 20,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9040942232192934,
      "LackOfCohesion" : 1.2989880031913559,
      "MetricsIntensity" : 0.0624273098749387,
      "Density" : 3.3823019086176975
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "35adb947-df1b-40a2-8f4e-fc9025b9fe34",
    "objectives" : {
      "NumberOfConcerns" : 1.0047323277136941,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2988376724637551,
      "MetricsIntensity" : 0.062427309874938684,
      "Density" : 1.0029149519890261
    },
    "euclideanDistance" : 13.141773164976842,
    "generation" : 21,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.905215928210881,
      "LackOfCohesion" : 1.2988376724637551,
      "MetricsIntensity" : 0.06242730987493869,
      "Density" : 3.3828802776171205
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "c38418e3-b685-4a76-9ca7-1bd07a030063",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3004564719177922,
      "MetricsIntensity" : 0.06244182186914328,
      "Density" : 0.9993141289437586
    },
    "euclideanDistance" : 14.131386425553494,
    "generation" : 36,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8984856982613574,
      "LackOfCohesion" : 1.3004564719177922,
      "MetricsIntensity" : 0.06244182186914329,
      "Density" : 3.3707345286292663
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "1a3815a1-0dbb-4557-817a-135ba18bf1bb",
    "objectives" : {
      "NumberOfConcerns" : 1.002957704821059,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.2993183208828065,
      "MetricsIntensity" : 0.06243098534338414,
      "Density" : 1.0017146776406036
    },
    "euclideanDistance" : 15.122879427542005,
    "generation" : 27,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9029180695847367,
      "LackOfCohesion" : 1.2993183208828065,
      "MetricsIntensity" : 0.062430985343384135,
      "Density" : 3.3807870370370363
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "cdccfd17-d7ec-461c-a7a0-320df71bc80c",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3007876731644334,
      "MetricsIntensity" : 0.062445506069233776,
      "Density" : 0.9982853223593965
    },
    "euclideanDistance" : 16.11497817549633,
    "generation" : 11,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8973063973063968,
      "LackOfCohesion" : 1.3007876731644334,
      "MetricsIntensity" : 0.062445506069233776,
      "Density" : 3.3692129629629632
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "bf486a50-bfbf-4555-8da6-c01ee7c6f696",
    "objectives" : {
      "NumberOfConcerns" : 1.0032534753031648,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2978558927507033,
      "MetricsIntensity" : 0.06253251185363766,
      "Density" : 1.002400548696845
    },
    "euclideanDistance" : 16.1151998010922,
    "generation" : 8,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9034792368125701,
      "LackOfCohesion" : 1.2978558927507033,
      "MetricsIntensity" : 0.06253251185363767,
      "Density" : 3.383101851851852
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "6287ce30-bb49-4a57-97f9-1c4ed163fed2",
    "objectives" : {
      "NumberOfConcerns" : 1.002957704821059,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2989746404600138,
      "MetricsIntensity" : 0.062489973541844226,
      "Density" : 1.001886145404664
    },
    "euclideanDistance" : 16.115239375180415,
    "generation" : 35,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9018508132361187,
      "LackOfCohesion" : 1.2989746404600138,
      "MetricsIntensity" : 0.062489973541844226,
      "Density" : 3.37941006362059
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "b234f13b-a67a-4bd8-9647-ea09748ade8f",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2994756662116325,
      "MetricsIntensity" : 0.06254703257948734,
      "Density" : 0.9987997256515775
    },
    "euclideanDistance" : 17.108172274583815,
    "generation" : 34,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896745230078563,
      "LackOfCohesion" : 1.2994756662116325,
      "MetricsIntensity" : 0.06254703257948735,
      "Density" : 3.370949074074073
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "b15a360d-0938-48ef-9ef4-7354385899e5",
    "objectives" : {
      "NumberOfConcerns" : 1.0014788524105294,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3019065202219087,
      "MetricsIntensity" : 0.06241316023892797,
      "Density" : 0.9986282578875172
    },
    "euclideanDistance" : 17.108450376327024,
    "generation" : 35,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9001122334455667,
      "LackOfCohesion" : 1.3019065202219087,
      "MetricsIntensity" : 0.06241316023892798,
      "Density" : 3.3703703703703707
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "5e5f17c1-fe13-4535-86a0-072addfdc02d",
    "objectives" : {
      "NumberOfConcerns" : 1.0038450162673764,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2989996955812804,
      "MetricsIntensity" : 0.06239964834204204,
      "Density" : 1.0001714677640603
    },
    "euclideanDistance" : 17.10845819198351,
    "generation" : 32,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9035333707234994,
      "LackOfCohesion" : 1.2989996955812804,
      "MetricsIntensity" : 0.062399648342042036,
      "Density" : 3.373626373626374
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "575e4ae4-caf4-4a09-8018-57f3e55ece7e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.300079069850398,
      "MetricsIntensity" : 0.062460685382952116,
      "Density" : 0.9981138545953361
    },
    "euclideanDistance" : 18.102219151027224,
    "generation" : 28,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898371701291409,
      "LackOfCohesion" : 1.300079069850398,
      "MetricsIntensity" : 0.06246068538295211,
      "Density" : 3.370584829183555
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "153a2412-6e0e-45fb-b4d3-66ec5968f865",
    "objectives" : {
      "NumberOfConcerns" : 1.0035492457852706,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2991001217028941,
      "MetricsIntensity" : 0.06236966285711854,
      "Density" : 1.001543209876543
    },
    "euclideanDistance" : 18.102534380329715,
    "generation" : 33,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9029725182277062,
      "LackOfCohesion" : 1.2991001217028941,
      "MetricsIntensity" : 0.06236966285711855,
      "Density" : 3.3782533256217464
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "74fe92e5-a7e3-4b1f-9f57-d7671199e313",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2998064763658832,
      "MetricsIntensity" : 0.06255078233942761,
      "Density" : 0.9977709190672154
    },
    "euclideanDistance" : 19.096753670859705,
    "generation" : 19,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8955642897248737,
      "LackOfCohesion" : 1.2998064763658832,
      "MetricsIntensity" : 0.06255078233942761,
      "Density" : 3.369426751592356
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "9162cc87-3c00-4ad7-8e47-bef8a7aa6173",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.3023119058421329,
      "MetricsIntensity" : 0.06238772709797734,
      "Density" : 0.9987997256515775
    },
    "euclideanDistance" : 19.097116980950084,
    "generation" : 28,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8995510662177333,
      "LackOfCohesion" : 1.3023119058421329,
      "MetricsIntensity" : 0.06238772709797734,
      "Density" : 3.3709490740740735
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "34b341c8-e83a-4f6e-9bc3-d9c6f2520813",
    "objectives" : {
      "NumberOfConcerns" : 1.0038450162673764,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2982904428242428,
      "MetricsIntensity" : 0.06241479093070564,
      "Density" : 1.0020576131687242
    },
    "euclideanDistance" : 19.09715366113102,
    "generation" : 31,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9046015712682383,
      "LackOfCohesion" : 1.2982904428242428,
      "MetricsIntensity" : 0.062414790930705656,
      "Density" : 3.3819444444444446
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "d46fca10-23d0-469a-8eaf-64f5448759f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.3012998872963804,
      "MetricsIntensity" : 0.062480711195806796,
      "Density" : 0.997599451303155
    },
    "euclideanDistance" : 20.09205604376064,
    "generation" : 27,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8966872543514879,
      "LackOfCohesion" : 1.3012998872963804,
      "MetricsIntensity" : 0.062480711195806796,
      "Density" : 3.3688477127967573
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "29c93fe2-9e94-4761-85ef-fb61e3ad0d86",
    "objectives" : {
      "NumberOfConcerns" : 1.0014788524105294,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.3009490444739606,
      "MetricsIntensity" : 0.0623619364082581,
      "Density" : 0.9986282578875172
    },
    "euclideanDistance" : 20.092201863327652,
    "generation" : 34,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9001122334455667,
      "LackOfCohesion" : 1.3009490444739606,
      "MetricsIntensity" : 0.06236193640825811,
      "Density" : 3.3703703703703707
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "b7415604-c688-48f5-a4d1-d17ab35aa8e8",
    "objectives" : {
      "NumberOfConcerns" : 1.0032534753031648,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.2985055359835207,
      "MetricsIntensity" : 0.062359564754531145,
      "Density" : 1.0006858710562414
    },
    "euclideanDistance" : 20.09223469628343,
    "generation" : 38,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9034792368125701,
      "LackOfCohesion" : 1.2985055359835207,
      "MetricsIntensity" : 0.062359564754531145,
      "Density" : 3.3773148148148135
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "6ab27a51-3206-4c60-a5b1-4ad064155286",
    "objectives" : {
      "NumberOfConcerns" : 1.0035492457852706,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.2983909293707192,
      "MetricsIntensity" : 0.062384790666587975,
      "Density" : 1.0013717421124828
    },
    "euclideanDistance" : 20.092276310119672,
    "generation" : 36,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9040404040404033,
      "LackOfCohesion" : 1.2983909293707192,
      "MetricsIntensity" : 0.06238479066658798,
      "Density" : 3.379629629629629
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "b0c7d0fd-f7db-436b-80db-cc8a1df308ee",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.3002162027689876,
      "MetricsIntensity" : 0.06252342450279787,
      "Density" : 0.997085048010974
    },
    "euclideanDistance" : 21.087558034277528,
    "generation" : 16,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8950028074115666,
      "LackOfCohesion" : 1.3002162027689876,
      "MetricsIntensity" : 0.06252342450279785,
      "Density" : 3.3671105964099604
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "221af38e-7564-4b70-8286-9bbdbd04cc16",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.297382998445717,
      "MetricsIntensity" : 0.0626193573381605,
      "Density" : 1.0012002743484225
    },
    "euclideanDistance" : 21.087719017984483,
    "generation" : 35,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.900617630544638,
      "LackOfCohesion" : 1.297382998445717,
      "MetricsIntensity" : 0.0626193573381605,
      "Density" : 3.381007527504342
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "a410e04c-27d6-4489-945a-33ca0db5f591",
    "objectives" : {
      "NumberOfConcerns" : 1.0020703933747412,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.298771051158273,
      "MetricsIntensity" : 0.06241846107496334,
      "Density" : 1.0008573388203017
    },
    "euclideanDistance" : 21.0878297317092,
    "generation" : 32,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9023020774845592,
      "LackOfCohesion" : 1.298771051158273,
      "MetricsIntensity" : 0.06241846107496334,
      "Density" : 3.3798494499131433
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "47aaedef-05fb-4502-9533-12215cdfc890",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.2999225387871027,
      "MetricsIntensity" : 0.06261206486679552,
      "Density" : 0.9979423868312757
    },
    "euclideanDistance" : 22.083615233662474,
    "generation" : 28,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896067415730337,
      "LackOfCohesion" : 1.2999225387871027,
      "MetricsIntensity" : 0.06261206486679552,
      "Density" : 3.371958285052143
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "c05da59a-c09d-4a8a-8334-e3f2d13c8bfb",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.301490500206477,
      "MetricsIntensity" : 0.062445135141363836,
      "Density" : 0.997599451303155
    },
    "euclideanDistance" : 22.08373174413011,
    "generation" : 29,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8966872543514883,
      "LackOfCohesion" : 1.301490500206477,
      "MetricsIntensity" : 0.062445135141363836,
      "Density" : 3.3688477127967564
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "06917e9a-57fa-486b-bbf0-39f536f4b8c4",
    "objectives" : {
      "NumberOfConcerns" : 1.0017746228926354,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.2988228860462168,
      "MetricsIntensity" : 0.06242822164800964,
      "Density" : 0.9996570644718793
    },
    "euclideanDistance" : 22.08378828040596,
    "generation" : 28,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9006734006734003,
      "LackOfCohesion" : 1.2988228860462168,
      "MetricsIntensity" : 0.06242822164800963,
      "Density" : 3.373842592592592
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "b02f545e-2bed-413b-af86-06db8a7d852b",
    "objectives" : {
      "NumberOfConcerns" : 1.002366163856847,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.298461665915113,
      "MetricsIntensity" : 0.06249854703181289,
      "Density" : 0.9996570644718793
    },
    "euclideanDistance" : 22.083794079352074,
    "generation" : 38,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9028635597978663,
      "LackOfCohesion" : 1.298461665915113,
      "MetricsIntensity" : 0.06249854703181289,
      "Density" : 3.375796178343949
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "80cd705b-9972-4525-9dc7-9e7921183e93",
    "objectives" : {
      "NumberOfConcerns" : 1.002366163856847,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.297307742575759,
      "MetricsIntensity" : 0.06252004870894368,
      "Density" : 1.001543209876543
    },
    "euclideanDistance" : 22.083811782913124,
    "generation" : 34,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9028635597978663,
      "LackOfCohesion" : 1.297307742575759,
      "MetricsIntensity" : 0.06252004870894368,
      "Density" : 3.382165605095541
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "4b0471eb-da10-4d17-8623-cc93e9f040de",
    "objectives" : {
      "NumberOfConcerns" : 1.0005915409642119,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.3025440823858871,
      "MetricsIntensity" : 0.06242363346423301,
      "Density" : 0.9982853223593965
    },
    "euclideanDistance" : 22.083891749717953,
    "generation" : 26,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8994946659180236,
      "LackOfCohesion" : 1.3025440823858871,
      "MetricsIntensity" : 0.06242363346423302,
      "Density" : 3.371163867979154
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "3649f85a-33df-4028-b11c-caccac386cbe",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.2995068283262112,
      "MetricsIntensity" : 0.06253865343748626,
      "Density" : 0.9969135802469136
    },
    "euclideanDistance" : 23.07992460278027,
    "generation" : 34,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8960674157303372,
      "LackOfCohesion" : 1.2995068283262112,
      "MetricsIntensity" : 0.06253865343748626,
      "Density" : 3.3684820393974517
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "7191f746-6a08-4e44-910f-c4edd01d202c",
    "objectives" : {
      "NumberOfConcerns" : 1.0017746228926354,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.2985279797785279,
      "MetricsIntensity" : 0.06244748346825774,
      "Density" : 1.0003429355281208
    },
    "euclideanDistance" : 23.080171424540847,
    "generation" : 34,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9006734006734003,
      "LackOfCohesion" : 1.2985279797785279,
      "MetricsIntensity" : 0.06244748346825774,
      "Density" : 3.376157407407407
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "ebe68766-f0c4-4ebf-9795-dee720f7c9a1",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2992340706287546,
      "MetricsIntensity" : 0.06262881113124699,
      "Density" : 0.9965706447187929
    },
    "euclideanDistance" : 24.076515284041353,
    "generation" : 23,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8932584269662922,
      "LackOfCohesion" : 1.2992340706287546,
      "MetricsIntensity" : 0.062628811131247,
      "Density" : 3.3673232908458868
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "64a1c3f6-e48a-4490-b6b7-e4e46ed4b94b",
    "objectives" : {
      "NumberOfConcerns" : 1.002366163856847,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2986676565878796,
      "MetricsIntensity" : 0.062331883315499,
      "Density" : 1.0
    },
    "euclideanDistance" : 24.076859447867992,
    "generation" : 37,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9017957351290689,
      "LackOfCohesion" : 1.2986676565878796,
      "MetricsIntensity" : 0.062331883315499007,
      "Density" : 3.375
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "3bb2a84a-4ae3-4ec6-a8dd-8f362d99d7fc",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.3014335829638093,
      "MetricsIntensity" : 0.06250656150440852,
      "Density" : 0.9969135802469136
    },
    "euclideanDistance" : 25.073661830888625,
    "generation" : 29,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896629213483146,
      "LackOfCohesion" : 1.3014335829638093,
      "MetricsIntensity" : 0.0625065615044085,
      "Density" : 3.3684820393974517
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "da15fd67-a4aa-4db4-86f3-413d1e2bdd06",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.3006470683984164,
      "MetricsIntensity" : 0.06248239951607311,
      "Density" : 0.9996570644718793
    },
    "euclideanDistance" : 25.073777330905834,
    "generation" : 29,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8988764044943822,
      "LackOfCohesion" : 1.3006470683984164,
      "MetricsIntensity" : 0.062482399516073116,
      "Density" : 3.377752027809967
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "cb110c86-b286-47e0-91de-aa0da47805eb",
    "objectives" : {
      "NumberOfConcerns" : 1.002957704821059,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.3001456897557062,
      "MetricsIntensity" : 0.06239289925799894,
      "Density" : 0.9994855967078189
    },
    "euclideanDistance" : 25.07387419814007,
    "generation" : 22,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9039865244244807,
      "LackOfCohesion" : 1.3001456897557062,
      "MetricsIntensity" : 0.062392899257998936,
      "Density" : 3.3752171395483495
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "0022bdba-89e8-48e2-a2c0-05c187817aa5",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2983084006080843,
      "MetricsIntensity" : 0.06263397295887893,
      "Density" : 0.9962277091906722
    },
    "euclideanDistance" : 26.070598203811766,
    "generation" : 36,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8948847667228779,
      "LackOfCohesion" : 1.2983084006080843,
      "MetricsIntensity" : 0.06263397295887893,
      "Density" : 3.368115942028985
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc3cdc1b-a6e2-4cfa-b111-45288b1210e2",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.298523676591896,
      "MetricsIntensity" : 0.06264411276971062,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 26.07060419280431,
    "generation" : 29,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8943226531759418,
      "LackOfCohesion" : 1.298523676591896,
      "MetricsIntensity" : 0.06264411276971062,
      "Density" : 3.3686956521739138
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "342b36ec-0246-4cb4-b455-0bf773efcea4",
    "objectives" : {
      "NumberOfConcerns" : 1.0005915409642119,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2978241452128054,
      "MetricsIntensity" : 0.06255293835504303,
      "Density" : 0.9984567901234568
    },
    "euclideanDistance" : 26.070795150428133,
    "generation" : 28,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9005617977528089,
      "LackOfCohesion" : 1.2978241452128054,
      "MetricsIntensity" : 0.06255293835504301,
      "Density" : 3.3736964078794904
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "49d8a9a8-267b-49f7-bf25-464692f703ac",
    "objectives" : {
      "NumberOfConcerns" : 1.0002957704821058,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.301766635657779,
      "MetricsIntensity" : 0.06233656922921741,
      "Density" : 0.9972565157750343
    },
    "euclideanDistance" : 26.070933899810246,
    "generation" : 23,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8989331836047165,
      "LackOfCohesion" : 1.301766635657779,
      "MetricsIntensity" : 0.06233656922921741,
      "Density" : 3.367689635205559
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "f602fbb5-d5f4-40bf-8304-cd2d86412821",
    "objectives" : {
      "NumberOfConcerns" : 1.002661934338953,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.297843101312945,
      "MetricsIntensity" : 0.062372238586802485,
      "Density" : 1.000514403292181
    },
    "euclideanDistance" : 26.070954087596014,
    "generation" : 34,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9034250421111736,
      "LackOfCohesion" : 1.297843101312945,
      "MetricsIntensity" : 0.06237223858680249,
      "Density" : 3.3786913723219447
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "364ff1d5-f60b-404c-beed-0a440e3cb74c",
    "objectives" : {
      "NumberOfConcerns" : 1.0020703933747412,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.3003967399170224,
      "MetricsIntensity" : 0.062363178794058616,
      "Density" : 1.0006858710562414
    },
    "euclideanDistance" : 26.07106515148673,
    "generation" : 37,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902302077484559,
      "LackOfCohesion" : 1.3003967399170224,
      "MetricsIntensity" : 0.062363178794058616,
      "Density" : 3.3792704111175444
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "6d6e3467-ef9a-4ad4-bd68-fa2718770084",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2994646718366882,
      "MetricsIntensity" : 0.06266490610314815,
      "Density" : 0.9960562414266118
    },
    "euclideanDistance" : 27.06800672586566,
    "generation" : 22,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8931984260820682,
      "LackOfCohesion" : 1.2994646718366882,
      "MetricsIntensity" : 0.06266490610314815,
      "Density" : 3.367536231884057
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "2013d25b-215e-498c-841b-5e41b4c4f659",
    "objectives" : {
      "NumberOfConcerns" : 1.0008873114463177,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2968141528624515,
      "MetricsIntensity" : 0.06252970879082341,
      "Density" : 0.9987997256515775
    },
    "euclideanDistance" : 27.068154965082524,
    "generation" : 28,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9011235955056178,
      "LackOfCohesion" : 1.2968141528624515,
      "MetricsIntensity" : 0.06252970879082341,
      "Density" : 3.3748551564310554
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "bec22410-1d90-4ced-a4b9-54c3545f6ff6",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.297570507828431,
      "MetricsIntensity" : 0.062462332278699906,
      "Density" : 1.0001714677640603
    },
    "euclideanDistance" : 27.068252645751052,
    "generation" : 35,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.900617630544638,
      "LackOfCohesion" : 1.297570507828431,
      "MetricsIntensity" : 0.062462332278699906,
      "Density" : 3.3775332947307475
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "afddd0c8-6793-4d8b-8f22-34ad56b1f171",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2997459657888684,
      "MetricsIntensity" : 0.06266417560366579,
      "Density" : 0.9958847736625515
    },
    "euclideanDistance" : 28.06558013705609,
    "generation" : 18,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8926363125351322,
      "LackOfCohesion" : 1.2997459657888684,
      "MetricsIntensity" : 0.06266417560366579,
      "Density" : 3.3669565217391306
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "8d8ec57d-8f6e-4342-a28c-3f8366c6e2ba",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.3019984262106177,
      "MetricsIntensity" : 0.06241109722222936,
      "Density" : 0.9974279835390947
    },
    "euclideanDistance" : 28.06587547495667,
    "generation" : 38,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898876404494382,
      "LackOfCohesion" : 1.3019984262106177,
      "MetricsIntensity" : 0.06241109722222936,
      "Density" : 3.370220162224798
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "209728d9-4b2d-4c10-bca1-4323fced5fc5",
    "objectives" : {
      "NumberOfConcerns" : 0.9994084590357882,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.3024107899512942,
      "MetricsIntensity" : 0.062432981600130284,
      "Density" : 0.9974279835390947
    },
    "euclideanDistance" : 28.06588412277996,
    "generation" : 27,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8983146067415728,
      "LackOfCohesion" : 1.3024107899512942,
      "MetricsIntensity" : 0.062432981600130284,
      "Density" : 3.3702201622247974
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "9e10b837-d752-4d5e-b81a-2ed9c306cb3a",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.2985385825947802,
      "MetricsIntensity" : 0.06267009281425384,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 29.063284210221994,
    "generation" : 30,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.894825646794151,
      "LackOfCohesion" : 1.2985385825947802,
      "MetricsIntensity" : 0.06267009281425384,
      "Density" : 3.368329466357308
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "797354aa-c227-4be1-8993-0f4dde938ece",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.2968595395935218,
      "MetricsIntensity" : 0.06247753413939862,
      "Density" : 1.0
    },
    "euclideanDistance" : 29.063518638858003,
    "generation" : 18,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9016853932584272,
      "LackOfCohesion" : 1.2968595395935218,
      "MetricsIntensity" : 0.06247753413939861,
      "Density" : 3.37891077636153
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "5530b451-af3f-46d9-b733-d73c9957f77a",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2986860903619044,
      "MetricsIntensity" : 0.06261639100824576,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 30.061165761391916,
    "generation" : 27,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8926363125351326,
      "LackOfCohesion" : 1.2986860903619044,
      "MetricsIntensity" : 0.06261639100824576,
      "Density" : 3.3663768115942028
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete(), io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "b0425439-5db0-4ea5-a2a4-6412ab781152",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2971782016930755,
      "MetricsIntensity" : 0.0626088574274343,
      "Density" : 0.9986282578875172
    },
    "euclideanDistance" : 30.061275812196136,
    "generation" : 34,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897133220910624,
      "LackOfCohesion" : 1.2971782016930755,
      "MetricsIntensity" : 0.0626088574274343,
      "Density" : 3.37623188405797
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "ab744493-26bf-4cca-8708-65acb8febd24",
    "objectives" : {
      "NumberOfConcerns" : 1.0008873114463177,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3006736337369624,
      "MetricsIntensity" : 0.06231023746519488,
      "Density" : 0.9972565157750343
    },
    "euclideanDistance" : 30.061469199552796,
    "generation" : 4,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9000561482313305,
      "LackOfCohesion" : 1.3006736337369624,
      "MetricsIntensity" : 0.062310237465194894,
      "Density" : 3.3676896352055596
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "8856161f-c256-45bb-87dc-0464042a0c0a",
    "objectives" : {
      "NumberOfConcerns" : 1.0014788524105294,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3005231219970472,
      "MetricsIntensity" : 0.06231023746519488,
      "Density" : 0.9974279835390947
    },
    "euclideanDistance" : 30.06148807745076,
    "generation" : 37,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9011791128579447,
      "LackOfCohesion" : 1.3005231219970472,
      "MetricsIntensity" : 0.06231023746519489,
      "Density" : 3.3682686740011585
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "df7a6342-60e5-44c7-b62b-2673563822b6",
    "objectives" : {
      "NumberOfConcerns" : 0.9952676722863059,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.299977014823321,
      "MetricsIntensity" : 0.06270031367535242,
      "Density" : 0.9953703703703703
    },
    "euclideanDistance" : 31.059220715950254,
    "generation" : 14,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8925759280089993,
      "LackOfCohesion" : 1.299977014823321,
      "MetricsIntensity" : 0.06270031367535242,
      "Density" : 3.3671693735498835
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "f05c206f-be9c-4e97-86f0-838656fb8d00",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.297349834104901,
      "MetricsIntensity" : 0.062381809626439945,
      "Density" : 0.9998285322359396
    },
    "euclideanDistance" : 31.05944353557605,
    "generation" : 35,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901685393258427,
      "LackOfCohesion" : 1.297349834104901,
      "MetricsIntensity" : 0.06238180962643993,
      "Density" : 3.3783314020857476
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "a25c3e75-e130-4d61-913b-91122e118b8f",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.298496136041893,
      "MetricsIntensity" : 0.06247675859856307,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 32.05736280099792,
    "generation" : 35,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8948847667228779,
      "LackOfCohesion" : 1.298496136041893,
      "MetricsIntensity" : 0.06247675859856307,
      "Density" : 3.3646376811594196
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "ed40ebbc-ca4a-4d0d-9ad6-5ac42dd5c115",
    "objectives" : {
      "NumberOfConcerns" : 0.9994084590357882,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2969967551223036,
      "MetricsIntensity" : 0.06254030247456438,
      "Density" : 0.9989711934156379
    },
    "euclideanDistance" : 32.05749323614524,
    "generation" : 34,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8983146067415733,
      "LackOfCohesion" : 1.2969967551223036,
      "MetricsIntensity" : 0.06254030247456438,
      "Density" : 3.375434530706837
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "b4294800-51b4-4b0e-b9c1-714787927cca",
    "objectives" : {
      "NumberOfConcerns" : 1.0014788524105294,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2998139324453717,
      "MetricsIntensity" : 0.06232534982885694,
      "Density" : 0.9993141289437586
    },
    "euclideanDistance" : 32.057682220153445,
    "generation" : 33,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9022471910112362,
      "LackOfCohesion" : 1.2998139324453717,
      "MetricsIntensity" : 0.06232534982885693,
      "Density" : 3.376593279258401
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "24702065-9e6b-46a4-89af-df6e2a0224ee",
    "objectives" : {
      "NumberOfConcerns" : 0.9952676722863059,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2989165001470042,
      "MetricsIntensity" : 0.06265250025930784,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 33.05559087363876,
    "generation" : 14,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.892575928008999,
      "LackOfCohesion" : 1.2989165001470042,
      "MetricsIntensity" : 0.06265250025930785,
      "Density" : 3.366589327146171
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "cc511879-c151-4bea-84e1-853ca83bd681",
    "objectives" : {
      "NumberOfConcerns" : 0.9952676722863059,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.298916500147004,
      "MetricsIntensity" : 0.06265250025930787,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 33.05559087363876,
    "generation" : 30,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.892575928008999,
      "LackOfCohesion" : 1.298916500147004,
      "MetricsIntensity" : 0.06265250025930787,
      "Density" : 3.3665893271461713
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "43d99b0f-5274-4edf-ba3b-4f00a91747f2",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.301093535014027,
      "MetricsIntensity" : 0.06262070717496657,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 33.05570315917038,
    "generation" : 29,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.894263217097863,
      "LackOfCohesion" : 1.301093535014027,
      "MetricsIntensity" : 0.06262070717496658,
      "Density" : 3.366589327146171
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "a13c553b-923a-4f4b-84af-f915efb260c8",
    "objectives" : {
      "NumberOfConcerns" : 0.9988169180715765,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2963402666617918,
      "MetricsIntensity" : 0.06257770557033912,
      "Density" : 0.9989711934156379
    },
    "euclideanDistance" : 33.05571044066824,
    "generation" : 28,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8982574480044971,
      "LackOfCohesion" : 1.2963402666617918,
      "MetricsIntensity" : 0.06257770557033912,
      "Density" : 3.3773913043478268
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "08bea7a2-193b-4fa3-a402-e4ee6fa95724",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.3025507966377083,
      "MetricsIntensity" : 0.0623686366786496,
      "Density" : 0.9969135802469136
    },
    "euclideanDistance" : 33.055918889930425,
    "generation" : 27,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8988764044943818,
      "LackOfCohesion" : 1.3025507966377083,
      "MetricsIntensity" : 0.06236863667864959,
      "Density" : 3.3684820393974513
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "5bce8aa9-69d5-4eba-9e36-b9866fc5c11a",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.3023356503382248,
      "MetricsIntensity" : 0.06235850297613765,
      "Density" : 0.9987997256515775
    },
    "euclideanDistance" : 33.05597627693058,
    "generation" : 28,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.899438202247191,
      "LackOfCohesion" : 1.3023356503382248,
      "MetricsIntensity" : 0.06235850297613766,
      "Density" : 3.3748551564310545
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "3740c00c-ae1e-4223-9527-c36a076c2a7e",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2992913575533827,
      "MetricsIntensity" : 0.06262502089718944,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 34.054008695425956,
    "generation" : 30,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8953292065278569,
      "LackOfCohesion" : 1.2992913575533827,
      "MetricsIntensity" : 0.06262502089718944,
      "Density" : 3.369704004643064
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "ab0e5240-4585-45ed-87b8-58b56c9c0ad0",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2963653821932368,
      "MetricsIntensity" : 0.06248717441748826,
      "Density" : 0.9972565157750343
    },
    "euclideanDistance" : 34.05405110931572,
    "generation" : 34,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8999437886453066,
      "LackOfCohesion" : 1.2963653821932368,
      "MetricsIntensity" : 0.06248717441748825,
      "Density" : 3.371594202898551
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "38684cff-ff56-492a-a99a-785cdbc501ac",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2991407240462027,
      "MetricsIntensity" : 0.06235049808336235,
      "Density" : 0.9979423868312757
    },
    "euclideanDistance" : 34.05417671533753,
    "generation" : 35,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8999437886453068,
      "LackOfCohesion" : 1.2991407240462027,
      "MetricsIntensity" : 0.06235049808336235,
      "Density" : 3.373913043478261
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "bbc8cb53-cb5b-4dc9-a45f-aa68fee124b7",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2979895211881785,
      "MetricsIntensity" : 0.06265768261366479,
      "Density" : 0.9948559670781894
    },
    "euclideanDistance" : 35.05238348167087,
    "generation" : 29,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8942037141249295,
      "LackOfCohesion" : 1.2979895211881785,
      "MetricsIntensity" : 0.06265768261366479,
      "Density" : 3.3673824724318044
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "f091ce74-44b2-4b61-b94e-7b361465d644",
    "objectives" : {
      "NumberOfConcerns" : 0.9952676722863059,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2982050570102324,
      "MetricsIntensity" : 0.06266783466325428,
      "Density" : 0.9950274348422496
    },
    "euclideanDistance" : 35.052387949512585,
    "generation" : 28,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8936409679234663,
      "LackOfCohesion" : 1.2982050570102324,
      "MetricsIntensity" : 0.06266783466325426,
      "Density" : 3.3679628554846195
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "761f9d3f-2828-46f8-bc66-ce8ae199bea1",
    "objectives" : {
      "NumberOfConcerns" : 1.0002957704821058,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2975608375205656,
      "MetricsIntensity" : 0.062477479714393026,
      "Density" : 0.9993141289437586
    },
    "euclideanDistance" : 35.05262883036434,
    "generation" : 35,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90106801573918,
      "LackOfCohesion" : 1.2975608375205656,
      "MetricsIntensity" : 0.06247747971439302,
      "Density" : 3.378550724637681
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "53b14a7f-f3d0-4f0b-a4b1-fcc66e3f779a",
    "objectives" : {
      "NumberOfConcerns" : 0.9946761313220941,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.3001101541929396,
      "MetricsIntensity" : 0.0627263433161239,
      "Density" : 0.994684499314129
    },
    "euclideanDistance" : 36.05097777961895,
    "generation" : 17,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8925154755205407,
      "LackOfCohesion" : 1.3001101541929396,
      "MetricsIntensity" : 0.0627263433161239,
      "Density" : 3.3668020893789903
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "ff8a6841-522c-461f-b16b-e95580bb073d",
    "objectives" : {
      "NumberOfConcerns" : 1.0002957704821058,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.3003886121164367,
      "MetricsIntensity" : 0.06231951729024936,
      "Density" : 0.9965706447187929
    },
    "euclideanDistance" : 36.051194695087666,
    "generation" : 24,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9000000000000006,
      "LackOfCohesion" : 1.3003886121164367,
      "MetricsIntensity" : 0.06231951729024936,
      "Density" : 3.3673232908458863
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "09ad04fc-4618-4951-aeaa-d5b4e4292359",
    "objectives" : {
      "NumberOfConcerns" : 0.9949719018041999,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2981376553381443,
      "MetricsIntensity" : 0.06256497747529681,
      "Density" : 0.9941700960219478
    },
    "euclideanDistance" : 37.04952656936141,
    "generation" : 24,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.892013498312711,
      "LackOfCohesion" : 1.2981376553381443,
      "MetricsIntensity" : 0.06256497747529681,
      "Density" : 3.3631090487238975
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "17f647a4-c246-4390-9adb-cf58d602c3e8",
    "objectives" : {
      "NumberOfConcerns" : 0.9943803608399882,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2994288215110035,
      "MetricsIntensity" : 0.06268792171306216,
      "Density" : 0.9945130315500685
    },
    "euclideanDistance" : 37.04956536195329,
    "generation" : 26,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.891952729319077,
      "LackOfCohesion" : 1.2994288215110035,
      "MetricsIntensity" : 0.06268792171306216,
      "Density" : 3.366221706326176
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "c076cfa2-8faa-4bf8-bdd9-5b8a24cf8202",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2966144968186046,
      "MetricsIntensity" : 0.06259162654164274,
      "Density" : 0.9977709190672154
    },
    "euclideanDistance" : 37.049633694400086,
    "generation" : 34,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965129358830144,
      "LackOfCohesion" : 1.2966144968186046,
      "MetricsIntensity" : 0.06259162654164274,
      "Density" : 3.375290023201856
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "c1d5d570-c10d-4ee6-bafe-2bdbd0c0ea93",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2983762771238108,
      "MetricsIntensity" : 0.062463830392453575,
      "Density" : 0.9967421124828533
    },
    "euclideanDistance" : 37.04968341329898,
    "generation" : 28,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976377952755907,
      "LackOfCohesion" : 1.2983762771238108,
      "MetricsIntensity" : 0.06246383039245359,
      "Density" : 3.371809744779582
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "42f009df-e2c1-4ccb-ae9c-637becf12ddd",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2972293981890695,
      "MetricsIntensity" : 0.06267376970762968,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 38.04824545538188,
    "generation" : 35,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.894203714124929,
      "LackOfCohesion" : 1.2972293981890695,
      "MetricsIntensity" : 0.06267376970762968,
      "Density" : 3.369704004643065
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "dac4f3fd-e180-4214-9dc5-a2505a3c4af4",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.30087106456497,
      "MetricsIntensity" : 0.06232313443067829,
      "Density" : 0.9953703703703703
    },
    "euclideanDistance" : 38.04844223297587,
    "generation" : 28,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976953344575604,
      "LackOfCohesion" : 1.30087106456497,
      "MetricsIntensity" : 0.06232313443067828,
      "Density" : 3.3652173913043475
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "0d4db36f-05ca-4419-b3c6-d1859d67b5f3",
    "objectives" : {
      "NumberOfConcerns" : 0.9943803608399882,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.2987172581316153,
      "MetricsIntensity" : 0.06270328299439834,
      "Density" : 0.9943415637860082
    },
    "euclideanDistance" : 39.04699867679671,
    "generation" : 13,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8930180180180178,
      "LackOfCohesion" : 1.2987172581316153,
      "MetricsIntensity" : 0.06270328299439835,
      "Density" : 3.3675958188153308
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "e047b7dd-b846-4102-a6c0-315c5f0d39a0",
    "objectives" : {
      "NumberOfConcerns" : 0.9976338361431529,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.2959050936363425,
      "MetricsIntensity" : 0.06253996036198055,
      "Density" : 0.9974279835390947
    },
    "euclideanDistance" : 39.04706669023576,
    "generation" : 15,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970753655793027,
      "LackOfCohesion" : 1.2959050936363425,
      "MetricsIntensity" : 0.06253996036198055,
      "Density" : 3.3741299303944317
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "3c321e22-1a08-4781-96d8-ba6fa65eea4d",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.295790210529903,
      "MetricsIntensity" : 0.06256524713269139,
      "Density" : 0.9981138545953361
    },
    "euclideanDistance" : 39.047088002133634,
    "generation" : 26,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976377952755907,
      "LackOfCohesion" : 1.295790210529903,
      "MetricsIntensity" : 0.06256524713269139,
      "Density" : 3.3764501160092806
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "376f4445-4381-43fa-8852-0fe8908e4d35",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.2996040908765174,
      "MetricsIntensity" : 0.06254844301773319,
      "Density" : 0.9960562414266118
    },
    "euclideanDistance" : 39.047109325908465,
    "generation" : 30,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8947664603263927,
      "LackOfCohesion" : 1.2996040908765174,
      "MetricsIntensity" : 0.06254844301773319,
      "Density" : 3.3714451538015084
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "f975de7a-b810-43bd-a7a2-c56382f04f75",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.3006342251726661,
      "MetricsIntensity" : 0.062367447517126265,
      "Density" : 0.9977709190672154
    },
    "euclideanDistance" : 39.04727022542761,
    "generation" : 26,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8988195615514332,
      "LackOfCohesion" : 1.3006342251726661,
      "MetricsIntensity" : 0.06236744751712627,
      "Density" : 3.3733333333333326
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "b17250bb-a941-490d-87f7-67ac49e147ab",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.296947179147668,
      "MetricsIntensity" : 0.06256076301351167,
      "Density" : 0.9945130315500685
    },
    "euclideanDistance" : 40.045801135363334,
    "generation" : 33,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.893138357705287,
      "LackOfCohesion" : 1.296947179147668,
      "MetricsIntensity" : 0.06256076301351166,
      "Density" : 3.3642691415313224
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "014a910c-bcb4-4a22-87d3-ea973f02c245",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3001612293941542,
      "MetricsIntensity" : 0.062338272802598925,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 40.04599568771649,
    "generation" : 34,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8987626546681655,
      "LackOfCohesion" : 1.3001612293941542,
      "MetricsIntensity" : 0.062338272802598925,
      "Density" : 3.366589327146171
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "f9fa7676-550d-494b-9ac6-e632ca3a49bc",
    "objectives" : {
      "NumberOfConcerns" : 0.9943803608399882,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.298433970847013,
      "MetricsIntensity" : 0.06259019086064195,
      "Density" : 0.9953703703703703
    },
    "euclideanDistance" : 41.04472442086652,
    "generation" : 31,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8919527293190774,
      "LackOfCohesion" : 1.298433970847013,
      "MetricsIntensity" : 0.06259019086064195,
      "Density" : 3.36912362159025
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "f3bca1f7-ef0a-4908-9a0a-65119e7da4cc",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2971221365451828,
      "MetricsIntensity" : 0.062495786558825275,
      "Density" : 0.9981138545953361
    },
    "euclideanDistance" : 41.04484994867653,
    "generation" : 34,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8987626546681664,
      "LackOfCohesion" : 1.2971221365451828,
      "MetricsIntensity" : 0.06249578655882528,
      "Density" : 3.3764501160092806
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "7bbe5728-2270-4722-9ce8-470b4334cc2d",
    "objectives" : {
      "NumberOfConcerns" : 0.9949719018041999,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2975253441679624,
      "MetricsIntensity" : 0.06269906344268351,
      "Density" : 0.994684499314129
    },
    "euclideanDistance" : 42.04363054649147,
    "generation" : 17,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.894144144144144,
      "LackOfCohesion" : 1.2975253441679624,
      "MetricsIntensity" : 0.06269906344268351,
      "Density" : 3.368757259001161
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "b16105df-4d87-4d49-b049-35b77bf11583",
    "objectives" : {
      "NumberOfConcerns" : 0.9937888198757764,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2995617102441832,
      "MetricsIntensity" : 0.06271395958914669,
      "Density" : 0.9938271604938271
    },
    "euclideanDistance" : 42.043645207366424,
    "generation" : 14,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8918918918918919,
      "LackOfCohesion" : 1.2995617102441832,
      "MetricsIntensity" : 0.0627139595891467,
      "Density" : 3.365853658536585
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "afc7cc69-d256-4645-b10f-1592d434a20d",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2961195950866504,
      "MetricsIntensity" : 0.06260134731035304,
      "Density" : 0.997085048010974
    },
    "euclideanDistance" : 42.04366491041231,
    "generation" : 32,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8947664603263927,
      "LackOfCohesion" : 1.2961195950866504,
      "MetricsIntensity" : 0.06260134731035304,
      "Density" : 3.3749274521183974
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "ab24ad6b-6094-411a-9752-c30642a4c994",
    "objectives" : {
      "NumberOfConcerns" : 0.9976338361431529,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2996511604378154,
      "MetricsIntensity" : 0.062472867195196145,
      "Density" : 0.9972565157750343
    },
    "euclideanDistance" : 42.0438198767338,
    "generation" : 27,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970753655793027,
      "LackOfCohesion" : 1.2996511604378154,
      "MetricsIntensity" : 0.062472867195196145,
      "Density" : 3.3735498839907194
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "1a9f5735-78ca-4468-a04f-8a7fb1e3e597",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.2994408165808582,
      "MetricsIntensity" : 0.062438459205644385,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 43.04275285343334,
    "generation" : 32,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965129358830144,
      "LackOfCohesion" : 1.2994408165808582,
      "MetricsIntensity" : 0.062438459205644385,
      "Density" : 3.368329466357308
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "9a65f8da-9da0-4bd9-873e-19b22a05d098",
    "objectives" : {
      "NumberOfConcerns" : 0.9988169180715765,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.2991861590282514,
      "MetricsIntensity" : 0.06234420426733356,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 43.04277932126347,
    "generation" : 37,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8993250843644542,
      "LackOfCohesion" : 1.2991861590282514,
      "MetricsIntensity" : 0.06234420426733356,
      "Density" : 3.368329466357308
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "373f0377-dd67-47be-a797-64f42acb5340",
    "objectives" : {
      "NumberOfConcerns" : 0.9937888198757764,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.298849797212441,
      "MetricsIntensity" : 0.06272934588507952,
      "Density" : 0.9936556927297668
    },
    "euclideanDistance" : 44.041638407542905,
    "generation" : 11,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8929577464788734,
      "LackOfCohesion" : 1.298849797212441,
      "MetricsIntensity" : 0.06272934588507952,
      "Density" : 3.3672283556072053
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "aa8afb19-c37a-460a-829d-ca62e1f93f20",
    "objectives" : {
      "NumberOfConcerns" : 0.9946761313220941,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2974583120258503,
      "MetricsIntensity" : 0.06259612590501731,
      "Density" : 0.9958847736625515
    },
    "euclideanDistance" : 44.04166758235953,
    "generation" : 32,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8925154755205404,
      "LackOfCohesion" : 1.2974583120258503,
      "MetricsIntensity" : 0.06259612590501731,
      "Density" : 3.3708647707486934
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "d63a012e-48e5-47b1-98ba-ab97a4649bd0",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2962513114223497,
      "MetricsIntensity" : 0.0625760452790685,
      "Density" : 0.9969135802469136
    },
    "euclideanDistance" : 44.041702096362975,
    "generation" : 17,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8964546989307824,
      "LackOfCohesion" : 1.2962513114223497,
      "MetricsIntensity" : 0.0625760452790685,
      "Density" : 3.3743470690655832
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "df74fb0d-0209-4668-907a-e673dc4f1580",
    "objectives" : {
      "NumberOfConcerns" : 0.9940845903578823,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.2985854622570656,
      "MetricsIntensity" : 0.06271989821748611,
      "Density" : 0.9943415637860082
    },
    "euclideanDistance" : 45.04072798375574,
    "generation" : 18,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8924549549549543,
      "LackOfCohesion" : 1.2985854622570656,
      "MetricsIntensity" : 0.06271989821748611,
      "Density" : 3.3675958188153308
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "bc948c3e-60a3-44f8-a3ff-5a3859baa19d",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.301655631305374,
      "MetricsIntensity" : 0.062355232459181745,
      "Density" : 0.9950274348422496
    },
    "euclideanDistance" : 45.04091627235609,
    "generation" : 22,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976377952755905,
      "LackOfCohesion" : 1.301655631305374,
      "MetricsIntensity" : 0.06235523245918176,
      "Density" : 3.3660092807424586
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "5ed7798d-530a-454c-8ef6-aa99d51403d1",
    "objectives" : {
      "NumberOfConcerns" : 0.9946761313220941,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2967455587252754,
      "MetricsIntensity" : 0.06261143495482703,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 46.039833783688074,
    "generation" : 36,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8935810810810814,
      "LackOfCohesion" : 1.2967455587252754,
      "MetricsIntensity" : 0.06261143495482704,
      "Density" : 3.3722415795586524
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "d251424a-f841-4c3f-955f-7612f5bea9f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9934930493936706,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2987819248014965,
      "MetricsIntensity" : 0.06262632790056546,
      "Density" : 0.9948559670781894
    },
    "euclideanDistance" : 46.039847125936056,
    "generation" : 16,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8913288288288286,
      "LackOfCohesion" : 1.2987819248014965,
      "MetricsIntensity" : 0.06262632790056546,
      "Density" : 3.3693379790940767
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "ecef2457-aa2e-4bc7-959d-a5be0a233505",
    "objectives" : {
      "NumberOfConcerns" : 0.9940845903578823,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.2978729593473854,
      "MetricsIntensity" : 0.06273528810171401,
      "Density" : 0.9941700960219478
    },
    "euclideanDistance" : 47.03897307858229,
    "generation" : 16,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8935211267605638,
      "LackOfCohesion" : 1.2978729593473854,
      "MetricsIntensity" : 0.06273528810171401,
      "Density" : 3.368971528181289
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "329a4a88-35e8-4d6c-8f4b-d90f2ce48c14",
    "objectives" : {
      "NumberOfConcerns" : 0.9940845903578823,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.2978729593473857,
      "MetricsIntensity" : 0.062735288101714,
      "Density" : 0.9941700960219478
    },
    "euclideanDistance" : 47.03897307858229,
    "generation" : 17,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8935211267605632,
      "LackOfCohesion" : 1.2978729593473857,
      "MetricsIntensity" : 0.062735288101714,
      "Density" : 3.368971528181289
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "c4e7d356-acc7-41dc-8b9a-04bf6a137dda",
    "objectives" : {
      "NumberOfConcerns" : 0.9949719018041999,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.2964661514712303,
      "MetricsIntensity" : 0.06263749108726314,
      "Density" : 0.9965706447187929
    },
    "euclideanDistance" : 47.03900371045815,
    "generation" : 28,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8941441441441451,
      "LackOfCohesion" : 1.2964661514712303,
      "MetricsIntensity" : 0.06263749108726314,
      "Density" : 3.3751451800232273
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "bcadebc6-1056-4200-8116-bc4218864a0d",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.299690074142483,
      "MetricsIntensity" : 0.06247903961836306,
      "Density" : 0.9960562414266118
    },
    "euclideanDistance" : 47.03910661042487,
    "generation" : 29,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963963963963966,
      "LackOfCohesion" : 1.299690074142483,
      "MetricsIntensity" : 0.06247903961836306,
      "Density" : 3.3734030197444813
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "94b6a041-1529-468a-b650-c3bcb3d4a381",
    "objectives" : {
      "NumberOfConcerns" : 0.9934930493936706,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 1.2980695406003024,
      "MetricsIntensity" : 0.06264166444949623,
      "Density" : 0.994684499314129
    },
    "euclideanDistance" : 48.03816539172504,
    "generation" : 16,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.892394366197183,
      "LackOfCohesion" : 1.2980695406003024,
      "MetricsIntensity" : 0.06264166444949623,
      "Density" : 3.3707147007553746
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "9fadf85f-4b97-4b48-85b1-009158873383",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 1.2994253916059524,
      "MetricsIntensity" : 0.06246973693658705,
      "Density" : 0.994684499314129
    },
    "euclideanDistance" : 48.03826308449478,
    "generation" : 30,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958919527293194,
      "LackOfCohesion" : 1.2994253916059524,
      "MetricsIntensity" : 0.06246973693658705,
      "Density" : 3.3668020893789894
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "377c7de9-8dbc-4c6f-90a3-2619e593720e",
    "objectives" : {
      "NumberOfConcerns" : 0.9937888198757764,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.2990536198828402,
      "MetricsIntensity" : 0.06262322567690497,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 49.03742957221538,
    "generation" : 31,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8918918918918923,
      "LackOfCohesion" : 1.2990536198828402,
      "MetricsIntensity" : 0.06262322567690498,
      "Density" : 3.370499419279907
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "3c3faf74-2dca-4b96-a4a6-a61af4e0941b",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.2992972316806197,
      "MetricsIntensity" : 0.062424537034769724,
      "Density" : 0.997599451303155
    },
    "euclideanDistance" : 49.03758068325252,
    "generation" : 36,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8998311761395614,
      "LackOfCohesion" : 1.2992972316806197,
      "MetricsIntensity" : 0.06242453703476972,
      "Density" : 3.376668601276843
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "6782dd87-2d7e-4b56-8cb2-6bd99da21eb9",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 1.2999701824139203,
      "MetricsIntensity" : 0.06237633379950003,
      "Density" : 0.9953703703703703
    },
    "euclideanDistance" : 50.03679675358821,
    "generation" : 26,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.899268429938098,
      "LackOfCohesion" : 1.2999701824139203,
      "MetricsIntensity" : 0.06237633379950003,
      "Density" : 3.36912362159025
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "a29fd05d-ed19-4b17-8fdc-e8b0ce079805",
    "objectives" : {
      "NumberOfConcerns" : 0.9937888198757764,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 1.297092702735247,
      "MetricsIntensity" : 0.0626476066661307,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 51.03591295623474,
    "generation" : 32,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8929577464788734,
      "LackOfCohesion" : 1.297092702735247,
      "MetricsIntensity" : 0.0626476066661307,
      "Density" : 3.37245787332946
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "962f0e1a-1e40-4975-ab48-48dbbb07b8e9",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 1.2996969308884054,
      "MetricsIntensity" : 0.06246664343064343,
      "Density" : 0.9950274348422496
    },
    "euclideanDistance" : 51.036033323763384,
    "generation" : 26,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8964546989307824,
      "LackOfCohesion" : 1.2996969308884054,
      "MetricsIntensity" : 0.06246664343064342,
      "Density" : 3.3679628554846195
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "2de4ca76-f81d-447d-b857-8ddf08ce856f",
    "objectives" : {
      "NumberOfConcerns" : 0.9946761313220941,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 1.298371611328221,
      "MetricsIntensity" : 0.0625693350360325,
      "Density" : 0.9936556927297668
    },
    "euclideanDistance" : 52.03524205771225,
    "generation" : 24,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8946478873239438,
      "LackOfCohesion" : 1.298371611328221,
      "MetricsIntensity" : 0.0625693350360325,
      "Density" : 3.367228355607206
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "58b560df-577a-4bd7-82ea-1bd45dbd8776",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 1.2997739442444691,
      "MetricsIntensity" : 0.06250580123863377,
      "Density" : 0.9941700960219478
    },
    "euclideanDistance" : 53.03463811538386,
    "generation" : 31,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8952702702702702,
      "LackOfCohesion" : 1.2997739442444691,
      "MetricsIntensity" : 0.06250580123863377,
      "Density" : 3.367015098722416
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "fb3544f5-2e76-4c3d-b49f-fc9360b61191",
    "objectives" : {
      "NumberOfConcerns" : 0.9946761313220941,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 1.297783250857819,
      "MetricsIntensity" : 0.06259934517921718,
      "Density" : 0.9934842249657064
    },
    "euclideanDistance" : 54.03392037929232,
    "generation" : 13,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8946478873239438,
      "LackOfCohesion" : 1.297783250857819,
      "MetricsIntensity" : 0.0625993451792172,
      "Density" : 3.366647298082509
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper.Termination'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged.DistinctUntilChangedConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      } ]
    } ]
  }, {
    "solutionId" : "ab29f3e2-0572-441f-b9da-954b0f65cc42",
    "objectives" : {
      "NumberOfConcerns" : 0.9940845903578823,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 1.297364561982803,
      "MetricsIntensity" : 0.06264450579402255,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 54.03393736222688,
    "generation" : 24,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8935211267605634,
      "LackOfCohesion" : 1.297364561982803,
      "MetricsIntensity" : 0.06264450579402255,
      "Density" : 3.37361998837885
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "e4063903-b828-4997-aa7d-28a644997306",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 1.299040919553111,
      "MetricsIntensity" : 0.0624905591482746,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 54.03403684536319,
    "generation" : 23,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8969594594594592,
      "LackOfCohesion" : 1.299040919553111,
      "MetricsIntensity" : 0.0624905591482746,
      "Density" : 3.374564459930315
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "06371b0f-f927-47ea-9c97-ed7c5f35f201",
    "objectives" : {
      "NumberOfConcerns" : 0.9949719018041999,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 1.2986434787548222,
      "MetricsIntensity" : 0.06256624108313528,
      "Density" : 0.9939986282578875
    },
    "euclideanDistance" : 55.03333891177051,
    "generation" : 26,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.895211267605634,
      "LackOfCohesion" : 1.2986434787548222,
      "MetricsIntensity" : 0.06256624108313528,
      "Density" : 3.368390470656595
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn.UnsubscribeObserver.DisposeTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper.ToFlowableIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "302aa52e-582a-4fe9-9a75-040da3d34f80",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 1.3003190640323934,
      "MetricsIntensity" : 0.06241234169868621,
      "Density" : 0.9948559670781894
    },
    "euclideanDistance" : 55.03343662339405,
    "generation" : 27,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8986486486486485,
      "LackOfCohesion" : 1.3003190640323934,
      "MetricsIntensity" : 0.0624123416986862,
      "Density" : 3.3693379790940767
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "205b0691-016f-450d-9706-69d6e073e635",
    "objectives" : {
      "NumberOfConcerns" : 0.9949719018041999,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 1.2980551101053752,
      "MetricsIntensity" : 0.06259624430710904,
      "Density" : 0.9938271604938271
    },
    "euclideanDistance" : 57.03215344758593,
    "generation" : 22,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.895211267605634,
      "LackOfCohesion" : 1.2980551101053752,
      "MetricsIntensity" : 0.06259624430710904,
      "Density" : 3.3678094131318996
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.exceptions.MissingBackpressureException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.SimpleBiGenerator'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "9bdc6336-5bc3-49d0-a14d-7e78bb7269c8",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 1.2993340268773943,
      "MetricsIntensity" : 0.0625179795962218,
      "Density" : 0.9943415637860082
    },
    "euclideanDistance" : 58.031651950717915,
    "generation" : 23,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8969014084507039,
      "LackOfCohesion" : 1.2993340268773943,
      "MetricsIntensity" : 0.0625179795962218,
      "Density" : 3.3695525857059847
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntil.TakeUntilMainObserver.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount.RefConnection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach.DetachMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap.InnerSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.ObservableLastStageObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ConcatMapXMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.DisposableAutoReleaseSubscriber(DisposableContainer, Consumer<? super T>, Consumer<? super Throwable>, Action)', targetType='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber'"
      } ]
    } ]
  } ]
}