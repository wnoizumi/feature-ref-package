{
  "executionId" : "10196edc-a314-48b1-9c4d-f1f7fc24591d",
  "computingTime" : 990603,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.3807285546415975,
    "meanNumConcerns" : 1.8659154929577462,
    "meanMetricsIntensity" : 0.06269018858892111,
    "meanLackOfCohesion" : 1.3045137304594558
  },
  "population" : [ {
    "solutionId" : "33e09faf-9b3d-410b-a629-7c6dc1e5cefc",
    "objectives" : {
      "NumberOfConcerns" : 1.0033212560386473,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2983865983581582,
      "MetricsIntensity" : 0.062451862691144756,
      "Density" : 0.9998262078554049
    },
    "euclideanDistance" : 11.166736944277105,
    "generation" : 36,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.862668161434977,
      "LackOfCohesion" : 1.2983865983581582,
      "MetricsIntensity" : 0.062451862691144756,
      "Density" : 3.3643274853801177
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    } ]
  }, {
    "solutionId" : "ff70c6b9-a879-43c1-bc4f-de7f4f1f69cd",
    "objectives" : {
      "NumberOfConcerns" : 1.003925120772947,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2983522576988173,
      "MetricsIntensity" : 0.06243335481767765,
      "Density" : 1.000173792144595
    },
    "euclideanDistance" : 11.166818247445297,
    "generation" : 49,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8637892376681617,
      "LackOfCohesion" : 1.2983522576988173,
      "MetricsIntensity" : 0.06243335481767766,
      "Density" : 3.365497076023392
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "caa0fb5b-7d7b-49dc-aaa4-f202bca5fe2d",
    "objectives" : {
      "NumberOfConcerns" : 1.003925120772947,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.298202017314202,
      "MetricsIntensity" : 0.06246763909799198,
      "Density" : 1.0005213764337852
    },
    "euclideanDistance" : 11.166832109265057,
    "generation" : 28,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8637892376681613,
      "LackOfCohesion" : 1.298202017314202,
      "MetricsIntensity" : 0.06246763909799199,
      "Density" : 3.3666666666666663
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "e326612e-9929-4a7b-9b62-2a84b5a1aed0",
    "objectives" : {
      "NumberOfConcerns" : 1.003925120772947,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2982020173142022,
      "MetricsIntensity" : 0.06246763909799197,
      "Density" : 1.0005213764337852
    },
    "euclideanDistance" : 11.166832109265057,
    "generation" : 41,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8637892376681613,
      "LackOfCohesion" : 1.2982020173142022,
      "MetricsIntensity" : 0.06246763909799197,
      "Density" : 3.3666666666666663
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "ff81f037-677a-41cc-9ba5-1240553ccc03",
    "objectives" : {
      "NumberOfConcerns" : 1.0021135265700483,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.2990327661720777,
      "MetricsIntensity" : 0.06250775212504582,
      "Density" : 0.9993048314216197
    },
    "euclideanDistance" : 12.152951699603747,
    "generation" : 34,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8614694335389794,
      "LackOfCohesion" : 1.2990327661720777,
      "MetricsIntensity" : 0.06250775212504583,
      "Density" : 3.364540667056758
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    } ]
  }, {
    "solutionId" : "587a60ea-e3f2-417e-9cae-36139b8ed0bd",
    "objectives" : {
      "NumberOfConcerns" : 1.002717391304348,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.299148735590513,
      "MetricsIntensity" : 0.06245492822613282,
      "Density" : 0.9993048314216197
    },
    "euclideanDistance" : 12.15301363317646,
    "generation" : 47,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8625911385305667,
      "LackOfCohesion" : 1.299148735590513,
      "MetricsIntensity" : 0.06245492822613283,
      "Density" : 3.364540667056758
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "769cf1c8-e826-4c63-a63c-69f29cde68c0",
    "objectives" : {
      "NumberOfConcerns" : 1.002717391304348,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.298998404862912,
      "MetricsIntensity" : 0.062489233122370376,
      "Density" : 0.9996524157108099
    },
    "euclideanDistance" : 12.153026325946689,
    "generation" : 20,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8625911385305667,
      "LackOfCohesion" : 1.298998404862912,
      "MetricsIntensity" : 0.06248923312237038,
      "Density" : 3.3657109420713858
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "552dda85-5062-4853-876f-77220ecd701c",
    "objectives" : {
      "NumberOfConcerns" : 1.0021135265700483,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2982653636007067,
      "MetricsIntensity" : 0.062466796780963625,
      "Density" : 0.9982620785540494
    },
    "euclideanDistance" : 13.141162572338835,
    "generation" : 14,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8614694335389794,
      "LackOfCohesion" : 1.2982653636007067,
      "MetricsIntensity" : 0.062466796780963625,
      "Density" : 3.3610298420128735
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    } ]
  }, {
    "solutionId" : "5b0eb439-cc53-4f6f-93be-7e967e23b151",
    "objectives" : {
      "NumberOfConcerns" : 1.002717391304348,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2982310022915409,
      "MetricsIntensity" : 0.06244827777828817,
      "Density" : 0.9986096628432395
    },
    "euclideanDistance" : 13.141231561320897,
    "generation" : 47,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8625911385305667,
      "LackOfCohesion" : 1.2982310022915409,
      "MetricsIntensity" : 0.06244827777828818,
      "Density" : 3.3622001170275038
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "e9a1bb2c-5580-4ac4-881f-8664c58486c5",
    "objectives" : {
      "NumberOfConcerns" : 1.002717391304348,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2980806715639401,
      "MetricsIntensity" : 0.06248258325861566,
      "Density" : 0.9989572471324296
    },
    "euclideanDistance" : 13.141243291695089,
    "generation" : 42,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.862591138530567,
      "LackOfCohesion" : 1.2980806715639401,
      "MetricsIntensity" : 0.062482583258615665,
      "Density" : 3.3633703920421305
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "81ed65c1-dee5-4b7e-9105-6748b23bf04a",
    "objectives" : {
      "NumberOfConcerns" : 1.0009057971014492,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.2989118472588241,
      "MetricsIntensity" : 0.06252272941273787,
      "Density" : 0.9977407021202641
    },
    "euclideanDistance" : 14.131113898132067,
    "generation" : 40,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8602693602693605,
      "LackOfCohesion" : 1.2989118472588241,
      "MetricsIntensity" : 0.06252272941273787,
      "Density" : 3.3612412177985953
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    } ]
  }, {
    "solutionId" : "de3e60e2-fe20-4f86-9005-427bee82630a",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.2988774652749837,
      "MetricsIntensity" : 0.06250419926746152,
      "Density" : 0.9980882864094542
    },
    "euclideanDistance" : 14.131177986103754,
    "generation" : 39,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8613916947250275,
      "LackOfCohesion" : 1.2988774652749837,
      "MetricsIntensity" : 0.06250419926746154,
      "Density" : 3.36241217798595
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "117d5772-2cc9-4b66-ab3d-de46ab46f9d2",
    "objectives" : {
      "NumberOfConcerns" : 1.0009057971014492,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.298738504756962,
      "MetricsIntensity" : 0.06248186324005318,
      "Density" : 0.9968717413972888
    },
    "euclideanDistance" : 15.12237386690463,
    "generation" : 46,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8602693602693605,
      "LackOfCohesion" : 1.298738504756962,
      "MetricsIntensity" : 0.06248186324005318,
      "Density" : 3.3583138173302096
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "f162c282-440f-4067-bfb6-33bc8e199f2e",
    "objectives" : {
      "NumberOfConcerns" : 1.0009057971014492,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.29858808357766,
      "MetricsIntensity" : 0.06251618936146387,
      "Density" : 0.997219325686479
    },
    "euclideanDistance" : 15.122384007918065,
    "generation" : 36,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8602693602693599,
      "LackOfCohesion" : 1.29858808357766,
      "MetricsIntensity" : 0.06251618936146387,
      "Density" : 3.359484777517564
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "199c2b72-a969-44d6-9510-ea8b9e0713f2",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2995361742217102,
      "MetricsIntensity" : 0.06250349182926644,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 16.114717457037262,
    "generation" : 39,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.85906793935991,
      "LackOfCohesion" : 1.2995361742217102,
      "MetricsIntensity" : 0.06250349182926644,
      "Density" : 3.357352079671938
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "774e37cf-4afa-4ce5-abd9-0474048b2893",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2993856624817945,
      "MetricsIntensity" : 0.06253783861661419,
      "Density" : 0.9963503649635036
    },
    "euclideanDistance" : 16.114726940203298,
    "generation" : 47,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8590679393599099,
      "LackOfCohesion" : 1.2993856624817945,
      "MetricsIntensity" : 0.0625378386166142,
      "Density" : 3.358523725834798
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "854725c9-1179-4356-9096-0b60eec59042",
    "objectives" : {
      "NumberOfConcerns" : 1.002717391304348,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.297641610391265,
      "MetricsIntensity" : 0.06249850235007505,
      "Density" : 0.9994786235662148
    },
    "euclideanDistance" : 16.114967561171348,
    "generation" : 42,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8625911385305665,
      "LackOfCohesion" : 1.297641610391265,
      "MetricsIntensity" : 0.062498502350075064,
      "Density" : 3.365125804564072
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    } ]
  }, {
    "solutionId" : "ef53d122-2f9b-48cb-866f-0ca369f4367f",
    "objectives" : {
      "NumberOfConcerns" : 1.0033212560386473,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2974569183544982,
      "MetricsIntensity" : 0.06251428824363715,
      "Density" : 1.000173792144595
    },
    "euclideanDistance" : 16.115033467186237,
    "generation" : 14,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8637128435221535,
      "LackOfCohesion" : 1.2974569183544982,
      "MetricsIntensity" : 0.06251428824363715,
      "Density" : 3.367466354593329
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "dd725b97-13a4-4d71-8fad-371bdb2c5b6e",
    "objectives" : {
      "NumberOfConcerns" : 1.0003019323671498,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2994602016291814,
      "MetricsIntensity" : 0.06251432933043267,
      "Density" : 0.9970455335418839
    },
    "euclideanDistance" : 17.108103594754244,
    "generation" : 16,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8601909039865248,
      "LackOfCohesion" : 1.2994602016291814,
      "MetricsIntensity" : 0.06251432933043267,
      "Density" : 3.3608670181605134
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "b6792ae6-898e-4af3-acf4-acf35892252f",
    "objectives" : {
      "NumberOfConcerns" : 1.002717391304348,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2965088802898037,
      "MetricsIntensity" : 0.06281643783298216,
      "Density" : 0.9993048314216197
    },
    "euclideanDistance" : 17.108154006042238,
    "generation" : 47,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8625911385305665,
      "LackOfCohesion" : 1.2965088802898037,
      "MetricsIntensity" : 0.06281643783298217,
      "Density" : 3.3665105386416863
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "de68a1aa-5605-4951-9e79-9f8e2ec57da6",
    "objectives" : {
      "NumberOfConcerns" : 1.0030193236714975,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2979303408363394,
      "MetricsIntensity" : 0.06242113081431868,
      "Density" : 0.9996524157108099
    },
    "euclideanDistance" : 17.108298345631297,
    "generation" : 11,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8631519910263594,
      "LackOfCohesion" : 1.2979303408363394,
      "MetricsIntensity" : 0.06242113081431869,
      "Density" : 3.3657109420713867
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "98175376-bba8-459f-932b-fbb3d58ac8d9",
    "objectives" : {
      "NumberOfConcerns" : 1.0030193236714975,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.2977800101087384,
      "MetricsIntensity" : 0.06245543571055626,
      "Density" : 1.0
    },
    "euclideanDistance" : 17.108307379742335,
    "generation" : 32,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8631519910263603,
      "LackOfCohesion" : 1.2977800101087384,
      "MetricsIntensity" : 0.062455435710556256,
      "Density" : 3.3668812170860156
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "77d9136a-1234-4f8d-ae9d-c7f23114ce9d",
    "objectives" : {
      "NumberOfConcerns" : 0.9993961352657005,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2999986984039247,
      "MetricsIntensity" : 0.0625403378719896,
      "Density" : 0.9958289885297185
    },
    "euclideanDistance" : 18.10205446680827,
    "generation" : 40,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.859550561797752,
      "LackOfCohesion" : 1.2999986984039247,
      "MetricsIntensity" : 0.06254033787198959,
      "Density" : 3.3587338804220397
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "7c1993a0-7a55-4b8b-9602-340e1f2365c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9990942028985508,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.3002587863748558,
      "MetricsIntensity" : 0.06253599050680236,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 18.102075589615474,
    "generation" : 20,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8589887640449434,
      "LackOfCohesion" : 1.3002587863748558,
      "MetricsIntensity" : 0.06253599050680236,
      "Density" : 3.3599062133645954
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "78122da2-b6a7-43b0-a261-fd41812b0b2a",
    "objectives" : {
      "NumberOfConcerns" : 0.9990942028985508,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.3001081839652173,
      "MetricsIntensity" : 0.06257035798498585,
      "Density" : 0.9965241571080987
    },
    "euclideanDistance" : 18.10208402261124,
    "generation" : 32,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8589887640449434,
      "LackOfCohesion" : 1.3001081839652173,
      "MetricsIntensity" : 0.06257035798498586,
      "Density" : 3.361078546307151
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "798f150b-a150-4c74-a7e2-5d885a99cda3",
    "objectives" : {
      "NumberOfConcerns" : 1.0021135265700483,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.297335051277696,
      "MetricsIntensity" : 0.06252926946401184,
      "Density" : 0.9986096628432395
    },
    "euclideanDistance" : 18.102166746654166,
    "generation" : 15,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8625140291806959,
      "LackOfCohesion" : 1.297335051277696,
      "MetricsIntensity" : 0.06252926946401184,
      "Density" : 3.3641686182669783
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "bf715462-d827-48ce-bde6-9a755f3526cd",
    "objectives" : {
      "NumberOfConcerns" : 0.9990942028985508,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.300172010700731,
      "MetricsIntensity" : 0.06253692632104556,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 19.09669805544711,
    "generation" : 21,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8589887640449432,
      "LackOfCohesion" : 1.300172010700731,
      "MetricsIntensity" : 0.06253692632104557,
      "Density" : 3.358147713950762
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "78e38846-5e90-42a4-86d7-c9520c987e2d",
    "objectives" : {
      "NumberOfConcerns" : 0.9990942028985508,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.3004050858585048,
      "MetricsIntensity" : 0.06253060308606583,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 19.096741095122688,
    "generation" : 47,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8589887640449434,
      "LackOfCohesion" : 1.3004050858585048,
      "MetricsIntensity" : 0.06253060308606584,
      "Density" : 3.359906213364595
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "8ac10c59-e53b-4a1a-93a6-2a130457e5f6",
    "objectives" : {
      "NumberOfConcerns" : 0.9990942028985508,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.3004050858585048,
      "MetricsIntensity" : 0.06253060308606583,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 19.096741095122688,
    "generation" : 11,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8589887640449432,
      "LackOfCohesion" : 1.3004050858585048,
      "MetricsIntensity" : 0.06253060308606583,
      "Density" : 3.3599062133645954
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "de32f22c-2718-439f-9a71-c2139278fb08",
    "objectives" : {
      "NumberOfConcerns" : 1.001207729468599,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2976927194151477,
      "MetricsIntensity" : 0.0624889116655376,
      "Density" : 0.9980882864094542
    },
    "euclideanDistance" : 19.096766962057206,
    "generation" : 49,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8608305274971946,
      "LackOfCohesion" : 1.2976927194151477,
      "MetricsIntensity" : 0.06248891166553759,
      "Density" : 3.3624121779859486
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    } ]
  }, {
    "solutionId" : "cd17ec38-9110-408f-8053-6fd5b8947822",
    "objectives" : {
      "NumberOfConcerns" : 1.0018115942028984,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.297658337431307,
      "MetricsIntensity" : 0.062470381520261256,
      "Density" : 0.9984358706986444
    },
    "euclideanDistance" : 19.096814403649876,
    "generation" : 45,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8619528619528622,
      "LackOfCohesion" : 1.297658337431307,
      "MetricsIntensity" : 0.062470381520261256,
      "Density" : 3.3635831381733023
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "72c0efe4-d323-4970-a58e-bba8fe1d632f",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.3007220249249636,
      "MetricsIntensity" : 0.06257287834863358,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 20.09192376777331,
    "generation" : 36,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8594716132658797,
      "LackOfCohesion" : 1.3007220249249636,
      "MetricsIntensity" : 0.06257287834863358,
      "Density" : 3.3612903225806456
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "6f0907f3-f378-49fb-a175-ce6a0587df61",
    "objectives" : {
      "NumberOfConcerns" : 1.0006038647342994,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.2998101681279952,
      "MetricsIntensity" : 0.06248714976879519,
      "Density" : 0.997219325686479
    },
    "euclideanDistance" : 20.092014970995294,
    "generation" : 44,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8607523862998314,
      "LackOfCohesion" : 1.2998101681279952,
      "MetricsIntensity" : 0.06248714976879519,
      "Density" : 3.3614528412419453
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "d4c0780c-1382-4db8-9bec-daf79aea3c2d",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.3006351969448264,
      "MetricsIntensity" : 0.0625738147269601,
      "Density" : 0.9954814042405283
    },
    "euclideanDistance" : 21.087535100710163,
    "generation" : 8,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.85947161326588,
      "LackOfCohesion" : 1.3006351969448264,
      "MetricsIntensity" : 0.06257381472696011,
      "Density" : 3.359530791788856
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "a82fbdbc-04e5-40c5-86ef-d22247b08ae2",
    "objectives" : {
      "NumberOfConcerns" : 0.9984903381642513,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.3011387035514073,
      "MetricsIntensity" : 0.06256336252616077,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 21.08757645142581,
    "generation" : 13,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858909499718943,
      "LackOfCohesion" : 1.3011387035514073,
      "MetricsIntensity" : 0.06256336252616077,
      "Density" : 3.361290322580645
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "090b0ddf-8c5a-4793-857d-ab106a65dd76",
    "objectives" : {
      "NumberOfConcerns" : 0.9984903381642513,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.3011387035514073,
      "MetricsIntensity" : 0.06256336252616077,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 21.08757645142581,
    "generation" : 12,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858909499718943,
      "LackOfCohesion" : 1.3011387035514073,
      "MetricsIntensity" : 0.06256336252616077,
      "Density" : 3.361290322580646
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "c802314c-c1cd-4654-83d4-394ba0446c44",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.297658337431307,
      "MetricsIntensity" : 0.06250864215209968,
      "Density" : 0.9982620785540494
    },
    "euclideanDistance" : 21.08761184371711,
    "generation" : 43,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8613916947250273,
      "LackOfCohesion" : 1.297658337431307,
      "MetricsIntensity" : 0.06250864215209968,
      "Density" : 3.3629976580796255
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "a5f5be0c-36b6-49f4-9412-d33274a621f5",
    "objectives" : {
      "NumberOfConcerns" : 0.9984903381642513,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.2976901786104649,
      "MetricsIntensity" : 0.0628873094144851,
      "Density" : 0.9951338199513382
    },
    "euclideanDistance" : 22.083369962221926,
    "generation" : 38,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8578651685393255,
      "LackOfCohesion" : 1.2976901786104649,
      "MetricsIntensity" : 0.06288730941448509,
      "Density" : 3.358357771260996
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "ec2d4c33-991a-4502-b6ba-c906b7d0650a",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.3009062054888911,
      "MetricsIntensity" : 0.06259868709845029,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 22.083583884498562,
    "generation" : 42,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858347386172007,
      "LackOfCohesion" : 1.3009062054888911,
      "MetricsIntensity" : 0.06259868709845029,
      "Density" : 3.361290322580646
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "90ecb139-c4d8-4b9c-95cf-94bba64f8f91",
    "objectives" : {
      "NumberOfConcerns" : 1.0021135265700483,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.295611893101469,
      "MetricsIntensity" : 0.06289765045054291,
      "Density" : 0.9993048314216197
    },
    "euclideanDistance" : 22.083600430143075,
    "generation" : 43,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.862514029180696,
      "LackOfCohesion" : 1.295611893101469,
      "MetricsIntensity" : 0.0628976504505429,
      "Density" : 3.3684827182190973
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "119bf402-2981-4690-880d-042ce6468b2b",
    "objectives" : {
      "NumberOfConcerns" : 1.002415458937198,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.297184630098394,
      "MetricsIntensity" : 0.06246778004471832,
      "Density" : 0.9993048314216197
    },
    "euclideanDistance" : 22.08370523907902,
    "generation" : 44,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8630751964085293,
      "LackOfCohesion" : 1.297184630098394,
      "MetricsIntensity" : 0.06246778004471832,
      "Density" : 3.3665105386416863
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "9aa8fcae-caf7-488c-9d99-176a630e27d1",
    "objectives" : {
      "NumberOfConcerns" : 1.002415458937198,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.2970342089190918,
      "MetricsIntensity" : 0.06250210558168769,
      "Density" : 0.9996524157108099
    },
    "euclideanDistance" : 22.083712232250747,
    "generation" : 46,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8630751964085295,
      "LackOfCohesion" : 1.2970342089190918,
      "MetricsIntensity" : 0.06250210558168769,
      "Density" : 3.36768149882904
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "9f62f402-476d-47fb-947a-4350260a66d1",
    "objectives" : {
      "NumberOfConcerns" : 0.9984903381642513,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.299513130678095,
      "MetricsIntensity" : 0.06258279332815057,
      "Density" : 0.9958289885297185
    },
    "euclideanDistance" : 23.079889716214613,
    "generation" : 49,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8589094997189426,
      "LackOfCohesion" : 1.299513130678095,
      "MetricsIntensity" : 0.06258279332815059,
      "Density" : 3.360703812316716
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "78dc2a46-3816-4726-b205-f38b7bf41cec",
    "objectives" : {
      "NumberOfConcerns" : 1.0018115942028984,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.2960856004343824,
      "MetricsIntensity" : 0.0628044369698229,
      "Density" : 0.9987834549878345
    },
    "euclideanDistance" : 23.07996917548187,
    "generation" : 45,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8619528619528622,
      "LackOfCohesion" : 1.2960856004343824,
      "MetricsIntensity" : 0.0628044369698229,
      "Density" : 3.3667252489748094
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "563715fa-6a20-4a96-9da7-1715d603c647",
    "objectives" : {
      "NumberOfConcerns" : 1.0018115942028984,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.29593517925508,
      "MetricsIntensity" : 0.06283876250679224,
      "Density" : 0.9991310392770246
    },
    "euclideanDistance" : 23.079975866599824,
    "generation" : 19,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.861952861952862,
      "LackOfCohesion" : 1.29593517925508,
      "MetricsIntensity" : 0.06283876250679224,
      "Density" : 3.367896895137668
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "37ddd565-b5d9-4eaa-870b-85d10ec90140",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2981518688737952,
      "MetricsIntensity" : 0.06292440902178208,
      "Density" : 0.9949600278067431
    },
    "euclideanDistance" : 24.07645080376907,
    "generation" : 40,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8583473861720068,
      "LackOfCohesion" : 1.2981518688737952,
      "MetricsIntensity" : 0.06292440902178208,
      "Density" : 3.3597417840375585
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "f5f63ced-a5be-42cc-ad83-eed113598d9c",
    "objectives" : {
      "NumberOfConcerns" : 0.9984903381642513,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.300782508332786,
      "MetricsIntensity" : 0.06255767779670594,
      "Density" : 0.9953076120959332
    },
    "euclideanDistance" : 24.07661871598957,
    "generation" : 38,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8589094997189428,
      "LackOfCohesion" : 1.300782508332786,
      "MetricsIntensity" : 0.06255767779670594,
      "Density" : 3.358944281524926
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "06656a24-e52d-4849-84db-9b88fb3c3be8",
    "objectives" : {
      "NumberOfConcerns" : 1.001207729468599,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2969120139816561,
      "MetricsIntensity" : 0.062517088486926,
      "Density" : 0.9980882864094542
    },
    "euclideanDistance" : 24.07663776990837,
    "generation" : 42,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8618753509264458,
      "LackOfCohesion" : 1.2969120139816561,
      "MetricsIntensity" : 0.062517088486926,
      "Density" : 3.364381956649092
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "b58bb631-2fe7-469c-ad04-079394c27ca3",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.3015208979941644,
      "MetricsIntensity" : 0.06260122606853771,
      "Density" : 0.9954814042405283
    },
    "euclideanDistance" : 24.0766408828446,
    "generation" : 25,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858830146231721,
      "LackOfCohesion" : 1.3015208979941644,
      "MetricsIntensity" : 0.06260122606853773,
      "Density" : 3.3615023474178405
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "91bdf60c-2d92-4485-8d07-fba31cf6f6ff",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.3015208979941644,
      "MetricsIntensity" : 0.06260122606853771,
      "Density" : 0.9954814042405283
    },
    "euclideanDistance" : 24.0766408828446,
    "generation" : 7,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858830146231721,
      "LackOfCohesion" : 1.3015208979941644,
      "MetricsIntensity" : 0.06260122606853771,
      "Density" : 3.361502347417841
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "0025e0b0-4523-4715-81dc-197ab952a8e3",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.299177317642785,
      "MetricsIntensity" : 0.06256280168259834,
      "Density" : 0.9975669099756691
    },
    "euclideanDistance" : 24.076675679444186,
    "generation" : 49,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8601123595505613,
      "LackOfCohesion" : 1.299177317642785,
      "MetricsIntensity" : 0.06256280168259835,
      "Density" : 3.364595545134818
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "1332b1c1-c436-481f-9f1a-4d1423245b02",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.298174592449864,
      "MetricsIntensity" : 0.06295538360841103,
      "Density" : 0.9951338199513382
    },
    "euclideanDistance" : 25.073398042273272,
    "generation" : 35,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.85778527262507,
      "LackOfCohesion" : 1.298174592449864,
      "MetricsIntensity" : 0.06295538360841103,
      "Density" : 3.360328638497653
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "e8a4a3d1-ee08-48c5-9d39-5e6bf24bc624",
    "objectives" : {
      "NumberOfConcerns" : 1.0006038647342994,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2959628343900924,
      "MetricsIntensity" : 0.06281960130796102,
      "Density" : 0.997219325686479
    },
    "euclideanDistance" : 25.07347443909744,
    "generation" : 47,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8607523862998314,
      "LackOfCohesion" : 1.2959628343900924,
      "MetricsIntensity" : 0.06281960130796103,
      "Density" : 3.363423212192263
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "d7fdd2dc-5700-42fd-bdf3-a06e5fdc5912",
    "objectives" : {
      "NumberOfConcerns" : 1.0006038647342994,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2958123226501768,
      "MetricsIntensity" : 0.06285394809530878,
      "Density" : 0.9975669099756691
    },
    "euclideanDistance" : 25.073480572675244,
    "generation" : 46,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8607523862998312,
      "LackOfCohesion" : 1.2958123226501768,
      "MetricsIntensity" : 0.06285394809530878,
      "Density" : 3.3645955451348177
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "5ebdd1af-d4fa-4df3-8c18-573b7884ce00",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2975079162520051,
      "MetricsIntensity" : 0.06244715273280617,
      "Density" : 0.9986096628432395
    },
    "euclideanDistance" : 25.073644914553114,
    "generation" : 48,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8613916947250277,
      "LackOfCohesion" : 1.2975079162520051,
      "MetricsIntensity" : 0.062447152732806176,
      "Density" : 3.364168618266979
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "dfe8f6a1-be29-4438-8036-024c3e356443",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.297507916252005,
      "MetricsIntensity" : 0.062447152732806176,
      "Density" : 0.9986096628432395
    },
    "euclideanDistance" : 25.073644914553114,
    "generation" : 48,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8613916947250273,
      "LackOfCohesion" : 1.297507916252005,
      "MetricsIntensity" : 0.062447152732806176,
      "Density" : 3.364168618266978
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "9eacdca0-f3bb-4a32-a251-3de7df0c273c",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2973574950727031,
      "MetricsIntensity" : 0.0624814782697755,
      "Density" : 0.9989572471324296
    },
    "euclideanDistance" : 25.07365106221064,
    "generation" : 38,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8613916947250277,
      "LackOfCohesion" : 1.2973574950727031,
      "MetricsIntensity" : 0.0624814782697755,
      "Density" : 3.365339578454333
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "ceba4e59-b2a5-46d7-ae1f-5805e9c325e2",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2998893185429226,
      "MetricsIntensity" : 0.06262066858994973,
      "Density" : 0.9951338199513382
    },
    "euclideanDistance" : 26.070679028396544,
    "generation" : 14,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.859392575928009,
      "LackOfCohesion" : 1.2998893185429226,
      "MetricsIntensity" : 0.06262066858994975,
      "Density" : 3.3603286384976525
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "b3a966a8-0db6-4ebb-96f4-14c0229fd47b",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.3003931288326196,
      "MetricsIntensity" : 0.06261021008504859,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 26.070712476107463,
    "generation" : 44,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858830146231721,
      "LackOfCohesion" : 1.3003931288326196,
      "MetricsIntensity" : 0.06261021008504859,
      "Density" : 3.362089201877934
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "f577f824-771c-4075-8191-2de7c27875fb",
    "objectives" : {
      "NumberOfConcerns" : 1.0009057971014492,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2969120139816563,
      "MetricsIntensity" : 0.0625553721534615,
      "Density" : 0.9979144942648592
    },
    "euclideanDistance" : 26.070741065399933,
    "generation" : 48,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8613138686131392,
      "LackOfCohesion" : 1.2969120139816563,
      "MetricsIntensity" : 0.0625553721534615,
      "Density" : 3.363796133567663
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "bf5e9c8a-7e94-4cee-b027-9a2b8b25b442",
    "objectives" : {
      "NumberOfConcerns" : 1.0009057971014492,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2975235597540873,
      "MetricsIntensity" : 0.0625195752422233,
      "Density" : 0.9975669099756691
    },
    "euclideanDistance" : 26.0707581063527,
    "generation" : 47,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8623595505617974,
      "LackOfCohesion" : 1.2975235597540873,
      "MetricsIntensity" : 0.06251957524222329,
      "Density" : 3.364595545134818
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "b5af9f03-f8e3-447b-9c58-76346e2f760d",
    "objectives" : {
      "NumberOfConcerns" : 0.9975845410628019,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2987876374201317,
      "MetricsIntensity" : 0.06295813771511485,
      "Density" : 0.994612443517553
    },
    "euclideanDistance" : 27.067974469538488,
    "generation" : 8,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8582677165354329,
      "LackOfCohesion" : 1.2987876374201317,
      "MetricsIntensity" : 0.06295813771511485,
      "Density" : 3.3605402231356427
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "4652adea-110f-4385-8426-6bf249b4b230",
    "objectives" : {
      "NumberOfConcerns" : 1.0003019323671498,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2964232059579504,
      "MetricsIntensity" : 0.06285663777808101,
      "Density" : 0.9970455335418839
    },
    "euclideanDistance" : 27.068050684113036,
    "generation" : 35,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8612359550561794,
      "LackOfCohesion" : 1.2964232059579504,
      "MetricsIntensity" : 0.062856637778081,
      "Density" : 3.364809384164222
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "04a760e2-2481-4334-a504-544095b91a7c",
    "objectives" : {
      "NumberOfConcerns" : 0.9975845410628019,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.30016049054208,
      "MetricsIntensity" : 0.06264555596287028,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 27.068077987797817,
    "generation" : 43,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8582677165354329,
      "LackOfCohesion" : 1.30016049054208,
      "MetricsIntensity" : 0.06264555596287026,
      "Density" : 3.3620892018779336
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "add9318d-ec5e-44bc-8393-51fa8c953bc2",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.3014198635132956,
      "MetricsIntensity" : 0.06259118530112134,
      "Density" : 0.9949600278067431
    },
    "euclideanDistance" : 27.06812395029275,
    "generation" : 31,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858830146231721,
      "LackOfCohesion" : 1.3014198635132956,
      "MetricsIntensity" : 0.06259118530112134,
      "Density" : 3.3597417840375585
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "36de2f41-e172-4e64-bb2d-4f8d95e277a2",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.299209593496491,
      "MetricsIntensity" : 0.06294861615330401,
      "Density" : 0.9947862356621481
    },
    "euclideanDistance" : 28.065556795113547,
    "generation" : 45,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8571428571428574,
      "LackOfCohesion" : 1.299209593496491,
      "MetricsIntensity" : 0.06294861615330401,
      "Density" : 3.3611274221961245
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "c014398e-c0e2-429e-af7f-ac0ef560a1b8",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2968295934125305,
      "MetricsIntensity" : 0.06284690299215723,
      "Density" : 0.997393117831074
    },
    "euclideanDistance" : 28.065646434013647,
    "generation" : 48,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8606741573033703,
      "LackOfCohesion" : 1.2968295934125305,
      "MetricsIntensity" : 0.06284690299215723,
      "Density" : 3.3659824046920814
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "4ff4d064-5f1b-4ec5-9be4-bc5e025e1d72",
    "objectives" : {
      "NumberOfConcerns" : 1.001207729468599,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.295338330123204,
      "MetricsIntensity" : 0.06285134505355543,
      "Density" : 0.9984358706986444
    },
    "euclideanDistance" : 28.065657711632323,
    "generation" : 34,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8618753509264456,
      "LackOfCohesion" : 1.295338330123204,
      "MetricsIntensity" : 0.06285134505355544,
      "Density" : 3.3675263774912074
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "a466d3ea-c884-4fce-a0d4-a56b23ccd594",
    "objectives" : {
      "NumberOfConcerns" : 1.001207729468599,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2951878183832883,
      "MetricsIntensity" : 0.06288569125610995,
      "Density" : 0.9987834549878345
    },
    "euclideanDistance" : 28.065663209740087,
    "generation" : 42,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8618753509264456,
      "LackOfCohesion" : 1.2951878183832883,
      "MetricsIntensity" : 0.06288569125610996,
      "Density" : 3.368698710433764
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "939a8eea-a9eb-4ce3-b227-b6b7ee250d4f",
    "objectives" : {
      "NumberOfConcerns" : 0.9972826086956522,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.3007751039752702,
      "MetricsIntensity" : 0.06264812475060072,
      "Density" : 0.9951338199513382
    },
    "euclideanDistance" : 29.06339286077719,
    "generation" : 14,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8587507034327522,
      "LackOfCohesion" : 1.3007751039752702,
      "MetricsIntensity" : 0.06264812475060072,
      "Density" : 3.3623018203170885
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "ee3f64d1-0a00-465d-8f82-ae2d3a726bae",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.3002971204876577,
      "MetricsIntensity" : 0.06260016931763222,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 29.063409952493366,
    "generation" : 48,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858830146231721,
      "LackOfCohesion" : 1.3002971204876577,
      "MetricsIntensity" : 0.06260016931763222,
      "Density" : 3.362089201877934
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "45c3e788-1d0a-4554-bb2c-35858ebf012e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.2978472354090882,
      "MetricsIntensity" : 0.06249892307812808,
      "Density" : 0.9968717413972888
    },
    "euclideanDistance" : 29.063414576244156,
    "generation" : 47,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8606741573033703,
      "LackOfCohesion" : 1.2978472354090882,
      "MetricsIntensity" : 0.06249892307812807,
      "Density" : 3.362250879249707
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "3a1884ca-7d47-4324-997d-542d1d110752",
    "objectives" : {
      "NumberOfConcerns" : 0.9972826086956522,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2975780140452489,
      "MetricsIntensity" : 0.06296805867471603,
      "Density" : 0.994438651372958
    },
    "euclideanDistance" : 30.061123640208432,
    "generation" : 33,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8577052868391455,
      "LackOfCohesion" : 1.2975780140452489,
      "MetricsIntensity" : 0.06296805867471603,
      "Density" : 3.359953024075162
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "4ace78cc-4780-4ab7-9ce3-f06fa443b6b4",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.295064437550989,
      "MetricsIntensity" : 0.06290091426290227,
      "Density" : 0.997219325686479
    },
    "euclideanDistance" : 30.061197494543475,
    "generation" : 45,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8606741573033703,
      "LackOfCohesion" : 1.295064437550989,
      "MetricsIntensity" : 0.06290091426290227,
      "Density" : 3.365395894428152
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "cecf06a2-a6a3-42a1-96f5-2c2d2eaa6bb5",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2996727579875893,
      "MetricsIntensity" : 0.06298579753848478,
      "Density" : 0.994612443517553
    },
    "euclideanDistance" : 30.061199891554747,
    "generation" : 15,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8576252110298255,
      "LackOfCohesion" : 1.2996727579875893,
      "MetricsIntensity" : 0.06298579753848477,
      "Density" : 3.3625146886016446
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "a8af5042-628f-420f-98d1-70be7cba4324",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2996727579875893,
      "MetricsIntensity" : 0.06298579753848478,
      "Density" : 0.994612443517553
    },
    "euclideanDistance" : 30.061199891554747,
    "generation" : 43,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8576252110298257,
      "LackOfCohesion" : 1.2996727579875893,
      "MetricsIntensity" : 0.06298579753848477,
      "Density" : 3.3625146886016446
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "a957c765-12d1-4e12-84b9-0c28fce34348",
    "objectives" : {
      "NumberOfConcerns" : 0.9975845410628019,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3000594560612115,
      "MetricsIntensity" : 0.06263551519545386,
      "Density" : 0.9951338199513382
    },
    "euclideanDistance" : 30.061263180931643,
    "generation" : 15,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8582677165354338,
      "LackOfCohesion" : 1.3000594560612115,
      "MetricsIntensity" : 0.06263551519545386,
      "Density" : 3.3603286384976525
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "c95efa8b-5ae8-405e-98fc-256ac57a1256",
    "objectives" : {
      "NumberOfConcerns" : 1.0009057971014492,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.295338330123204,
      "MetricsIntensity" : 0.06288962872009095,
      "Density" : 0.9982620785540494
    },
    "euclideanDistance" : 30.061274026345544,
    "generation" : 43,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8613138686131392,
      "LackOfCohesion" : 1.295338330123204,
      "MetricsIntensity" : 0.06288962872009093,
      "Density" : 3.366940211019929
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "87da0a7b-fdeb-446b-9d19-e73c63cdaf3e",
    "objectives" : {
      "NumberOfConcerns" : 1.0009057971014492,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2966109905018248,
      "MetricsIntensity" : 0.06252819191720457,
      "Density" : 0.9986096628432395
    },
    "euclideanDistance" : 30.061339682536932,
    "generation" : 47,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8613138686131392,
      "LackOfCohesion" : 1.2966109905018248,
      "MetricsIntensity" : 0.06252819191720457,
      "Density" : 3.3661394258933806
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "761bbab8-4d8a-49da-9a55-b27baadac5a4",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.299108559015622,
      "MetricsIntensity" : 0.06293857538588761,
      "Density" : 0.9942648592283628
    },
    "euclideanDistance" : 31.05920439083474,
    "generation" : 11,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8571428571428568,
      "LackOfCohesion" : 1.299108559015622,
      "MetricsIntensity" : 0.06293857538588762,
      "Density" : 3.359365825014681
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "b616f0b0-a20b-4b9f-8de9-cb2048faea8c",
    "objectives" : {
      "NumberOfConcerns" : 1.0003019323671498,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.295511299170345,
      "MetricsIntensity" : 0.06286505152558736,
      "Density" : 0.9980882864094542
    },
    "euclideanDistance" : 31.05928340648487,
    "generation" : 38,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8601909039865245,
      "LackOfCohesion" : 1.295511299170345,
      "MetricsIntensity" : 0.06286505152558736,
      "Density" : 3.3663540445486526
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "d021294b-28e9-430f-a5e3-f0d1eb8bd6b3",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2980401938776565,
      "MetricsIntensity" : 0.06300525179346426,
      "Density" : 0.9942648592283628
    },
    "euclideanDistance" : 32.05731447089641,
    "generation" : 36,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858187957231289,
      "LackOfCohesion" : 1.2980401938776565,
      "MetricsIntensity" : 0.06300525179346428,
      "Density" : 3.361339600470035
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "952118ce-cd3c-4f6e-9dcc-2fd6bf4e2a42",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2983934331415778,
      "MetricsIntensity" : 0.06302921667738616,
      "Density" : 0.9951338199513382
    },
    "euclideanDistance" : 32.057346397162306,
    "generation" : 14,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8576252110298255,
      "LackOfCohesion" : 1.2983934331415778,
      "MetricsIntensity" : 0.06302921667738616,
      "Density" : 3.3642773207990584
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "d53fad07-49bb-4864-9ce8-ee123b79e043",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.296488467002127,
      "MetricsIntensity" : 0.06254319956294935,
      "Density" : 0.9970455335418839
    },
    "euclideanDistance" : 32.057421761883255,
    "generation" : 50,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8601123595505613,
      "LackOfCohesion" : 1.296488467002127,
      "MetricsIntensity" : 0.06254319956294935,
      "Density" : 3.3628370457209855
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "f00e119e-3f3f-407c-bafc-9639464a87cd",
    "objectives" : {
      "NumberOfConcerns" : 0.9972826086956522,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.3006740085200619,
      "MetricsIntensity" : 0.06263807792357816,
      "Density" : 0.994612443517553
    },
    "euclideanDistance" : 32.057440679499855,
    "generation" : 32,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8587507034327522,
      "LackOfCohesion" : 1.3006740085200619,
      "MetricsIntensity" : 0.06263807792357817,
      "Density" : 3.3605402231356427
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "0448e568-3e99-4a7d-ad8d-b80790ee0f83",
    "objectives" : {
      "NumberOfConcerns" : 0.9993961352657005,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2983403218942162,
      "MetricsIntensity" : 0.06255546630546856,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 32.05747651040315,
    "generation" : 43,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8605958403597525,
      "LackOfCohesion" : 1.2983403218942162,
      "MetricsIntensity" : 0.06255546630546856,
      "Density" : 3.3636363636363638
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    } ]
  }, {
    "solutionId" : "483d0b10-b49d-4173-9d45-ba563d5d1858",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2978440946970529,
      "MetricsIntensity" : 0.06253834321105263,
      "Density" : 0.9970455335418839
    },
    "euclideanDistance" : 32.057486023306126,
    "generation" : 39,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.86067415730337,
      "LackOfCohesion" : 1.2978440946970529,
      "MetricsIntensity" : 0.06253834321105263,
      "Density" : 3.3628370457209846
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "873eebbc-d703-4c9f-a1ff-bdc63767c8be",
    "objectives" : {
      "NumberOfConcerns" : 0.9993961352657005,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.298715652755843,
      "MetricsIntensity" : 0.06252604792293572,
      "Density" : 0.9970455335418839
    },
    "euclideanDistance" : 32.057502464860264,
    "generation" : 50,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.860595840359753,
      "LackOfCohesion" : 1.298715652755843,
      "MetricsIntensity" : 0.06252604792293572,
      "Density" : 3.3648093841642233
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "43e4eb86-9c48-4ba2-a278-7b7a11a132ac",
    "objectives" : {
      "NumberOfConcerns" : 0.9963768115942029,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.298462404604635,
      "MetricsIntensity" : 0.062995724485388,
      "Density" : 0.994438651372958
    },
    "euclideanDistance" : 33.05558421900152,
    "generation" : 46,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.857062464828362,
      "LackOfCohesion" : 1.298462404604635,
      "MetricsIntensity" : 0.062995724485388,
      "Density" : 3.36192714453584
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "80b4cc9e-e64a-4bf8-a04b-83d57178d79e",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.299571662532381,
      "MetricsIntensity" : 0.06297575071146219,
      "Density" : 0.9940910670837678
    },
    "euclideanDistance" : 33.05562642001441,
    "generation" : 33,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8576252110298255,
      "LackOfCohesion" : 1.299571662532381,
      "MetricsIntensity" : 0.06297575071146219,
      "Density" : 3.3607520564042304
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "a4b9aa94-765b-4db8-aee1-843afc003053",
    "objectives" : {
      "NumberOfConcerns" : 0.9993961352657005,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.298167770352054,
      "MetricsIntensity" : 0.06247938431797219,
      "Density" : 0.9965241571080987
    },
    "euclideanDistance" : 33.05572561999403,
    "generation" : 45,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8595505617977521,
      "LackOfCohesion" : 1.298167770352054,
      "MetricsIntensity" : 0.062479384317972196,
      "Density" : 3.361078546307151
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "9dc23211-bdc0-45c9-af64-b57af169b7f3",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2962953134354795,
      "MetricsIntensity" : 0.06286433751651997,
      "Density" : 0.997393117831074
    },
    "euclideanDistance" : 34.05405295588899,
    "generation" : 49,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.860112359550561,
      "LackOfCohesion" : 1.2962953134354795,
      "MetricsIntensity" : 0.06286433751651997,
      "Density" : 3.3659824046920814
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "a37609d1-7f9a-4553-97f5-6dc21d75940a",
    "objectives" : {
      "NumberOfConcerns" : 0.9975845410628019,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2995522974114857,
      "MetricsIntensity" : 0.06261420495829725,
      "Density" : 0.9954814042405283
    },
    "euclideanDistance" : 34.05405871339166,
    "generation" : 30,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8593134496342154,
      "LackOfCohesion" : 1.2995522974114857,
      "MetricsIntensity" : 0.06261420495829725,
      "Density" : 3.3634762184380507
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "f8da82b3-e50c-47d1-aee0-9faada39f907",
    "objectives" : {
      "NumberOfConcerns" : 0.9990942028985508,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2972096776513147,
      "MetricsIntensity" : 0.06257574176454267,
      "Density" : 0.997219325686479
    },
    "euclideanDistance" : 34.054064431151794,
    "generation" : 48,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8600337268128166,
      "LackOfCohesion" : 1.2972096776513147,
      "MetricsIntensity" : 0.06257574176454267,
      "Density" : 3.365395894428152
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "72928f68-3581-4d76-8b2a-01ce4d27c030",
    "objectives" : {
      "NumberOfConcerns" : 0.9960748792270532,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2989253975834139,
      "MetricsIntensity" : 0.0630329567701565,
      "Density" : 0.9942648592283628
    },
    "euclideanDistance" : 35.052416580279456,
    "generation" : 7,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8575450450450453,
      "LackOfCohesion" : 1.2989253975834139,
      "MetricsIntensity" : 0.0630329567701565,
      "Density" : 3.363315696649029
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "c0d11b56-d014-42bf-9bd8-e56ae0684495",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2959991090356828,
      "MetricsIntensity" : 0.06288296926421116,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 35.052434658625764,
    "generation" : 48,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8594716132658797,
      "LackOfCohesion" : 1.2959991090356828,
      "MetricsIntensity" : 0.06288296926421116,
      "Density" : 3.3632629107981233
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "dec65eb7-6d41-44a0-80fe-2904f7345c89",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.298449951423805,
      "MetricsIntensity" : 0.06295187774618127,
      "Density" : 0.9949600278067431
    },
    "euclideanDistance" : 35.05244429624231,
    "generation" : 26,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8581879572312894,
      "LackOfCohesion" : 1.298449951423805,
      "MetricsIntensity" : 0.06295187774618127,
      "Density" : 3.3636897767332554
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "97421dbc-bfae-4a77-87fb-0e6547f702e0",
    "objectives" : {
      "NumberOfConcerns" : 0.9963768115942029,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2983613091494266,
      "MetricsIntensity" : 0.06298567765836542,
      "Density" : 0.9939172749391727
    },
    "euclideanDistance" : 36.050941008311995,
    "generation" : 11,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.857062464828362,
      "LackOfCohesion" : 1.2983613091494266,
      "MetricsIntensity" : 0.06298567765836544,
      "Density" : 3.3601645123384243
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "3b7935ff-2734-4653-860f-d27d780c41b7",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.2949138351413503,
      "MetricsIntensity" : 0.06287765748895628,
      "Density" : 0.997393117831074
    },
    "euclideanDistance" : 36.05100476683247,
    "generation" : 37,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.860112359550561,
      "LackOfCohesion" : 1.2949138351413503,
      "MetricsIntensity" : 0.06287765748895628,
      "Density" : 3.3659824046920814
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "e5ca95b9-6095-4615-b564-3a931b4220cc",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.294763232731712,
      "MetricsIntensity" : 0.06291202438199428,
      "Density" : 0.9977407021202641
    },
    "euclideanDistance" : 36.05100903562537,
    "generation" : 35,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8601123595505613,
      "LackOfCohesion" : 1.294763232731712,
      "MetricsIntensity" : 0.06291202438199428,
      "Density" : 3.367155425219941
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "6cf4d3a3-142a-4b8d-a579-86ae1dec6d90",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2973215016532311,
      "MetricsIntensity" : 0.06296086718454882,
      "Density" : 0.9951338199513382
    },
    "euclideanDistance" : 37.04957852578126,
    "generation" : 39,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8581879572312892,
      "LackOfCohesion" : 1.2973215016532311,
      "MetricsIntensity" : 0.06296086718454882,
      "Density" : 3.364277320799059
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "cce65a71-3c5b-4b71-845f-7a29ffa627d0",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2977352602971877,
      "MetricsIntensity" : 0.06257920383855642,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 37.04966918511524,
    "generation" : 49,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8605174353205851,
      "LackOfCohesion" : 1.2977352602971877,
      "MetricsIntensity" : 0.06257920383855642,
      "Density" : 3.363849765258216
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "f35b0141-ac6e-430e-a352-413ee765fae7",
    "objectives" : {
      "NumberOfConcerns" : 0.9984903381642513,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2946395216001456,
      "MetricsIntensity" : 0.06292727243769115,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 38.04825097231338,
    "generation" : 31,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8589094997189428,
      "LackOfCohesion" : 1.2946395216001456,
      "MetricsIntensity" : 0.06292727243769117,
      "Density" : 3.363849765258216
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "7fdd8dbf-65a3-4a3b-b83d-a777efe39e2a",
    "objectives" : {
      "NumberOfConcerns" : 0.9960748792270532,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2988242410802258,
      "MetricsIntensity" : 0.06302290387620939,
      "Density" : 0.9937434827945777
    },
    "euclideanDistance" : 38.048266814274925,
    "generation" : 7,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.857545045045046,
      "LackOfCohesion" : 1.2988242410802258,
      "MetricsIntensity" : 0.0630229038762094,
      "Density" : 3.361552028218694
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "c791ce37-4550-42ac-b3de-488a5e44e37a",
    "objectives" : {
      "NumberOfConcerns" : 0.9960748792270532,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2988242410802255,
      "MetricsIntensity" : 0.0630229038762094,
      "Density" : 0.9937434827945777
    },
    "euclideanDistance" : 38.048266814274925,
    "generation" : 40,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8575450450450457,
      "LackOfCohesion" : 1.2988242410802255,
      "MetricsIntensity" : 0.0630229038762094,
      "Density" : 3.3615520282186946
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyLongConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "b4de28a8-ccff-46b4-b4b7-16fd6e6f45ed",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2974208542478047,
      "MetricsIntensity" : 0.06252615301865204,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 38.0483529756119,
    "generation" : 48,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8594716132658797,
      "LackOfCohesion" : 1.2974208542478047,
      "MetricsIntensity" : 0.06252615301865204,
      "Density" : 3.3618768328445747
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "3b070276-aafd-4b02-9a43-d1e4ca3863fc",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2972701610591368,
      "MetricsIntensity" : 0.06256054121261502,
      "Density" : 0.9965241571080987
    },
    "euclideanDistance" : 38.04835699590016,
    "generation" : 50,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8594716132658797,
      "LackOfCohesion" : 1.2972701610591368,
      "MetricsIntensity" : 0.06256054121261503,
      "Density" : 3.363049853372436
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "efed030d-42ee-4430-bd3c-372f73cba14c",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.2963198371883788,
      "MetricsIntensity" : 0.06286341872662299,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 39.04704990512418,
    "generation" : 46,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858347386172007,
      "LackOfCohesion" : 1.2963198371883788,
      "MetricsIntensity" : 0.06286341872662299,
      "Density" : 3.3620892018779336
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "7e5a6deb-fb03-4b43-85af-f09ccfa3353a",
    "objectives" : {
      "NumberOfConcerns" : 0.9963768115942029,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.2977018526098691,
      "MetricsIntensity" : 0.06299901649488662,
      "Density" : 0.994612443517553
    },
    "euclideanDistance" : 40.04584896887353,
    "generation" : 12,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858108108108108,
      "LackOfCohesion" : 1.2977018526098691,
      "MetricsIntensity" : 0.06299901649488662,
      "Density" : 3.364491475602587
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "caf91d12-63a2-44d7-b1c4-3e22ca36f9f4",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.2953600520715571,
      "MetricsIntensity" : 0.0629600659149638,
      "Density" : 0.9963503649635036
    },
    "euclideanDistance" : 40.04585388149465,
    "generation" : 49,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858830146231722,
      "LackOfCohesion" : 1.2953600520715571,
      "MetricsIntensity" : 0.0629600659149638,
      "Density" : 3.366412213740458
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "71243112-bf89-4a04-b1e5-6123c17ae2d0",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.2979922781647213,
      "MetricsIntensity" : 0.06259311350097026,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 40.04595471140056,
    "generation" : 48,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.859392575928009,
      "LackOfCohesion" : 1.2979922781647213,
      "MetricsIntensity" : 0.06259311350097024,
      "Density" : 3.365610328638498
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "589216f5-9417-4eef-9855-36c8adafcf7b",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2971385025856423,
      "MetricsIntensity" : 0.06295175786606196,
      "Density" : 0.9942648592283628
    },
    "euclideanDistance" : 41.04471296461542,
    "generation" : 47,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8576252110298255,
      "LackOfCohesion" : 1.2971385025856423,
      "MetricsIntensity" : 0.06295175786606196,
      "Density" : 3.3613396004700355
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "05b7316d-1217-474a-ac82-2aab8a7c9c2e",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2956573121094688,
      "MetricsIntensity" : 0.06292026306079779,
      "Density" : 0.9960027806743135
    },
    "euclideanDistance" : 41.04473761376593,
    "generation" : 48,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8588301462317214,
      "LackOfCohesion" : 1.2956573121094688,
      "MetricsIntensity" : 0.06292026306079777,
      "Density" : 3.3652378156194955
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "d7882214-a013-48d9-957a-b3ae5959b5f1",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.2980561818926781,
      "MetricsIntensity" : 0.06255964150932919,
      "Density" : 0.9958289885297185
    },
    "euclideanDistance" : 41.04481598238637,
    "generation" : 50,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.859392575928009,
      "LackOfCohesion" : 1.2980561818926781,
      "MetricsIntensity" : 0.06255964150932919,
      "Density" : 3.3626760563380276
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "f850a826-1ea2-4b90-b76a-4d9795589123",
    "objectives" : {
      "NumberOfConcerns" : 0.9975845410628019,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2969545007698873,
      "MetricsIntensity" : 0.06289711063449431,
      "Density" : 0.9953076120959332
    },
    "euclideanDistance" : 42.04368988543771,
    "generation" : 32,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8582677165354338,
      "LackOfCohesion" : 1.2969545007698873,
      "MetricsIntensity" : 0.06289711063449431,
      "Density" : 3.3628890193775685
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "a5c93a11-f8dd-4034-b13c-2b2d62449186",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2986055830810874,
      "MetricsIntensity" : 0.06259565063965919,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 42.04376814527899,
    "generation" : 38,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8598761958356782,
      "LackOfCohesion" : 1.2986055830810874,
      "MetricsIntensity" : 0.06259565063965919,
      "Density" : 3.365825014679976
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "805aeb1e-43ed-4faf-ba02-321990e6c3e3",
    "objectives" : {
      "NumberOfConcerns" : 0.9963768115942029,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.2976006961066806,
      "MetricsIntensity" : 0.06298896360093954,
      "Density" : 0.9940910670837678
    },
    "euclideanDistance" : 43.04263838307789,
    "generation" : 34,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8581081081081081,
      "LackOfCohesion" : 1.2976006961066806,
      "MetricsIntensity" : 0.06298896360093956,
      "Density" : 3.3627278071722513
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager.ConcatMapEagerMainObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "52d470b1-347a-4dd9-bef6-f82aae869039",
    "objectives" : {
      "NumberOfConcerns" : 0.9978864734299517,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.2985186502995256,
      "MetricsIntensity" : 0.06259658814819488,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 43.042736619573425,
    "generation" : 33,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8598761958356782,
      "LackOfCohesion" : 1.2985186502995256,
      "MetricsIntensity" : 0.06259658814819488,
      "Density" : 3.36406341749853
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "4989f55d-6e51-4b2e-b545-817dc9ed272c",
    "objectives" : {
      "NumberOfConcerns" : 0.9975845410628019,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.29557135603632,
      "MetricsIntensity" : 0.06291044726030001,
      "Density" : 0.9953076120959332
    },
    "euclideanDistance" : 44.04166521627242,
    "generation" : 30,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8582677165354329,
      "LackOfCohesion" : 1.29557135603632,
      "MetricsIntensity" : 0.06291044726030001,
      "Density" : 3.362889019377569
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "8e0b9e58-d3fb-46aa-bf39-dbb61337c90c",
    "objectives" : {
      "NumberOfConcerns" : 0.9975845410628019,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2954205719591187,
      "MetricsIntensity" : 0.06294485619503139,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 44.041668686595344,
    "generation" : 47,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8582677165354329,
      "LackOfCohesion" : 1.2954205719591187,
      "MetricsIntensity" : 0.06294485619503139,
      "Density" : 3.3640634174985324
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "8727d871-f91a-4d8e-9505-4c0385edb531",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.2963070463840987,
      "MetricsIntensity" : 0.06295423471000469,
      "Density" : 0.9954814042405283
    },
    "euclideanDistance" : 44.0416771807039,
    "generation" : 26,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8581879572312892,
      "LackOfCohesion" : 1.2963070463840987,
      "MetricsIntensity" : 0.06295423471000469,
      "Density" : 3.36545240893067
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "570de744-633c-492a-8481-0a04bc68c734",
    "objectives" : {
      "NumberOfConcerns" : 0.9972826086956522,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2960323248500139,
      "MetricsIntensity" : 0.06294760561054229,
      "Density" : 0.9951338199513382
    },
    "euclideanDistance" : 46.03985801573812,
    "generation" : 42,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8587507034327522,
      "LackOfCohesion" : 1.2960323248500139,
      "MetricsIntensity" : 0.06294760561054229,
      "Density" : 3.364277320799059
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "5df69445-5ec8-4d98-ad9b-132eabd77d73",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2967687378180588,
      "MetricsIntensity" : 0.06299144194056099,
      "Density" : 0.9953076120959332
    },
    "euclideanDistance" : 46.0398694920229,
    "generation" : 8,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8586711711711714,
      "LackOfCohesion" : 1.2967687378180588,
      "MetricsIntensity" : 0.062991441940561,
      "Density" : 3.3668430335097006
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent.DoOnEvent'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "02c7e6e7-b711-4207-b372-5b312980b2a4",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2961420086350146,
      "MetricsIntensity" : 0.06297768007498032,
      "Density" : 0.9958289885297185
    },
    "euclideanDistance" : 46.039869636415176,
    "generation" : 38,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8581879572312885,
      "LackOfCohesion" : 1.2961420086350146,
      "MetricsIntensity" : 0.06297768007498031,
      "Density" : 3.36662749706228
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "9d2801d0-5031-4313-a92d-674ed80945fe",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.2962059509288903,
      "MetricsIntensity" : 0.06294418788298213,
      "Density" : 0.9949600278067431
    },
    "euclideanDistance" : 47.03900538663543,
    "generation" : 20,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8581879572312885,
      "LackOfCohesion" : 1.2962059509288903,
      "MetricsIntensity" : 0.06294418788298212,
      "Density" : 3.3636897767332563
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "f7b028c2-6a88-484a-b94f-6ec9bb98d654",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 1.296754566592073,
      "MetricsIntensity" : 0.06298045097194983,
      "Density" : 0.9953076120959332
    },
    "euclideanDistance" : 48.0382092162535,
    "generation" : 34,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8586711711711703,
      "LackOfCohesion" : 1.296754566592073,
      "MetricsIntensity" : 0.06298045097194985,
      "Density" : 3.3668430335097
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "7f638cac-5ddd-4120-96d8-f9015c7601c2",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.2966675813148705,
      "MetricsIntensity" : 0.0629813890466139,
      "Density" : 0.9947862356621481
    },
    "euclideanDistance" : 49.03741715919718,
    "generation" : 34,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8586711711711705,
      "LackOfCohesion" : 1.2966675813148705,
      "MetricsIntensity" : 0.0629813890466139,
      "Density" : 3.3650793650793642
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  }, {
    "solutionId" : "6ee4728f-0cf1-405f-b19b-4e6e4c5f075d",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.2966675813148703,
      "MetricsIntensity" : 0.06298138904661392,
      "Density" : 0.9947862356621481
    },
    "euclideanDistance" : 49.03741715919718,
    "generation" : 33,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8586711711711708,
      "LackOfCohesion" : 1.2966675813148703,
      "MetricsIntensity" : 0.06298138904661393,
      "Density" : 3.3650793650793633
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.JustAsyncPerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableNext'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOther.MainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleMapOptional'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.NotificationOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray.FromArrayDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybePeek'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin.JoinSubscriptionBase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle.LastSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    } ]
  } ]
}